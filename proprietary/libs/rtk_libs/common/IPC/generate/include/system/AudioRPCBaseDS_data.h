    /*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _AUDIORPCBASEDS_DATA_H_RPCGEN
#define _AUDIORPCBASEDS_DATA_H_RPCGEN

#include <rpc_common.h>
#ifdef __GENERIC_LINUX__
#include <stdio.h>
#include <stdlib.h>
#endif

enum AUDIO_DEC_TYPE {
	AUDIO_UNKNOWN_TYPE = 0,
	AUDIO_MPEG_DECODER_TYPE = 1,
	AUDIO_AC3_DECODER_TYPE = 2,
	AUDIO_LPCM_DECODER_TYPE = 3,
	AUDIO_DTS_DECODER_TYPE = 4,
	AUDIO_WMA_DECODER_TYPE = 5,
	AUDIO_AAC_DECODER_TYPE = 6,
	AUDIO_VORBIS_DECODER_TYPE = 7,
	AUDIO_DV_DECODER_TYPE = 8,
	AUDIO_MLP_DECODER_TYPE = 9,
	AUDIO_DDP_DECODER_TYPE = 10,
	AUDIO_DTS_HD_DECODER_TYPE = 11,
	AUDIO_WMA_PRO_DECODER_TYPE = 12,
	AUDIO_MP4AAC_DECODER_TYPE = 13,
	AUDIO_MP3_PRO_DECODER_TYPE = 14,
	AUDIO_MP4HEAAC_DECODER_TYPE = 15,
	AUDIO_RAW_AAC_DECODER_TYPE = 16,
	AUDIO_RA1_DECODER_TYPE = 17,
	AUDIO_RA2_DECODER_TYPE = 18,
	AUDIO_ATRAC3_DECODER_TYPE = 19,
	AUDIO_COOK_DECODER_TYPE = 20,
	AUDIO_LSD_DECODER_TYPE = 21,
	AUDIO_ADPCM_DECODER_TYPE = 22,
	AUDIO_FLAC_DECODER_TYPE = 23,
	AUDIO_ULAW_DECODER_TYPE = 24,
	AUDIO_ALAW_DECODER_TYPE = 25,
	AUDIO_ALAC_DECODER_TYPE = 26,
	AUDIO_DTS_HIGH_RESOLUTION_DECODER_TYPE = 27,
	AUDIO_DTS_LBR_DECODER_TYPE = 28,
	AUDIO_DTS_MASTER_AUDIO_DECODER_TYPE = 29,
	AUDIO_AMRNB_DECODER_TYPE = 30,
	AUDIO_MIDI_DECODER_TYPE = 31,
	AUDIO_APE_DECODER_TYPE = 32,
	AUDIO_AVS_DECODER_TYPE = 33,
	AUDIO_NELLYMOSER_DECODER_TYPE = 34,
	AUDIO_WMA_LOSSLESS_DECODER_TYPE = 35,
	AUDIO_UNCERTAIN_DECODER_TYPE = 36,
	AUDIO_UNCERTAIN_HDMV_DECODER_TYPE = 37,
	AUDIO_ILBC_DECODER_TYPE = 38,
	AUDIO_SILK_DECODER_TYPE = 39,
	AUDIO_AMRWB_DECODER_TYPE = 40,
	AUDIO_G729_DECODER_TYPE = 41,
	AUDIO_DRA_DECODER_TYPE = 42,
	AUDIO_MS12_ASSOC_AAC_DECODER_TYPE = 43,
	AUDIO_OPUS_DECODER_TYPE = 44,
	AUDIO_MS12_AC4_DECODER_TYPE = 45,
	AUDIO_MS12_ASSOC_AC4_DECODER_TYPE = 46,
	AUDIO_DSD_DECODER_TYPE = 47,
	AUDIO_DLB_AAC_DECODER_TYPE = 48,
	AUDIO_MS12_DTHD_DECODER_TYPE = 49,
	AUDIO_MPEGH_DECODER_TYPE = 50,
	AUDIO_MS12_MAT_DECODER_TYPE = 51,
	AUDIO_MS12_IDK_DECODER_TYPE = 52
};
typedef enum AUDIO_DEC_TYPE AUDIO_DEC_TYPE;

enum AUDIO_CHANNEL_OUT_INDEX {
	AUDIO_NULL_CHANNEL_INDEX = 0,
	AUDIO_LEFT_FRONT_INDEX = 1,
	AUDIO_RIGHT_FRONT_INDEX = 2,
	AUDIO_CENTER_FRONT_INDEX = 5,
	AUDIO_LFE_INDEX = 6,
	AUDIO_LEFT_SURROUND_REAR_INDEX = 3,
	AUDIO_RIGHT_SURROUND_REAR_INDEX = 4,
	AUDIO_LEFT_OUTSIDE_FRONT_INDEX = 7,
	AUDIO_RIGHT_OUTSIDE_FRONT_INDEX = 8,
	AUDIO_SPDIF_LEFT_CHANNEL_INDEX = 9,
	AUDIO_SPDIF_RIGHT_CHANNEL_INDEX = 10,
	AUDIO_SURROUND_INDEX = 11,
	AUDIO_CENTER_SURROUND_REAR_INDEX = 12,
	AUDIO_OverHead_INDEX = 13,
	AUDIO_LEFT_SURROUND_INDEX = 14,
	AUDIO_RIGHT_SURROUND_INDEX = 15,
	AUDIO_LEFT_FRONT_HIGH_INDEX = 16,
	AUDIO_RIGHT_FRONT_HIGH_INDEX = 17,
	AUDIO_LEFT_INNER_FRONT_INDEX = 18,
	AUDIO_RIGHT_INNER_FRONT_INDEX = 19,
	AUDIO_LEFT_REAR_INDEX = 20,
	AUDIO_RIGHT_REAR_INDEX = 21,
	AUDIO_LEFT_SURROUND_DIRECT_INDEX = 22,
	AUDIO_RIGHT_SURROUND_DIRECT_INDEX = 23,
	AUDIO_CENTER_FRONT_HIGH_INDEX = 24,
	AUDIO_LFE2_INDEX = 25,
	AUDIO_SPDIF_NON_PCM_TYPE = 256,
	AUDIO_ENABLE_DOWNMIX = 257,
};
typedef enum AUDIO_CHANNEL_OUT_INDEX AUDIO_CHANNEL_OUT_INDEX;

enum AUDIO_MODULE_TYPE {
	AUDIO_OUT = 7,
	AUDIO_IN = 8,
	AUDIO_ENCODER = 9,
	AUDIO_MPEG_ENCODER = 10,
	AUDIO_ALSA_OUT = 12,
	AUDIO_PSEUDO_OUT = 14,
	AUDIO_PP_OUT = 15,
	AUDIO_DECODER = 16,
	AUDIO_UNKNOWN = 17,
	AUDIO_LPCM_ENCODER = 19,
	AUDIO_AAC_ENCODER = 21,
	AUDIO_MP3_ENCODER = 22,
	AUDIO_RV_PARSER = 23,
	AUDIO_AC3_ENCODER = 24,
	AUDIO_VIENNA_OUT = 25,
	AUDIO_DTS_ENCODER = 26,
	AUDIO_VP6_PARSER = 27,
	AUDIO_IN_DEVICE = 28,
	AUDIO_ILBC_ENCODER = 29,
	AUDIO_KARAOKE_MIXER = 30,
	AUDIO_VP8_PARSER = 31,
	AUDIO_SILK_ENCODER = 32,
	AUDIO_G729_ENCODER = 33,
	AUDIO_PCMU_ENCODER = 34,
	AUDIO_PCMA_ENCODER = 35,
	VIDEO_OUT = 36,
	AUDIO_DDP_ENCODER = 37,
	AUDIO_MS_PP = 38,
	AUDIO_MS_DECODER = 39,
	AUDIO_PRE_PROCESSING = 40,
	AUDIO_DAP = 41,
};
typedef enum AUDIO_MODULE_TYPE AUDIO_MODULE_TYPE;

enum AUDIO_IO_PIN {
	BASE_BS_IN = 0,
	EXT_BS_IN = 1,
	PCM_IN = 2,
	BASE_BS_OUT = 3,
	EXT_BS_OUT = 4,
	PCM_OUT = 5,
	SPDIF_IN = 6,
	SPDIF_OUT = 7,
	NON_PCM_OUT = 8,
	INBAND_QUEUE = 9,
	MESSAGE_QUEUE = 10,
	MIC_IN = 11,
	SOUND_EVENT_IN = 12,
	PCM_OUT1 = 13,
	PCM_OUT2 = 14,
	FLASH_AUDIO_PIN_1 = 15,
	FLASH_AUDIO_PIN_2 = 16,
	FLASH_AUDIO_PIN_3 = 17,
	FLASH_AUDIO_PIN_4 = 18,
	FLASH_AUDIO_PIN_5 = 19,
	FLASH_AUDIO_PIN_6 = 20,
	FLASH_AUDIO_PIN_7 = 21,
	FLASH_AUDIO_PIN_8 = 22,
	FLASH_AUDIO_PIN_9 = 23,
	FLASH_AUDIO_PIN_10 = 24,
	FLASH_AUDIO_PIN_11 = 25,
	FLASH_AUDIO_PIN_12 = 26,
	FLASH_AUDIO_PIN_13 = 27,
	FLASH_AUDIO_PIN_14 = 28,
	FLASH_AUDIO_PIN_15 = 29,
	FLASH_AUDIO_PIN_16 = 30,
	ASSOCIATED_PCM_IN = 31,
	EXTERNAL_PCM_IN = 32,
	SYSTEM_PCM_IN = 33,
	APP_PCM_IN = 34,
	DOWNMIX_PCM_OUT = 35,
	RAW_PCM_OUT = 36,
	EXT_PCM_OUT = 37,
	EXT_INBAND_QUEUE = 38,
	NON_PCM_IN = 39,
	DTS_LA_IN0 = 40,
	DTS_LA_IN1 = 41,
	DTS_LA_IN2 = 42,
	DTS_LA_IN3 = 43,
	DTS_LA_IN4 = 44,
	DTS_LA_IN5 = 45,
	DTS_LA_IN6 = 46,
	DTS_LA_IN7 = 47,
	TDM_IN = 48,
	PCM_PACKED_IN = 49,
	APP_PCM_OUT = 50,
	APP_LPCM_OUT = 51,
	UI_PCM_IN = 52,
	MAIN2_BS_IN = 53,
        LOOPBACK_PCM_IN = 54,
	DWNSTRM_INBAND_QUEUE = 200,
	EXT_DWNSTRM_INBAND_QUEUE = 201,
	RAWOUT_INFOOUT_QUEUE = 202,
	RAWOUT_INFOIN_QUEUE = 203,
};
typedef enum AUDIO_IO_PIN AUDIO_IO_PIN;

enum ENUM_AUDIO_BILINGUAL_TYPE {
	ENUM_AUDIO_STEREO = 0,
	ENUM_AUDIO_MAIN_BILINGUAL = 1,
	ENUM_AUDIO_SUB_BILINGUAL = 2,
	ENUM_AUDIO_FLASH_STEREO = 3,
	ENUM_AUDIO_FLASH_MAIN_BILINGUAL = 4,
	ENUM_AUDIO_FLASH_SUB_BILINGUAL = 5,
};
typedef enum ENUM_AUDIO_BILINGUAL_TYPE ENUM_AUDIO_BILINGUAL_TYPE;

enum ENUM_AUDIO_NIGHTMODE_CFG {
	ENUM_AUDIO_NIGHTMODE_OFF = 0,
	ENUM_AUDIO_NIGHTMODE_ON = 1,
};
typedef enum ENUM_AUDIO_NIGHTMODE_CFG ENUM_AUDIO_NIGHTMODE_CFG;

struct AUDIO_RPC_NIGHTMODE {
	u_int instanceID;
	u_int cfg;
};
typedef struct AUDIO_RPC_NIGHTMODE AUDIO_RPC_NIGHTMODE;

enum ENUM_AUDIO_DAC_SWITCH_CFG {
	ENUM_AUDIO_DAC_SWITCH_OFF = 0,
	ENUM_AUDIO_DAC_SWITCH_ON = 1,
};
typedef enum ENUM_AUDIO_DAC_SWITCH_CFG ENUM_AUDIO_DAC_SWITCH_CFG;

enum ENUM_AUDIO_TV_SWITCH_CFG {
	ENUM_AUDIO_TV_ZAPPING_MODE_OFF = 0,
	ENUM_AUDIO_TV_ZAPPING_MODE_ON = 1,
};
typedef enum ENUM_AUDIO_TV_SWITCH_CFG ENUM_AUDIO_TV_SWITCH_CFG;

enum ENUM_AUDIO_TRUEHD_LOSSLESSMODE_CFG {
	ENUM_AUDIO_TRUEHD_LOSSLESSMODE_OFF = 0,
	ENUM_AUDIO_TRUEHD_LOSSLESSMODE_ON = 1,
};
typedef enum ENUM_AUDIO_TRUEHD_LOSSLESSMODE_CFG ENUM_AUDIO_TRUEHD_LOSSLESSMODE_CFG;

struct AUDIO_RPC_TRUEHD_LOSSLESSMODE {
	u_int cfg;
};
typedef struct AUDIO_RPC_TRUEHD_LOSSLESSMODE AUDIO_RPC_TRUEHD_LOSSLESSMODE;

enum ENUM_AUDIO_DELAY_DAC_SWITCH_CFG {
	ENUM_AUDIO_DELAY_DAC_SWITCH_OFF = 0,
	ENUM_AUDIO_DELAY_DAC_SWITCH_ON = 1,
};
typedef enum ENUM_AUDIO_DELAY_DAC_SWITCH_CFG ENUM_AUDIO_DELAY_DAC_SWITCH_CFG;

struct AUDIO_RPC_DEC_BITSTREAM_BUFFER {
	u_int bsBase;
	u_int bsSize;
};
typedef struct AUDIO_RPC_DEC_BITSTREAM_BUFFER AUDIO_RPC_DEC_BITSTREAM_BUFFER;

struct AUDIO_RPC_FORMAT_INFO {
	u_char result;
	enum AUDIO_DEC_TYPE Type;
	u_int VariableBitRateFlag;
	u_int BitRate;
	u_char copyright;
	u_int rsv_data[4];
};
typedef struct AUDIO_RPC_FORMAT_INFO AUDIO_RPC_FORMAT_INFO;

struct AUDIO_PCM_FORMAT {
	int chnum;
	int samplebit;
	int samplerate;
	u_int dynamicRange;
	u_char emphasis;
	u_char mute;
};
typedef struct AUDIO_PCM_FORMAT AUDIO_PCM_FORMAT;

struct AUDIO_EXT_BS {
	int exist;
};
typedef struct AUDIO_EXT_BS AUDIO_EXT_BS;

struct AUDIO_DEC_CFG {
	u_int scalehi;
	u_int scalelo;
	u_short mode;
	u_short LFEMode;
	u_short dualmono;
	u_short comprMode;
	u_short stereoMode;
};
typedef struct AUDIO_DEC_CFG AUDIO_DEC_CFG;

enum ENCODE_MODE {
	DUALCHANNEL_1_AND_1 = 0,
	MONO = 1,
	STEREO = 2,
	JOINT_STERO = 3,
	ENCODE_MODE_ERROR = 4,
};
typedef enum ENCODE_MODE ENCODE_MODE;

struct AUDIO_ENC_CFG {
	int inputmode;
	int outputmode;
	int DRC1;
	int DRC2;
	int datarate;
	int samprate;
	int LorR;
};
typedef struct AUDIO_ENC_CFG AUDIO_ENC_CFG;

struct AUDIO_RPC_INSTANCE {
	u_int instanceID;
	u_int type;
};
typedef struct AUDIO_RPC_INSTANCE AUDIO_RPC_INSTANCE;

struct AUDIO_RPC_HASH {
	u_int rand_value;
};
typedef struct AUDIO_RPC_HASH AUDIO_RPC_HASH;

struct AUDIO_FRAME_BOUNDARY {
	u_int frameBeginPtr;
	u_int writeBeginPtr;
	u_int writeSize;
};
typedef struct AUDIO_FRAME_BOUNDARY AUDIO_FRAME_BOUNDARY;

struct AUDIO_RPC_SEND_LONG {
	u_int instanceID;
	u_int data;
};
typedef struct AUDIO_RPC_SEND_LONG AUDIO_RPC_SEND_LONG;

struct AUDIO_RPC_SENDPIN_LONG {
	u_int instanceID;
	u_int pinID;
	u_int data;
};
typedef struct AUDIO_RPC_SENDPIN_LONG AUDIO_RPC_SENDPIN_LONG;

struct AUDIO_RPC_SEEK {
	u_int instanceID;
	u_int speed;
	u_int skip;
};
typedef struct AUDIO_RPC_SEEK AUDIO_RPC_SEEK;

struct AUDIO_RPC_PRIVATEINFO {
	u_int instanceID;
	u_int pData;
	u_int length;
};
typedef struct AUDIO_RPC_PRIVATEINFO AUDIO_RPC_PRIVATEINFO;

struct AUDIO_RPC_RINGBUFFER {
	u_int instanceID;
	u_int in_beginPAddrList[8];
	u_int in_listSize;
	u_int in_bufSize;
	u_int in_pinID;
	u_int extin_beginPAddrList[8];
	u_int extin_listSize;
	u_int extin_bufSize;
	u_int extin_pinID;
	u_int out_beginPAddrList[8];
	u_int out_listSize;
	u_int out_bufSize;
	u_int out_pinID;
};
typedef struct AUDIO_RPC_RINGBUFFER AUDIO_RPC_RINGBUFFER;

struct AUDIO_RPC_WRITEPACK {
	u_int instanceID;
	u_int pinID;
	u_int writePtr[8];
	int listSize;
	int writeSize;
};
typedef struct AUDIO_RPC_WRITEPACK AUDIO_RPC_WRITEPACK;

struct AUDIO_RPC_READPACK {
	u_int instanceID;
	u_int pinID;
	u_int readPtr[8];
	int listSize;
	int readSize;
};
typedef struct AUDIO_RPC_READPACK AUDIO_RPC_READPACK;

struct AUDIO_RPC_SENDIO {
	u_int instanceID;
	int pinID;
};
typedef struct AUDIO_RPC_SENDIO AUDIO_RPC_SENDIO;

struct AUDIO_RPC_SWITCHAGENT {
	u_int instanceID1;
	u_int instanceID2;
	AUDIO_PCM_FORMAT pcmFormat;
};
typedef struct AUDIO_RPC_SWITCHAGENT AUDIO_RPC_SWITCHAGENT;

struct AUDIO_RPC_PCMFORMAT {
	u_int instanceID;
	u_int pinID;
	AUDIO_PCM_FORMAT pcmFormat;
};
typedef struct AUDIO_RPC_PCMFORMAT AUDIO_RPC_PCMFORMAT;

struct AUDIO_RPC_FRAME_BOUNDARY {
	u_int instanceID;
	AUDIO_FRAME_BOUNDARY frameBoundary;
};
typedef struct AUDIO_RPC_FRAME_BOUNDARY AUDIO_RPC_FRAME_BOUNDARY;

struct AUDIO_RPC_DECCFG {
	u_int instanceID;
	AUDIO_DEC_CFG cfg;
};
typedef struct AUDIO_RPC_DECCFG AUDIO_RPC_DECCFG;

struct AUDIO_RPC_EXTBS_EXIST {
	u_int instanceID;
	int extbsExist;
};
typedef struct AUDIO_RPC_EXTBS_EXIST AUDIO_RPC_EXTBS_EXIST;

struct AUDIO_RPC_CONNECTION {
	u_int srcInstanceID;
	u_int srcPinID;
	u_int desInstanceID;
	u_int desPinID;
	u_int mediaType;
};
typedef struct AUDIO_RPC_CONNECTION AUDIO_RPC_CONNECTION;

struct AUDIO_RPC_REFCLOCK {
	u_int instanceID;
	u_int pRefClockID;
	u_int pRefClock;
};
typedef struct AUDIO_RPC_REFCLOCK AUDIO_RPC_REFCLOCK;

struct AUDIO_RPC_PTS_INFO {
	u_int instanceID;
	u_int pinID;
	int64_t pts;
	u_int pWritePointer;
	u_int length;
};
typedef struct AUDIO_RPC_PTS_INFO AUDIO_RPC_PTS_INFO;

struct AUDIO_RPC_RINGBUFFER_HEADER {
	u_int instanceID;
	u_int pinID;
	u_int pRingBufferHeaderList[8];
	u_int readIdx;
	u_int listSize;
};
typedef struct AUDIO_RPC_RINGBUFFER_HEADER AUDIO_RPC_RINGBUFFER_HEADER;

struct AUDIO_RPC_RINGBUFFER_HEADER_EXT {
       long instanceID;
       long pinID;
       long pRingBufferHeaderList[AUDIO_RING_LIST_MAX];
       long readIdx;
       long listSize;
};
typedef struct AUDIO_RPC_RINGBUFFER_HEADER_EXT AUDIO_RPC_RINGBUFFER_HEADER_EXT;


struct AUDIO_RPC_FOCUS {
	u_int instanceID;
	u_int focusID;
};
typedef struct AUDIO_RPC_FOCUS AUDIO_RPC_FOCUS;

struct AUDIO_RPC_AO_FOCUS {
	u_int instanceID;
	u_int focusID;
	u_int PTS_length;
};
typedef struct AUDIO_RPC_AO_FOCUS AUDIO_RPC_AO_FOCUS;

enum ENUM_AUDIO_CHANNEL_IN {
	IN_NULL_CHANNEL = 0,
	ADC0_LEFT_CHANNEL_EN = 1,
	ADC0_RIGHT_CHANNEL_EN = 2,
	ADC1_LEFT_CHANNEL_EN = 4,
	ADC1_Right_CHANNEL_EN = 8,
	SPDIF_LEFT_CHANNEL_EN = 16,
	SPDIF_RIGHT_CHANNEL_EN = 32,
	ADC2_LEFT_CHANNEL_EN = 64,
	ADC2_RIGHT_CHANNEL_EN = 128,
};
typedef enum ENUM_AUDIO_CHANNEL_IN ENUM_AUDIO_CHANNEL_IN;

enum ENUM_AUDIO_CHANNEL_OUT {
	OUT_NULL_CHANNEL = 0,
	LEFT_CENTER_FRONT_CHANNEL_EN = 1,
	RIGHT_CENTER_FRONT_CHANNEL_EN = 2,
	CENTER_FRONT_CHANNEL_EN = 4,
	LFE_CHANNEL_EN = 8,
	LEFT_SURROUND_CHANNEL_EN = 16,
	RIGHT_SURROUND_CHANNEL_EN = 32,
	LEFT_OUTSIDE_FRONT_CHANNEL_EN = 64,
	RIGHT_OUTSIDE_FRONT_CHANNEL_EN = 128,
	NON_PCM_OUT_EN = 256,
	ENABLE_DOWNMIX = 257,
};
typedef enum ENUM_AUDIO_CHANNEL_OUT ENUM_AUDIO_CHANNEL_OUT;

struct AUDIO_GENERAL_CONFIG {
	char interface_en;
	char channel_in;
	char count_down_rec_en;
	int count_down_rec_cyc;
};
typedef struct AUDIO_GENERAL_CONFIG AUDIO_GENERAL_CONFIG;

struct AUDIO_SAMPLE_INFO {
	int sampling_rate;
	int PCM_bitnum;
};
typedef struct AUDIO_SAMPLE_INFO AUDIO_SAMPLE_INFO;

struct AUDIO_SPDIF_ERROR {
	u_char err_threshold;
	u_int errorReportEnable;
};
typedef struct AUDIO_SPDIF_ERROR AUDIO_SPDIF_ERROR;

struct AUDIO_ADC_CONFIG {
	AUDIO_GENERAL_CONFIG audioGeneralConfig;
	AUDIO_SAMPLE_INFO sampleInfo;
};
typedef struct AUDIO_ADC_CONFIG AUDIO_ADC_CONFIG;

struct AUDIO_SPDIF_CONFIG {
	AUDIO_GENERAL_CONFIG audioGeneralConfig;
	AUDIO_SPDIF_ERROR audioSPDIFError;
};
typedef struct AUDIO_SPDIF_CONFIG AUDIO_SPDIF_CONFIG;

struct AUDIO_IN_SOURCE {
	u_int instanceID;
	char focus_in;
};
typedef struct AUDIO_IN_SOURCE AUDIO_IN_SOURCE;

struct AUDIO_IN_DATA_MEASURE {
	u_int instanceID;
};
typedef struct AUDIO_IN_DATA_MEASURE AUDIO_IN_DATA_MEASURE;

struct AUDIO_IN_MUTE_INFO {
	u_int instanceID;
	char mute_en;
};
typedef struct AUDIO_IN_MUTE_INFO AUDIO_IN_MUTE_INFO;

struct AUDIO_OUT_COPY_SOURCE {
	u_int instanceID;
	int src_channel;
};
typedef struct AUDIO_OUT_COPY_SOURCE AUDIO_OUT_COPY_SOURCE;

struct AUDIO_OUT_SPDIF_SOURCE {
	u_int instanceID;
	int l_channel;
	int r_channel;
};
typedef struct AUDIO_OUT_SPDIF_SOURCE AUDIO_OUT_SPDIF_SOURCE;

struct AUDIO_KARAOKE_CONTROL_INFO {
	u_int instanceID;
	char speaker_mode;
	char vocal_mode;
};
typedef struct AUDIO_KARAOKE_CONTROL_INFO AUDIO_KARAOKE_CONTROL_INFO;

struct LINK_BUFFER {
	u_int magicNumber;
	u_int Reserved;
	u_int Next;
	u_int Size;
	u_char Data[1];
};
typedef struct LINK_BUFFER LINK_BUFFER;

struct AUDIO_SOUND_EVENT {
	u_int instanceID;
	AUDIO_PCM_FORMAT pcmFormat;
	u_int endianType;
	u_int pBitstreamRB;
	u_int iteration;
};
typedef struct AUDIO_SOUND_EVENT AUDIO_SOUND_EVENT;

struct AUDIO_HDMI_SET {
	u_int HDMI_Frequency;
};
typedef struct AUDIO_HDMI_SET AUDIO_HDMI_SET;

struct AUDIO_HDMI_MUTE_INFO {
	u_int instanceID;
	char hdmi_mute;
};
typedef struct AUDIO_HDMI_MUTE_INFO AUDIO_HDMI_MUTE_INFO;

struct AUDIO_OUT_MUTE_INFO {
	u_int instanceID;
	char mute_flag;
};
typedef struct AUDIO_OUT_MUTE_INFO AUDIO_OUT_MUTE_INFO;

struct AUDIO_CONFIG_ADC {
	u_int instanceID;
	AUDIO_ADC_CONFIG adcConfig;
};
typedef struct AUDIO_CONFIG_ADC AUDIO_CONFIG_ADC;

struct AUDIO_CONFIG_AFC {
	char afc_flag;
};
typedef struct AUDIO_CONFIG_AFC AUDIO_CONFIG_AFC;

struct AUDIO_DROP_SAMPLE {
	u_int instanceID;
	u_int drop_pts;
};
typedef struct AUDIO_DROP_SAMPLE AUDIO_DROP_SAMPLE;

struct AUDIO_P_W_NOISE_CFG {
	u_int instanceID;
	char pink_white_noise_en;
	char pink_white_noise_out_channel[6];
};
typedef struct AUDIO_P_W_NOISE_CFG AUDIO_P_W_NOISE_CFG;

enum ENUM_AUDIO_SPECTRUM_BANDNUM {
	ENUM_AUDIO_SPECTRUM_16BAND = 0,
	ENUM_AUDIO_SPECTRUM_32BAND = 1,
	ENUM_AUDIO_SPECTRUM_64BAND = 2,
	ENUM_AUDIO_SPECTRUM_ALLBAND = 3,
};
typedef enum ENUM_AUDIO_SPECTRUM_BANDNUM ENUM_AUDIO_SPECTRUM_BANDNUM;

struct AUDIO_SPECTRUM_CFG {
	u_int enable;
	u_int bandnum;
	u_int data_addr;
	u_int upper_bandlimit_addr;
};
typedef struct AUDIO_SPECTRUM_CFG AUDIO_SPECTRUM_CFG;

struct AUDIO_VOLUME_CONTROL {
	u_int instanceID;
	char level;
};
typedef struct AUDIO_VOLUME_CONTROL AUDIO_VOLUME_CONTROL;

struct AUDIO_CONFIG_SPDIF {
	u_int instanceID;
	AUDIO_SPDIF_CONFIG spdifConfig;
};
typedef struct AUDIO_CONFIG_SPDIF AUDIO_CONFIG_SPDIF;

struct AUDIO_CONFIG_SPDIF_ERR {
	u_int instanceID;
	AUDIO_SPDIF_ERROR audioSPDIFError;
};
typedef struct AUDIO_CONFIG_SPDIF_ERR AUDIO_CONFIG_SPDIF_ERR;

struct AUDIO_BACKDOOR_AI_INIT {
	u_int instanceID;
	u_int PTSStamp1;
	u_int PTSStamp2;
};
typedef struct AUDIO_BACKDOOR_AI_INIT AUDIO_BACKDOOR_AI_INIT;

struct AUDIO_OUT_GENERAL_CONFIG {
	char interface_en;
	char channel_out;
	char count_down_play_en;
	int count_down_play_cyc;
};
typedef struct AUDIO_OUT_GENERAL_CONFIG AUDIO_OUT_GENERAL_CONFIG;

struct AUDIO_OUT_CS_INFO {
	char non_pcm_valid;
	char non_pcm_format;
	int audio_format;
	char spdif_consumer_use;
	char copy_right;
	char pre_emphasis;
	char stereo_channel;
};
typedef struct AUDIO_OUT_CS_INFO AUDIO_OUT_CS_INFO;

struct AUDIO_DAC_CONFIG {
	AUDIO_OUT_GENERAL_CONFIG audioGeneralConfig;
	AUDIO_SAMPLE_INFO sampleInfo;
};
typedef struct AUDIO_DAC_CONFIG AUDIO_DAC_CONFIG;

struct AUDIO_OUT_SPDIF_CONFIG {
	AUDIO_OUT_GENERAL_CONFIG audioGeneralConfig;
	AUDIO_SAMPLE_INFO sampleInfo;
	AUDIO_OUT_CS_INFO out_cs_info;
};
typedef struct AUDIO_OUT_SPDIF_CONFIG AUDIO_OUT_SPDIF_CONFIG;

struct AUDIO_CONFIG_DAC_I2S {
	u_int instanceID;
	AUDIO_DAC_CONFIG dacConfig;
};
typedef struct AUDIO_CONFIG_DAC_I2S AUDIO_CONFIG_DAC_I2S;

struct AUDIO_KARAOKE_SCORING_CONFIG {
	u_char ena;
	u_int scoring_mode;
};
typedef struct AUDIO_KARAOKE_SCORING_CONFIG AUDIO_KARAOKE_SCORING_CONFIG;

enum ENUM_KARAOKE_SCORING_ENA {
	KARAOKE_SCORING_ENA_OFF = 0,
	KARAOKE_SCORING_ENA_ON = 1,
};
typedef enum ENUM_KARAOKE_SCORING_ENA ENUM_KARAOKE_SCORING_ENA;

enum ENUM_KARAOKE_SCORING_MODE {
	KARAOKE_SCORING_MODE_HAPPY = 0,
	KARAOKE_SCORING_MODE_FUNDAMENTAL = 1,
	KARAOKE_SCORING_MODE_ADVANCED = 2,
};
typedef enum ENUM_KARAOKE_SCORING_MODE ENUM_KARAOKE_SCORING_MODE;

struct AUDIO_CONFIG_DAC_SPDIF {
	u_int instanceID;
	AUDIO_OUT_SPDIF_CONFIG spdifConfig;
};
typedef struct AUDIO_CONFIG_DAC_SPDIF AUDIO_CONFIG_DAC_SPDIF;

struct AUDIO_RPC_SPDIF_CHANNEL_STATUS {
	u_int instanceID;
	u_int ChannelStatus[6];
};
typedef struct AUDIO_RPC_SPDIF_CHANNEL_STATUS AUDIO_RPC_SPDIF_CHANNEL_STATUS;

enum ENUM_DVD_AUDIO_ENCODER_OUTPUT_INFO_TYPE {
	AUDIOENCODER_AudioGEN = 0,
	AUDIOENCODER_AudioFrameInfo = 1,
	AUDIOENCODER_TotalInfo = 2,
	AUDIOENCODER_AudioEOSInfo = 3,
	AUDIOENCODER_InputEOSInfo = 4,
};
typedef enum ENUM_DVD_AUDIO_ENCODER_OUTPUT_INFO_TYPE ENUM_DVD_AUDIO_ENCODER_OUTPUT_INFO_TYPE;

struct AUDIO_RPC_ENC_ELEM_GENERAL_INFO {
	enum ENUM_DVD_AUDIO_ENCODER_OUTPUT_INFO_TYPE infoType;
	enum AUDIO_MODULE_TYPE audioEncoderType;
	u_int bitRate;
	u_int samplingRate;
	enum ENCODE_MODE mode;
};
typedef struct AUDIO_RPC_ENC_ELEM_GENERAL_INFO AUDIO_RPC_ENC_ELEM_GENERAL_INFO;

struct AUDIO_RPC_ENC_ELEM_FRAME_INFO {
	enum ENUM_DVD_AUDIO_ENCODER_OUTPUT_INFO_TYPE infoType;
	u_int frameNumber;
	u_int PTSH;
	u_int PTSL;
	u_int frameSize;
	u_int NumberOfFrame;
};
typedef struct AUDIO_RPC_ENC_ELEM_FRAME_INFO AUDIO_RPC_ENC_ELEM_FRAME_INFO;

struct AUDIO_RPC_DEC_GENERAL_INFO {
	u_int instanceID;
	u_int samplingRate;
	u_int bitRate;
	u_int bitWidth;
};
typedef struct AUDIO_RPC_DEC_GENERAL_INFO AUDIO_RPC_DEC_GENERAL_INFO;

struct AUDIO_RPC_DEC_FRAME_INFO {
	u_int instanceID;
	u_int frameSize;
	u_int NumberOfFrame;
	char EOS;
};
typedef struct AUDIO_RPC_DEC_FRAME_INFO AUDIO_RPC_DEC_FRAME_INFO;

struct AUDIO_RPC_ERROR {
	u_int instanceID;
	u_int audioError;
};
typedef struct AUDIO_RPC_ERROR AUDIO_RPC_ERROR;

struct AUDIO_RPC_MASTERSHIP {
	u_int instanceID;
	char MasterShip;
};
typedef struct AUDIO_RPC_MASTERSHIP AUDIO_RPC_MASTERSHIP;

struct AUDIO_RPC_ENC_SOURCEFILE {
	u_int instanceID;
	char fileName[20];
	u_int length;
};
typedef struct AUDIO_RPC_ENC_SOURCEFILE AUDIO_RPC_ENC_SOURCEFILE;

enum AUDIO_PP_FUNCTION {
	ENUM_AUDIO_PP_MASTER = 0,
	ENUM_AUDIO_DEEMPHASIZE = 1,
	ENUM_AUDIO_PINKNOISE = 2,
	ENUM_AUDIO_DD_VIRTUAL_SURROUND = 3,
	ENUM_AUDIO_DD_VIRTUAL_SPEAKER = 4,
	ENUM_AUDIO_DD_EX = 5,
	ENUM_AUDIO_REVERB = 6,
	ENUM_AUDIO_EQUALIZER = 7,
	ENUM_AUDIO_PROLOGIC2 = 8,
	ENUM_AUDIO_SRS = 9,
	ENUM_AUDIO_BASS_MANAGER = 10,
	ENUM_AUDIO_DTS_NEO = 11,
	ENUM_AUDIO_DOWN_MIX = 12,
	ENUM_AUDIO_MIXER = 13,
	ENUM_AUDIO_SRC = 14,
	ENUM_AUDIO_KEY_SHIFT = 15,
	ENUM_AUDIO_VOCAL_REMOVER = 16,
};
typedef enum AUDIO_PP_FUNCTION AUDIO_PP_FUNCTION;

struct AUDIO_PP_FUNCTION_MODE {
	char AUDIO_PP_FUNCTION_ENA;
	char AUDIO_DEEMPHASIZE_ENA;
	char AUDIO_PINKNOISE_ENA;
	char AUDIO_DD_VIRTUAL_SURROUND_ENA;
	char AUDIO_DD_VIRTUAL_SPEAKER_ENA;
	char AUDIO_DD_EX_ENA;
	char AUDIO_EQUALIZER_ENA;
	char AUDIO_PROLOGIC2_ENA;
	char AUDIO_SRS_ENA;
	char AUDIO_BASS_MANAGER_ENA;
	char AUDIO_DTS_NEO_ENA;
	char AUDIO_DOWN_MIX_ENA;
	char AUDIO_SRC_ENA;
	char AUDIO_VOCAL_REMOVER_ENA[4];
	char AUDIO_REVERB_ENA[4];
	char AUDIO_KEY_SHIFT_ENA[4];
};
typedef struct AUDIO_PP_FUNCTION_MODE AUDIO_PP_FUNCTION_MODE;

struct AUDIO_PP_CONFIG {
	u_int instanceID;
	AUDIO_PP_FUNCTION_MODE app_config;
};
typedef struct AUDIO_PP_CONFIG AUDIO_PP_CONFIG;

struct AUDIO_PROLOGIC2_MODE {
	char abaldisable_config_flag;
	char chanconfig_config_flag;
	char dimset_config_flag;
	char surfiltenable_config_flag;
	char modeselect_config_flag;
	char panoramaenable_config_flag;
	char fix_pcmscalefac_config_flag;
	char rsinvenable_config_flag;
	char samprateid_config_flag;
	char cwidthset_config_flag;
	u_int abaldisable;
	u_int chanconfig;
	u_int dimset;
	u_int surfiltenable;
	u_int modeselect;
	u_int panoramaenable;
	u_int fix_pcmscalefac;
	u_int rsinvenable;
	u_int samprateid;
	u_int cwidthset;
};
typedef struct AUDIO_PROLOGIC2_MODE AUDIO_PROLOGIC2_MODE;

enum ENUM_PROLOGIC2_ENA {
	ENUM_PROLOGIC2_OFF = 0,
	ENUM_PROLOGIC2_ON = 1,
};
typedef enum ENUM_PROLOGIC2_ENA ENUM_PROLOGIC2_ENA;

struct AUDIO_PROLOGIC2_CONFIG {
	u_int instanceID;
	u_char ena;
	AUDIO_PROLOGIC2_MODE app_pl2_config;
};
typedef struct AUDIO_PROLOGIC2_CONFIG AUDIO_PROLOGIC2_CONFIG;

enum ENUM_SRC_MODE {
	ENUM_SRC_POOR = 0,
	ENUM_SRC_GOOD = 1,
};
typedef enum ENUM_SRC_MODE ENUM_SRC_MODE;

struct AUDIO_SRC_CONFIG {
	u_int instanceID;
	u_int mode;
};
typedef struct AUDIO_SRC_CONFIG AUDIO_SRC_CONFIG;

struct AUDIO_RPC_MIXER_MODE {
	u_int simpleMix;
	u_int exclusiveMode;
};
typedef struct AUDIO_RPC_MIXER_MODE AUDIO_RPC_MIXER_MODE;

struct AUDIO_MIXER_CONFIG {
	u_int instanceID;
	AUDIO_RPC_MIXER_MODE app_mixer_config;
};
typedef struct AUDIO_MIXER_CONFIG AUDIO_MIXER_CONFIG;
struct AUDIO_PTS_MIXER {
	u_int pinID;
	int64_t mixer_in_change_PTS;
	u_int mixer_in_ena;
	u_int mixer_gain[8];
};
typedef struct AUDIO_PTS_MIXER AUDIO_PTS_MIXER;


struct AUDIO_RPC_PTS_MIXER_CONFIG {
	u_int instanceID;
	AUDIO_PTS_MIXER config;
};
typedef struct AUDIO_RPC_PTS_MIXER_CONFIG AUDIO_RPC_PTS_MIXER_CONFIG;

enum ENUM_EQUALIZER_GAIN {
	ENUM_EQUALIZER_GAIN_N12DB = -12,
	ENUM_EQUALIZER_GAIN_N11DB = -11,
	ENUM_EQUALIZER_GAIN_N10DB = -10,
	ENUM_EQUALIZER_GAIN_N9DB = -9,
	ENUM_EQUALIZER_GAIN_N8DB = -8,
	ENUM_EQUALIZER_GAIN_N7DB = -7,
	ENUM_EQUALIZER_GAIN_N6DB = -6,
	ENUM_EQUALIZER_GAIN_N5DB = -5,
	ENUM_EQUALIZER_GAIN_N4DB = -4,
	ENUM_EQUALIZER_GAIN_N3DB = -3,
	ENUM_EQUALIZER_GAIN_N2DB = -2,
	ENUM_EQUALIZER_GAIN_N1DB = -1,
	ENUM_EQUALIZER_GAIN_0DB = 0,
	ENUM_EQUALIZER_GAIN_1DB = 1,
	ENUM_EQUALIZER_GAIN_2DB = 2,
	ENUM_EQUALIZER_GAIN_3DB = 3,
	ENUM_EQUALIZER_GAIN_4DB = 4,
	ENUM_EQUALIZER_GAIN_5DB = 5,
	ENUM_EQUALIZER_GAIN_6DB = 6,
	ENUM_EQUALIZER_GAIN_7DB = 7,
	ENUM_EQUALIZER_GAIN_8DB = 8,
	ENUM_EQUALIZER_GAIN_9DB = 9,
	ENUM_EQUALIZER_GAIN_10DB = 10,
	ENUM_EQUALIZER_GAIN_11DB = 11,
	ENUM_EQUALIZER_GAIN_12DB = 12,
};
typedef enum ENUM_EQUALIZER_GAIN ENUM_EQUALIZER_GAIN;

enum ENUM_EQUALIZER_MODE {
	ENUM_EQUALIZER_RESERVED = 0,
	ENUM_EQUALIZER_MODE_POP = 1,
	ENUM_EQUALIZER_MODE_LIVE = 2,
	ENUM_EQUALIZER_MODE_CLUB = 3,
	ENUM_EQUALIZER_MODE_ROCK = 4,
	ENUM_EQUALIZER_MODE_BASS = 5,
	ENUM_EQUALIZER_MODE_TREBLE = 6,
	ENUM_EQUALIZER_MODE_VOCAL = 7,
	ENUM_EQUALIZER_MODE_POWERFUL = 8,
	ENUM_EQUALIZER_MODE_DANCE = 9,
	ENUM_EQUALIZER_MODE_SOFT = 10,
	ENUM_EQUALIZER_MODE_PARTY = 11,
	ENUM_EQUALIZER_MODE_CLASSICAL = 12,
};
typedef enum ENUM_EQUALIZER_MODE ENUM_EQUALIZER_MODE;

struct AUDIO_RPC_EQUALIZER_MODE {
	u_int mode;
	u_int gain[10];
};
typedef struct AUDIO_RPC_EQUALIZER_MODE AUDIO_RPC_EQUALIZER_MODE;

enum ENUM_EQUALIZER_ENA {
	ENUM_EQUALIZER_OFF = 0,
	ENUM_EQUALIZER_ON = 1,
};
typedef enum ENUM_EQUALIZER_ENA ENUM_EQUALIZER_ENA;

enum ENUM_GBL_VAR_EQUALIZER_ID {
	ENUM_EQUALIZER_PP = 0,
	ENUM_EQUALIZER_MIC = 1,
	ENUM_EQUALIZER_AUX = 2,
};
typedef enum ENUM_GBL_VAR_EQUALIZER_ID ENUM_GBL_VAR_EQUALIZER_ID;

struct AUDIO_EQUALIZER_CONFIG {
	u_int instanceID;
	int gbl_var_eq_ID;
	u_char ena;
	AUDIO_RPC_EQUALIZER_MODE app_eq_config;
};
typedef struct AUDIO_EQUALIZER_CONFIG AUDIO_EQUALIZER_CONFIG;

enum ENUM_BASS_MANAGEMENT_CUTOFFFREQ {
	ENUM_BASS_MANAGEMENT_80_HZ = 0,
	ENUM_BASS_MANAGEMENT_100_HZ = 1,
	ENUM_BASS_MANAGEMENT_120_HZ = 2,
};
typedef enum ENUM_BASS_MANAGEMENT_CUTOFFFREQ ENUM_BASS_MANAGEMENT_CUTOFFFREQ;

enum ENUM_BASS_MANAGEMENT_MODE {
	ENUM_BASS_MANAGEMENT_MODE_0 = 0,
	ENUM_BASS_MANAGEMENT_MODE_1 = 1,
	ENUM_BASS_MANAGEMENT_MODE_2 = 2,
	ENUM_BASS_MANAGEMENT_MODE_3 = 3,
	ENUM_BASS_MANAGEMENT_SIMPLIFIED = 4,
	ENUM_BASS_MANAGEMENT_CAR = 5,
	ENUM_BASS_MANAGEMENT_DIGITAL_0 = 6,
	ENUM_BASS_MANAGEMENT_DIGITAL_1 = 7,
};
typedef enum ENUM_BASS_MANAGEMENT_MODE ENUM_BASS_MANAGEMENT_MODE;

enum ENUM_BASS_MANAGEMENT_SUBWOOFER_ENA {
	ENUM_BASS_MANAGEMENT_SUBWOOFER_OFF = 0,
	ENUM_BASS_MANAGEMENT_SUBWOOFER_ON = 1,
};
typedef enum ENUM_BASS_MANAGEMENT_SUBWOOFER_ENA ENUM_BASS_MANAGEMENT_SUBWOOFER_ENA;

struct AUDIO_RPC_BASS_MANAGEMENT_MODE {
	u_int cutoffFreq;
	u_int config_mode;
	u_int subwoofer_ena;
};
typedef struct AUDIO_RPC_BASS_MANAGEMENT_MODE AUDIO_RPC_BASS_MANAGEMENT_MODE;

enum ENUM_BASS_MANAGEMENT_ENA {
	ENUM_BASS_MANAGEMENT_OFF = 0,
	ENUM_BASS_MANAGEMENT_ON = 1,
};
typedef enum ENUM_BASS_MANAGEMENT_ENA ENUM_BASS_MANAGEMENT_ENA;

struct AUDIO_BASS_MANAGEMENT_CONFIG {
	u_int instanceID;
	u_char ena;
	AUDIO_RPC_BASS_MANAGEMENT_MODE app_bassmng_config;
};
typedef struct AUDIO_BASS_MANAGEMENT_CONFIG AUDIO_BASS_MANAGEMENT_CONFIG;

struct AUDIO_RPC_DVS_MODE {
	u_int wide_mode;
};
typedef struct AUDIO_RPC_DVS_MODE AUDIO_RPC_DVS_MODE;

enum ENUM_DVS_ENA {
	ENUM_DVS_OFF = 0,
	ENUM_DVS_ON = 1,
};
typedef enum ENUM_DVS_ENA ENUM_DVS_ENA;

struct AUDIO_DVS_CONFIG {
	u_int instanceID;
	u_char ena;
	AUDIO_RPC_DVS_MODE app_dvs_config;
};
typedef struct AUDIO_DVS_CONFIG AUDIO_DVS_CONFIG;

enum ENUM_KEY_SHIFT_ENA {
	ENUM_KEY_SHIFT_OFF = 0,
	ENUM_KEY_SHIFT_ON = 1,
};
typedef enum ENUM_KEY_SHIFT_ENA ENUM_KEY_SHIFT_ENA;

enum ENUM_KEY_SHIFT_STONE {
	ENUM_KEY_SHIFT_STONE_N24 = -24,
	ENUM_KEY_SHIFT_STONE_N23 = -23,
	ENUM_KEY_SHIFT_STONE_N22 = -22,
	ENUM_KEY_SHIFT_STONE_N21 = -21,
	ENUM_KEY_SHIFT_STONE_N20 = -20,
	ENUM_KEY_SHIFT_STONE_N19 = -19,
	ENUM_KEY_SHIFT_STONE_N18 = -18,
	ENUM_KEY_SHIFT_STONE_N17 = -17,
	ENUM_KEY_SHIFT_STONE_N16 = -16,
	ENUM_KEY_SHIFT_STONE_N15 = -15,
	ENUM_KEY_SHIFT_STONE_N14 = -14,
	ENUM_KEY_SHIFT_STONE_N13 = -13,
	ENUM_KEY_SHIFT_STONE_N12 = -12,
	ENUM_KEY_SHIFT_STONE_N11 = -11,
	ENUM_KEY_SHIFT_STONE_N10 = -10,
	ENUM_KEY_SHIFT_STONE_N9 = -9,
	ENUM_KEY_SHIFT_STONE_N8 = -8,
	ENUM_KEY_SHIFT_STONE_N7 = -7,
	ENUM_KEY_SHIFT_STONE_N6 = -6,
	ENUM_KEY_SHIFT_STONE_N5 = -5,
	ENUM_KEY_SHIFT_STONE_N4 = -4,
	ENUM_KEY_SHIFT_STONE_N3 = -3,
	ENUM_KEY_SHIFT_STONE_N2 = -2,
	ENUM_KEY_SHIFT_STONE_N1 = -1,
	ENUM_KEY_SHIFT_STONE_0 = 0,
	ENUM_KEY_SHIFT_STONE_1 = 1,
	ENUM_KEY_SHIFT_STONE_2 = 2,
	ENUM_KEY_SHIFT_STONE_3 = 3,
	ENUM_KEY_SHIFT_STONE_4 = 4,
	ENUM_KEY_SHIFT_STONE_5 = 5,
	ENUM_KEY_SHIFT_STONE_6 = 6,
	ENUM_KEY_SHIFT_STONE_7 = 7,
	ENUM_KEY_SHIFT_STONE_8 = 8,
	ENUM_KEY_SHIFT_STONE_9 = 9,
	ENUM_KEY_SHIFT_STONE_10 = 10,
	ENUM_KEY_SHIFT_STONE_11 = 11,
	ENUM_KEY_SHIFT_STONE_12 = 12,
	ENUM_KEY_SHIFT_STONE_13 = 13,
	ENUM_KEY_SHIFT_STONE_14 = 14,
	ENUM_KEY_SHIFT_STONE_15 = 15,
	ENUM_KEY_SHIFT_STONE_16 = 16,
	ENUM_KEY_SHIFT_STONE_17 = 17,
	ENUM_KEY_SHIFT_STONE_18 = 18,
	ENUM_KEY_SHIFT_STONE_19 = 19,
	ENUM_KEY_SHIFT_STONE_20 = 20,
	ENUM_KEY_SHIFT_STONE_21 = 21,
	ENUM_KEY_SHIFT_STONE_22 = 22,
	ENUM_KEY_SHIFT_STONE_23 = 23,
	ENUM_KEY_SHIFT_STONE_24 = 24,
};
typedef enum ENUM_KEY_SHIFT_STONE ENUM_KEY_SHIFT_STONE;

struct AUDIO_KEY_SHIFT_CONFIG {
	u_int instanceID;
	u_char ena;
	u_int pinID;
	u_int semitone;
};
typedef struct AUDIO_KEY_SHIFT_CONFIG AUDIO_KEY_SHIFT_CONFIG;

enum ENUM_REVERB_ENA {
	ENUM_REVERB_OFF = 0,
	ENUM_REVERB_ON = 1,
};
typedef enum ENUM_REVERB_ENA ENUM_REVERB_ENA;

enum ENUM_REVERB_MODE {
	ENUM_Cathedral_1 = 0,
	ENUM_Cathedral_2 = 1,
	ENUM_Hall = 2,
	ENUM_Room = 3,
	ENUM_Basement = 4,
};
typedef enum ENUM_REVERB_MODE ENUM_REVERB_MODE;

struct AUDIO_REVERB_CONFIG {
	u_int instanceID;
	u_char ena;
	u_int pinID;
	u_int reverb_mode;
};
typedef struct AUDIO_REVERB_CONFIG AUDIO_REVERB_CONFIG;

enum ENUM_VOCAL_REMOVER_ENA {
	ENUM_VOCAL_REMOVER_OFF = 0,
	ENUM_VOCAL_REMOVER_ON = 1,
};
typedef enum ENUM_VOCAL_REMOVER_ENA ENUM_VOCAL_REMOVER_ENA;

enum ENUM_VOCAL_REMOVER_MODE {
	ENUM_VOCAL_REMOVER_ADVANCED = 0,
	ENUM_VOCAL_REMOVER_CLASSICAL = 1,
};
typedef enum ENUM_VOCAL_REMOVER_MODE ENUM_VOCAL_REMOVER_MODE;

struct AUDIO_VOCAL_REMOVER_CONFIG {
	u_int instanceID;
	u_char ena;
	u_int vr_mode;
	u_int pinID;
};
typedef struct AUDIO_VOCAL_REMOVER_CONFIG AUDIO_VOCAL_REMOVER_CONFIG;

struct AUDIO_RPC_DEC_INIT {
	u_int temp;
};
typedef struct AUDIO_RPC_DEC_INIT AUDIO_RPC_DEC_INIT;

struct AUDIO_RPC_ENC_INIT {
	u_int instanceID;
	u_int temp;
};
typedef struct AUDIO_RPC_ENC_INIT AUDIO_RPC_ENC_INIT;

struct AUDIO_RPC_ENC_SET_BITRATE {
	u_int instanceID;
	u_int bitrate;
};
typedef struct AUDIO_RPC_ENC_SET_BITRATE AUDIO_RPC_ENC_SET_BITRATE;

struct AUDIO_RPC_ENC_COMMAND {
	u_int instanceID;
	AUDIO_ENC_CFG enc_config;
};
typedef struct AUDIO_RPC_ENC_COMMAND AUDIO_RPC_ENC_COMMAND;

struct AUDIO_RPC_DEBUG_MEMORY {
	int AudioFWVersionNumber;
	char audioVersionNumber[12];
	int64_t AudioDemuxPTS;
	int64_t AudioOutPTS;
	int64_t DecoderPTS;
	int64_t FreeRun;
	int contextSwitchTimes;
	int taskNumber;
	int ISRNumber;
	int DSRNumber;
	int EPC;
	int exceptionCause;
	int RPC_Status;
	int Reserve[8];
};
typedef struct AUDIO_RPC_DEBUG_MEMORY AUDIO_RPC_DEBUG_MEMORY;

struct AUDIO_RPC_ENC_INFO {
	u_int temp;
};
typedef struct AUDIO_RPC_ENC_INFO AUDIO_RPC_ENC_INFO;

struct AUDIO_RPC_ENC_DV_MIXER {
	u_int temp;
};
typedef struct AUDIO_RPC_ENC_DV_MIXER AUDIO_RPC_ENC_DV_MIXER;

struct AUDIO_RPC_AO_INIT {
	u_int temp;
};
typedef struct AUDIO_RPC_AO_INIT AUDIO_RPC_AO_INIT;

struct AUDIO_RPC_AO_SET_EQUALIZER {
	u_int temp;
};
typedef struct AUDIO_RPC_AO_SET_EQUALIZER AUDIO_RPC_AO_SET_EQUALIZER;

struct AUDIO_AO_RPC_CONFIG_DELAY_CONTROL {
	u_int temp;
};
typedef struct AUDIO_AO_RPC_CONFIG_DELAY_CONTROL AUDIO_AO_RPC_CONFIG_DELAY_CONTROL;

struct AUDIO_RPC_AO_CONFIG_KARAOKE {
	u_int temp;
};
typedef struct AUDIO_RPC_AO_CONFIG_KARAOKE AUDIO_RPC_AO_CONFIG_KARAOKE;

struct AUDIO_RPC_AO_MIXER {
	u_int temp;
};
typedef struct AUDIO_RPC_AO_MIXER AUDIO_RPC_AO_MIXER;

struct AUDIO_RPC_PP_CFG {
	u_int temp;
};
typedef struct AUDIO_RPC_PP_CFG AUDIO_RPC_PP_CFG;

struct AUDIO_RPC_PP_MUTE {
	u_int temp;
};
typedef struct AUDIO_RPC_PP_MUTE AUDIO_RPC_PP_MUTE;

struct AUDIO_RPC_AO_DAC {
	u_int temp;
};
typedef struct AUDIO_RPC_AO_DAC AUDIO_RPC_AO_DAC;

struct AUDIO_RPC_PP_PROLOGIC {
	u_int temp;
};
typedef struct AUDIO_RPC_PP_PROLOGIC AUDIO_RPC_PP_PROLOGIC;

enum AUDIO_AGC_MODE {
	ENUM_AUDIO_AGC_OFF = 0,
	ENUM_AUDIO_AGC_NIGHT_MODE = 1,
	ENUM_AUDIO_AGC_COMFORT_LISTEN_MODE = 2,
};
typedef enum AUDIO_AGC_MODE AUDIO_AGC_MODE;

enum AUDIO_KARAOKE_MODE {
	KARAOKE_NO_VOCALS = 0,
	KARAOKE_VOCAL1 = 1,
	KARAOKE_VOCAL2 = 2,
	KARAOKE_BOTH_VOCALS = 3,
};
typedef enum AUDIO_KARAOKE_MODE AUDIO_KARAOKE_MODE;

enum AUDIO_SCMS_TYPE {
	AUDIO_SCMS_COPYRIGHT = 0,
	AUDIO_SCMS_NO_COPYRIGHT = 1,
	AUDIO_SCMS_DEFAULT = 2,
};
typedef enum AUDIO_SCMS_TYPE AUDIO_SCMS_TYPE;

enum AUDIO_CONFIG_CMD_MSG {
	AUDIO_CONFIG_CMD_SPEAKER = 0,
	AUDIO_CONFIG_CMD_AGC = 1,
	AUDIO_CONFIG_CMD_SPDIF = 2,
	AUDIO_CONFIG_CMD_VOLUME = 3,
	AUDIO_CONFIG_CMD_MUTE = 4,
	AUDIO_CONFIG_CMD_AO_MIC = 5,
	AUDIO_CONFIG_CMD_AO_AUX = 6,
	AUDIO_CONFIG_CMD_AO_ECHO_REVERB = 7,
	AUDIO_CONFIG_CMD_AO_MIC1_VOLUME = 8,
	AUDIO_CONFIG_CMD_AO_MIC2_VOLUME = 9,
	AUDIO_CONFIG_CMD_AO_DEC_VOLUME = 10,
	AUDIO_CONFIG_CMD_AO_AUX_VOLUME = 11,
	AUDIO_CONFIG_CMD_DAC_SWITCH = 12,
	AUDIO_CONFIG_CMD_DD_DUALMONO = 13,
	AUDIO_CONFIG_CMD_DD_SCALE = 14,
	AUDIO_CONFIG_CMD_DD_DOWNMIXMODE = 15,
	AUDIO_CONFIG_CMD_DD_COMP = 16,
	AUDIO_CONFIG_CMD_DD_LFE = 17,
	AUDIO_CONFIG_CMD_DD_STEREOMIX = 18,
	AUDIO_CONFIG_CMD_DIGITAL_OUT = 19,
	AUDIO_CONFIG_CMD_EXCLUSIVE = 20,
	AUDIO_CONFIG_CMD_AC3_SPDIF_RAW = 21,
	AUDIO_CONFIG_CMD_AC3_HDMI_RAW = 22,
	AUDIO_CONFIG_CMD_DTS_SPDIF_RAW = 23,
	AUDIO_CONFIG_CMD_DTS_HDMI_RAW = 24,
	AUDIO_CONFIG_CMD_MPG_SPDIF_RAW = 25,
	AUDIO_CONFIG_CMD_MPG_HDMI_RAW = 26,
	AUDIO_CONFIG_CMD_AAC_SPDIF_RAW = 27,
	AUDIO_CONFIG_CMD_AAC_HDMI_RAW = 28,
	AUDIO_CONFIG_CMD_MLP_HDMI_RAW = 29,
	AUDIO_CONFIG_CMD_DDP_HDMI_RAW = 30,
	AUDIO_CONFIG_CMD_HDMI_CHANNEL_OUT = 31,
	AUDIO_CONFIG_CMD_FORCE_CHANNEL_CODEC = 32,
	AUDIO_CONFIG_CMD_MLP_SPDIF_RAW = 33,
	AUDIO_CONFIG_CMD_DDP_SPDIF_RAW = 34,
	AUDIO_CONFIG_CMD_MAX_OUTPUT_SAMPLERATE = 35,
	AUDIO_CONFIG_CMD_USB_DEVICE_SUPPORT_SAMPLERATE = 36,
	AUDIO_CONFIG_CMD_KARAOKE_MODE = 37,
	AUDIO_CONFIG_CMD_BRAZIL_LATM_AAC = 38,
	AUDIO_CONFIG_CMD_DRC_PERCENT = 39,
	AUDIO_CONFIG_CMD_LICENSE_MODE = 40,
	AUDIO_CONFIG_CMD_AUDIO_TYPE_PRIORITY = 41,
	AUDIO_CONFIG_CMD_SPDIF_OUTPUT_SWITCH = 42,
	AUDIO_CONFIG_CMD_CUSTOMIZE_REQUEST = 43,
	AUDIO_CONFIG_CMD_DEC_PLAYBACK_RATE = 44,
	AUDIO_CONFIG_CMD_SAMPLERATE_TOLERANCE = 45,
	AUDIO_CONFIG_CMD_KARAOKE_GENDER_CHANGE = 46,
	AUDIO_CONFIG_CMD_DAC_OUTPUT_SWITCH = 47,
	AUDIO_CONFIG_CMD_SET_DEC_DELAY_RP = 48,
	AUDIO_CONFIG_CMD_MPEG2_AAC_LOW_SR_SPDIF_RAW = 49,
	AUDIO_CONFIG_CMD_MPEG2_AAC_LOW_SR_HDMI_RAW = 50,
	AUDIO_CONFIG_CMD_MPEG4_AAC_SPDIF_RAW = 51,
	AUDIO_CONFIG_CMD_MPEG4_AAC_HDMI_RAW = 52,
	AUDIO_CONFIG_CMD_HDMI_OUTPUT_SWITCH = 53,
	AUDIO_CONFIG_CMD_SPDIF_SCMS = 54,
	AUDIO_CONFIG_CMD_DAC_ANALOG_GAIN = 55,
	AUDIO_CONFIG_CMD_POWER_SAVING_SETUP = 56,
	AUDIO_CONFIG_TRUEHD_ERR_SELF_RESET_ENABLED = 57,
    AUDIO_CONFIG_CMD_AO_DEC_MUTE = 58,
    AUDIO_CONFIG_CMD_AAC_DRC_CFG = 59,
    AUDIO_CONFIG_CMD_IEC_MODE_LATENCY = 60,
    AUDIO_CONFIG_CMD_NATIVE_SAMPLING_RATE = 61,
    AUDIO_CONFIG_CMD_AO_ANALOG_AUDIO_SWITCH = 62,
    AUDIO_CONFIG_CMD_AO_HW_SPDIF_SWITCH = 63,
	AUDIO_CONFIG_CMD_BT_OUTPUT_SWITCH = 64,
	AUDIO_CONFIG_CMD_ZAPPING_CONFIG = 65,
	AUDIO_CONFIG_CMD_HDMI_LOOPBACK_I2S_IN_MIXING = 66,
	AUDIO_CONFIG_CMD_AO_FLASH_MUTE = 67,
};
typedef enum AUDIO_CONFIG_CMD_MSG AUDIO_CONFIG_CMD_MSG;

struct AUDIO_CONFIG_COMMAND {
	AUDIO_CONFIG_CMD_MSG msgID;
	u_int value[6];
};
typedef struct AUDIO_CONFIG_COMMAND AUDIO_CONFIG_COMMAND;

enum AUDISTRY_FEATURE_CMD_MSG {
	ENUM_AUDISTRY_BUNDLE = 0,
	ENUM_AUDISTRY_TWOUP = 1,
	ENUM_AUDISTRY_STEREOWRAPPER = 2,
	ENUM_AUDISTRY_HEADSPACE = 3,
	ENUM_AUDISTRY_LATENIGHT = 4,
	ENUM_AUDISTRY_VOLUME = 5,
	ENUM_AUDISTRY_RUMBLER = 6,
};
typedef enum AUDISTRY_FEATURE_CMD_MSG AUDISTRY_FEATURE_CMD_MSG;

enum AUDISTRY_TWOUP_PARAMETER {
	ENUM_TWOUP_ENABLE = 0,
	ENUM_TWOUP_DETECTOR = 1,
};
typedef enum AUDISTRY_TWOUP_PARAMETER AUDISTRY_TWOUP_PARAMETER;

enum AUDISTRY_HEADSPACE_PARAMETER {
	ENUM_HEADSPACE_ENABLE = 0,
	ENUM_HEADSPACE_MODE = 1,
};
typedef enum AUDISTRY_HEADSPACE_PARAMETER AUDISTRY_HEADSPACE_PARAMETER;

enum AUDISTRY_STEREOWRAPPER_PARAMETER {
	ENUM_STEREOWRAPPER_ENABLE = 0,
	ENUM_STEREOWRAPPER_WIDTH = 1,
};
typedef enum AUDISTRY_STEREOWRAPPER_PARAMETER AUDISTRY_STEREOWRAPPER_PARAMETER;

enum AUDISTRY_LATENIGHT_PARAMETER {
	ENUM_LATENIGHT_ENABLE = 0,
	ENUM_LATENIGHT_LEVEL = 1,
	ENUM_LATENIGHT_DEPTH = 2,
};
typedef enum AUDISTRY_LATENIGHT_PARAMETER AUDISTRY_LATENIGHT_PARAMETER;

enum AUDISTRY_VOLUME_PARAMETER {
	ENUM_VOLUME_ENABLE = 0,
	ENUM_VOLUME_GAIN = 1,
};
typedef enum AUDISTRY_VOLUME_PARAMETER AUDISTRY_VOLUME_PARAMETER;

enum AUDISTRY_RUMBLER_PARAMETER {
	ENUM_RUMBLER_ENABLE = 0,
	ENUM_RUMBLER_CUTOFF = 1,
	ENUM_RUMBLER_BOOST = 2,
	ENUM_RUMBLER_LEVEL = 3,
};
typedef enum AUDISTRY_RUMBLER_PARAMETER AUDISTRY_RUMBLER_PARAMETER;

struct AUDISTRY_CONFIG_COMMAND {
	AUDISTRY_FEATURE_CMD_MSG feature;
	u_int parameter;
	int value;
};
typedef struct AUDISTRY_CONFIG_COMMAND AUDISTRY_CONFIG_COMMAND;

enum AUDIO_AO_MIC_CONFIG {
	ENUM_AUDIO_AO_MIC_OFF = 0,
	ENUM_AUDIO_AO_MIC1_ON = 1,
	ENUM_AUDIO_AO_MIC2_ON = 2,
	ENUM_AUDIO_AO_MIC1_MIC2_ON = 3,
};
typedef enum AUDIO_AO_MIC_CONFIG AUDIO_AO_MIC_CONFIG;

enum AUDIO_AO_AUX_CONFIG {
	ENUM_AUDIO_AO_AUX_OFF = 0,
	ENUM_AUDIO_AO_AUX_ON = 1,
};
typedef enum AUDIO_AO_AUX_CONFIG AUDIO_AO_AUX_CONFIG;

enum AUDIO_AO_ECHO_REVERB_CONFIG {
	ENUM_AUDIO_AO_ECHO_REVERB_OFF = 0,
	ENUM_AUDIO_AO_ECHO_ON = 1,
	ENUM_AUDIO_AO_REVERB_ON = 2,
	ENUM_AUDIO_AO_ECHO_ON_REVERB_ON = 3,
};
typedef enum AUDIO_AO_ECHO_REVERB_CONFIG AUDIO_AO_ECHO_REVERB_CONFIG;

struct AUDIO_RPC_ECHO_MODE {
	u_int mode;
	u_int delay;
	u_int fdbk_gain;
};
typedef struct AUDIO_RPC_ECHO_MODE AUDIO_RPC_ECHO_MODE;

enum AUDIO_AO_ECHO_DELAY_MODE {
	ENUM_AUDIO_AO_ECHO_0MS = 0,
	ENUM_AUDIO_AO_ECHO_10MS = 2,
	ENUM_AUDIO_AO_ECHO_20MS = 4,
	ENUM_AUDIO_AO_ECHO_30MS = 6,
	ENUM_AUDIO_AO_ECHO_40MS = 8,
	ENUM_AUDIO_AO_ECHO_50MS = 9,
	ENUM_AUDIO_AO_ECHO_60MS = 11,
	ENUM_AUDIO_AO_ECHO_70MS = 13,
	ENUM_AUDIO_AO_ECHO_80MS = 15,
	ENUM_AUDIO_AO_ECHO_90MS = 17,
	ENUM_AUDIO_AO_ECHO_100MS = 19,
	ENUM_AUDIO_AO_ECHO_110MS = 21,
	ENUM_AUDIO_AO_ECHO_120MS = 23,
	ENUM_AUDIO_AO_ECHO_130MS = 24,
	ENUM_AUDIO_AO_ECHO_140MS = 26,
	ENUM_AUDIO_AO_ECHO_150MS = 28,
	ENUM_AUDIO_AO_ECHO_160MS = 30,
	ENUM_AUDIO_AO_ECHO_170MS = 32,
	ENUM_AUDIO_AO_ECHO_180MS = 34,
	ENUM_AUDIO_AO_ECHO_190MS = 36,
	ENUM_AUDIO_AO_ECHO_200MS = 38,
	ENUM_AUDIO_AO_ECHO_215MS = 41,
	ENUM_AUDIO_AO_ECHO_230MS = 43,
	ENUM_AUDIO_AO_ECHO_240MS = 45,
	ENUM_AUDIO_AO_ECHO_250MS = 47,
	ENUM_AUDIO_AO_ECHO_260MS = 49,
	ENUM_AUDIO_AO_ECHO_270MS = 51,
	ENUM_AUDIO_AO_ECHO_285MS = 54,
	ENUM_AUDIO_AO_ECHO_300MS = 56,
	ENUM_AUDIO_AO_ECHO_310MS = 58,
	ENUM_AUDIO_AO_ECHO_320MS = 60,
	ENUM_AUDIO_AO_ECHO_330MS = 62,
};
typedef enum AUDIO_AO_ECHO_DELAY_MODE AUDIO_AO_ECHO_DELAY_MODE;

enum AUDIO_HDMI_CODING_TYPE {
	AUDIO_HDMI_CODING_TYPE_REFER = 0,
	AUDIO_HDMI_CODING_TYPE_PCM = 1,
	AUDIO_HDMI_CODING_TYPE_AC_3 = 2,
	AUDIO_HDMI_CODING_TYPE_MPEG1 = 3,
	AUDIO_HDMI_CODING_TYPE_MP3 = 4,
	AUDIO_HDMI_CODING_TYPE_MPEG2 = 5,
	AUDIO_HDMI_CODING_TYPE_AAC = 6,
	AUDIO_HDMI_CODING_TYPE_DTS = 7,
	AUDIO_HDMI_CODING_TYPE_ATRAC = 8,
	AUDIO_HDMI_CODING_TYPE_ONE_BIT_AUDIO = 9,
	AUDIO_HDMI_CODING_TYPE_DDP = 10,
	AUDIO_HDMI_CODING_TYPE_DTSHD = 11,
	AUDIO_HDMI_CODING_TYPE_MLP = 12,
};
typedef enum AUDIO_HDMI_CODING_TYPE AUDIO_HDMI_CODING_TYPE;

enum AUDIO_HDMI_CHANNEL_COUNT {
	AUDIO_HDMI_CHANNEL_COUNT_REFER = 0,
	AUDIO_HDMI_CHANNEL_COUNT_2 = 1,
	AUDIO_HDMI_CHANNEL_COUNT_3 = 2,
	AUDIO_HDMI_CHANNEL_COUNT_4 = 3,
	AUDIO_HDMI_CHANNEL_COUNT_5 = 4,
	AUDIO_HDMI_CHANNEL_COUNT_6 = 5,
	AUDIO_HDMI_CHANNEL_COUNT_7 = 6,
	AUDIO_HDMI_CHANNEL_COUNT_8 = 7,
};
typedef enum AUDIO_HDMI_CHANNEL_COUNT AUDIO_HDMI_CHANNEL_COUNT;

enum AUDIO_HDMI_SAMPLING_FREQ {
	AUDIO_HDMI_SAMPLING_FREQ_REFER = 0,
	AUDIO_HDMI_SAMPLING_FREQ_32K = 1,
	AUDIO_HDMI_SAMPLING_FREQ_44K1 = 2,
	AUDIO_HDMI_SAMPLING_FREQ_48K = 3,
	AUDIO_HDMI_SAMPLING_FREQ_88K2 = 4,
	AUDIO_HDMI_SAMPLING_FREQ_96K = 5,
	AUDIO_HDMI_SAMPLING_FREQ_176K4 = 6,
	AUDIO_HDMI_SAMPLING_FREQ_192K = 7,
};
typedef enum AUDIO_HDMI_SAMPLING_FREQ AUDIO_HDMI_SAMPLING_FREQ;

enum AUDIO_HDMI_SAMPLE_SIZE {
	AUDIO_HDMI_SAMPLE_SIZE_REFER = 0,
	AUDIO_HDMI_SAMPLE_SIZE_16BIT = 1,
	AUDIO_HDMI_SAMPLE_SIZE_20BIT = 2,
	AUDIO_HDMI_SAMPLE_SIZE_24BIT = 3,
};
typedef enum AUDIO_HDMI_SAMPLE_SIZE AUDIO_HDMI_SAMPLE_SIZE;

struct AUDIO_HDMI_SETTING_INFO {
	AUDIO_HDMI_CODING_TYPE coding_type;
	AUDIO_HDMI_CHANNEL_COUNT channel_count;
	AUDIO_HDMI_SAMPLING_FREQ sample_freq;
	AUDIO_HDMI_SAMPLE_SIZE sample_size;
	u_int max_bit_rate_divided_by_8KHz;
	u_char lpcm_speaker_allocation[3];
	u_int lpcm_level_shift_value;
	u_char mute;
};
typedef struct AUDIO_HDMI_SETTING_INFO AUDIO_HDMI_SETTING_INFO;

enum ENUM_AUDIO_HDMI_EDID_ENABLE {
	ENUM_AUDIO_EDID_DISABLE = 0,
	ENUM_AUDIO_EDID_ENABLE = 1,
	ENUM_AUDIO_EDID_START = 2,
	ENUM_AUDIO_EDID_END = 3,
};
typedef enum ENUM_AUDIO_HDMI_EDID_ENABLE ENUM_AUDIO_HDMI_EDID_ENABLE;

struct AUDIO_HDMI_OUT_EDID_DATA {
	u_int HDMI_output_enable;
	u_int EDID_DATA_addr;
};
typedef struct AUDIO_HDMI_OUT_EDID_DATA AUDIO_HDMI_OUT_EDID_DATA;

struct AUDIO_HDMI_OUT_EDID_DATA2 {
	u_int Version;
	u_int HDMI_output_enable;
	u_int EDID_DATA_addr;
};
typedef struct AUDIO_HDMI_OUT_EDID_DATA2 AUDIO_HDMI_OUT_EDID_DATA2;

struct AUDIO_HDMI_OUT_VSDB_DATA {
	u_int HDMI_VSDB_delay;
};
typedef struct AUDIO_HDMI_OUT_VSDB_DATA AUDIO_HDMI_OUT_VSDB_DATA;

enum HDMI_VIDEO_TYPE {
	ENUM_HDMI_VIDEO_TYPE_SD = 0,
	ENUM_HDMI_VIDEO_TYPE_HD = 1,
};
typedef enum HDMI_VIDEO_TYPE HDMI_VIDEO_TYPE;

struct HDMI_INFO {
	u_int video_type;
};
typedef struct HDMI_INFO HDMI_INFO;

enum AUDIO_MIC_DELAY_SLOT {
	ENUM_MIC_DELAY_SLOT_LEVEL_0 = 0,
	ENUM_MIC_DELAY_SLOT_LEVEL_1 = 2,
	ENUM_MIC_DELAY_SLOT_LEVEL_2 = 4,
	ENUM_MIC_DELAY_SLOT_LEVEL_3 = 6,
	ENUM_MIC_DELAY_SLOT_LEVEL_4 = 8,
	ENUM_MIC_DELAY_SLOT_LEVEL_5 = 10,
	ENUM_MIC_DELAY_SLOT_LEVEL_6 = 12,
	ENUM_MIC_DELAY_SLOT_LEVEL_7 = 14,
	ENUM_MIC_DELAY_SLOT_LEVEL_8 = 16,
	ENUM_MIC_DELAY_SLOT_LEVEL_9 = 18,
	ENUM_MIC_DELAY_SLOT_LEVEL_10 = 20,
	ENUM_MIC_DELAY_SLOT_LEVEL_11 = 22,
	ENUM_MIC_DELAY_SLOT_LEVEL_12 = 24,
	ENUM_MIC_DELAY_SLOT_LEVEL_13 = 26,
	ENUM_MIC_DELAY_SLOT_LEVEL_14 = 28,
	ENUM_MIC_DELAY_SLOT_LEVEL_15 = 30,
	ENUM_MIC_DELAY_SLOT_LEVEL_16 = 32,
	ENUM_MIC_DELAY_SLOT_LEVEL_17 = 34,
	ENUM_MIC_DELAY_SLOT_LEVEL_18 = 36,
	ENUM_MIC_DELAY_SLOT_LEVEL_19 = 38,
	ENUM_MIC_DELAY_SLOT_LEVEL_20 = 40,
};
typedef enum AUDIO_MIC_DELAY_SLOT AUDIO_MIC_DELAY_SLOT;

enum AUDIO_VOLUME_LEVEL {
	ENUM_AUDIO_VOLUME_LEVEL_0_DB = 0,
	ENUM_AUDIO_VOLUME_LEVEL_N1_DB = 1,
	ENUM_AUDIO_VOLUME_LEVEL_N2_DB = 2,
	ENUM_AUDIO_VOLUME_LEVEL_N3_DB = 3,
	ENUM_AUDIO_VOLUME_LEVEL_N4_DB = 4,
	ENUM_AUDIO_VOLUME_LEVEL_N5_DB = 5,
	ENUM_AUDIO_VOLUME_LEVEL_N6_DB = 6,
	ENUM_AUDIO_VOLUME_LEVEL_N7_DB = 7,
	ENUM_AUDIO_VOLUME_LEVEL_N8_DB = 8,
	ENUM_AUDIO_VOLUME_LEVEL_N9_DB = 9,
	ENUM_AUDIO_VOLUME_LEVEL_N10_DB = 10,
	ENUM_AUDIO_VOLUME_LEVEL_N11_DB = 11,
	ENUM_AUDIO_VOLUME_LEVEL_N12_DB = 12,
	ENUM_AUDIO_VOLUME_LEVEL_N13_DB = 13,
	ENUM_AUDIO_VOLUME_LEVEL_N14_DB = 14,
	ENUM_AUDIO_VOLUME_LEVEL_N15_DB = 15,
	ENUM_AUDIO_VOLUME_LEVEL_N16_DB = 16,
	ENUM_AUDIO_VOLUME_LEVEL_N17_DB = 17,
	ENUM_AUDIO_VOLUME_LEVEL_N18_DB = 18,
	ENUM_AUDIO_VOLUME_LEVEL_N19_DB = 19,
	ENUM_AUDIO_VOLUME_LEVEL_N20_DB = 20,
	ENUM_AUDIO_VOLUME_LEVEL_N21_DB = 21,
	ENUM_AUDIO_VOLUME_LEVEL_N22_DB = 22,
	ENUM_AUDIO_VOLUME_LEVEL_N23_DB = 23,
	ENUM_AUDIO_VOLUME_LEVEL_N24_DB = 24,
	ENUM_AUDIO_VOLUME_LEVEL_N25_DB = 25,
	ENUM_AUDIO_VOLUME_LEVEL_N26_DB = 26,
	ENUM_AUDIO_VOLUME_LEVEL_N30_DB = 27,
	ENUM_AUDIO_VOLUME_LEVEL_N36_DB = 28,
	ENUM_AUDIO_VOLUME_LEVEL_N44_DB = 29,
	ENUM_AUDIO_VOLUME_LEVEL_N52_DB = 30,
	ENUM_AUDIO_VOLUME_LEVEL_MUTE = 31,
};
typedef enum AUDIO_VOLUME_LEVEL AUDIO_VOLUME_LEVEL;

enum AUDIO_DAC_ANALOG_GAIN_LEVEL {
	ENUM_AUDIO_DAC_GAIN_LEVEL_0 = 0,
	ENUM_AUDIO_DAC_GAIN_LEVEL_1 = 1,
	ENUM_AUDIO_DAC_GAIN_LEVEL_2 = 2,
	ENUM_AUDIO_DAC_GAIN_LEVEL_3 = 3,
	ENUM_AUDIO_DAC_GAIN_LEVEL_4 = 4,
	ENUM_AUDIO_DAC_GAIN_LEVEL_5 = 5,
	ENUM_AUDIO_DAC_GAIN_LEVEL_6 = 6,
	ENUM_AUDIO_DAC_GAIN_LEVEL_7 = 7,
	ENUM_AUDIO_DAC_GAIN_LEVEL_8 = 8,
	ENUM_AUDIO_DAC_GAIN_LEVEL_9 = 9,
	ENUM_AUDIO_DAC_GAIN_LEVEL_10 = 10,
	ENUM_AUDIO_DAC_GAIN_LEVEL_11 = 11,
	ENUM_AUDIO_DAC_GAIN_LEVEL_12 = 12,
	ENUM_AUDIO_DAC_GAIN_LEVEL_13 = 13,
	ENUM_AUDIO_DAC_GAIN_LEVEL_14 = 14,
	ENUM_AUDIO_DAC_GAIN_LEVEL_15 = 15,
	ENUM_AUDIO_DAC_GAIN_LEVEL_16 = 16,
	ENUM_AUDIO_DAC_GAIN_LEVEL_17 = 17,
	ENUM_AUDIO_DAC_GAIN_LEVEL_18 = 18,
	ENUM_AUDIO_DAC_GAIN_LEVEL_19 = 19,
	ENUM_AUDIO_DAC_GAIN_LEVEL_20 = 20,
	ENUM_AUDIO_DAC_GAIN_LEVEL_21 = 21,
	ENUM_AUDIO_DAC_GAIN_LEVEL_22 = 22,
	ENUM_AUDIO_DAC_GAIN_LEVEL_23 = 23,
	ENUM_AUDIO_DAC_GAIN_LEVEL_24 = 24,
	ENUM_AUDIO_DAC_GAIN_LEVEL_25 = 25,
	ENUM_AUDIO_DAC_GAIN_LEVEL_26 = 26,
	ENUM_AUDIO_DAC_GAIN_LEVEL_27 = 27,
	ENUM_AUDIO_DAC_GAIN_LEVEL_28 = 28,
	ENUM_AUDIO_DAC_GAIN_LEVEL_29 = 29,
	ENUM_AUDIO_DAC_GAIN_LEVEL_30 = 30,
	ENUM_AUDIO_DAC_GAIN_LEVEL_31 = 31,
	ENUM_AUDIO_DAC_GAIN_LEVEL_32 = 32,
	ENUM_AUDIO_DAC_GAIN_LEVEL_33 = 33,
	ENUM_AUDIO_DAC_GAIN_LEVEL_34 = 34,
	ENUM_AUDIO_DAC_GAIN_LEVEL_35 = 35,
	ENUM_AUDIO_DAC_GAIN_LEVEL_36 = 36,
	ENUM_AUDIO_DAC_GAIN_LEVEL_37 = 37,
	ENUM_AUDIO_DAC_GAIN_LEVEL_38 = 38,
	ENUM_AUDIO_DAC_GAIN_LEVEL_39 = 39,
	ENUM_AUDIO_DAC_GAIN_LEVEL_40 = 40,
	ENUM_AUDIO_DAC_GAIN_LEVEL_41 = 41,
	ENUM_AUDIO_DAC_GAIN_LEVEL_42 = 42,
	ENUM_AUDIO_DAC_GAIN_LEVEL_43 = 43,
	ENUM_AUDIO_DAC_GAIN_LEVEL_44 = 44,
	ENUM_AUDIO_DAC_GAIN_LEVEL_45 = 45,
	ENUM_AUDIO_DAC_GAIN_LEVEL_46 = 46,
	ENUM_AUDIO_DAC_GAIN_LEVEL_47 = 47,
	ENUM_AUDIO_DAC_GAIN_LEVEL_48 = 48,
	ENUM_AUDIO_DAC_GAIN_LEVEL_49 = 49,
	ENUM_AUDIO_DAC_GAIN_LEVEL_50 = 50,
	ENUM_AUDIO_DAC_GAIN_LEVEL_51 = 51,
	ENUM_AUDIO_DAC_GAIN_LEVEL_52 = 52,
	ENUM_AUDIO_DAC_GAIN_LEVEL_53 = 53,
	ENUM_AUDIO_DAC_GAIN_LEVEL_54 = 54,
	ENUM_AUDIO_DAC_GAIN_LEVEL_55 = 55,
	ENUM_AUDIO_DAC_GAIN_LEVEL_56 = 56,
	ENUM_AUDIO_DAC_GAIN_LEVEL_57 = 57,
	ENUM_AUDIO_DAC_GAIN_LEVEL_58 = 58,
	ENUM_AUDIO_DAC_GAIN_LEVEL_59 = 59,
	ENUM_AUDIO_DAC_GAIN_LEVEL_60 = 60,
	ENUM_AUDIO_DAC_GAIN_LEVEL_61 = 61,
	ENUM_AUDIO_DAC_GAIN_LEVEL_62 = 62,
};
typedef enum AUDIO_DAC_ANALOG_GAIN_LEVEL AUDIO_DAC_ANALOG_GAIN_LEVEL;

enum AUDIO_VOLUME_CTRL {
	ENUM_AUDIO_VOLUME_CTRL_0_DB = 0,
	ENUM_AUDIO_VOLUME_CTRL_N1_DB = 0 + 1,
	ENUM_AUDIO_VOLUME_CTRL_N2_DB = 0 + 2,
	ENUM_AUDIO_VOLUME_CTRL_N3_DB = 0 + 3,
	ENUM_AUDIO_VOLUME_CTRL_N4_DB = 0 + 4,
	ENUM_AUDIO_VOLUME_CTRL_N5_DB = 0 + 5,
	ENUM_AUDIO_VOLUME_CTRL_N6_DB = 0 + 6,
	ENUM_AUDIO_VOLUME_CTRL_N7_DB = 0 + 7,
	ENUM_AUDIO_VOLUME_CTRL_N8_DB = 0 + 8,
	ENUM_AUDIO_VOLUME_CTRL_N9_DB = 0 + 9,
	ENUM_AUDIO_VOLUME_CTRL_N10_DB = 0 + 10,
	ENUM_AUDIO_VOLUME_CTRL_N11_DB = 0 + 11,
	ENUM_AUDIO_VOLUME_CTRL_N12_DB = 0 + 12,
	ENUM_AUDIO_VOLUME_CTRL_N13_DB = 0 + 13,
	ENUM_AUDIO_VOLUME_CTRL_N14_DB = 0 + 14,
	ENUM_AUDIO_VOLUME_CTRL_N15_DB = 0 + 15,
	ENUM_AUDIO_VOLUME_CTRL_N16_DB = 0 + 16,
	ENUM_AUDIO_VOLUME_CTRL_P1_DB = 256,
	ENUM_AUDIO_VOLUME_CTRL_P2_DB = 256 + 1,
	ENUM_AUDIO_VOLUME_CTRL_P3_DB = 256 + 2,
	ENUM_AUDIO_VOLUME_CTRL_P4_DB = 256 + 3,
	ENUM_AUDIO_VOLUME_CTRL_P5_DB = 256 + 4,
	ENUM_AUDIO_VOLUME_CTRL_P6_DB = 256 + 5,
	ENUM_AUDIO_VOLUME_CTRL_P7_DB = 256 + 6,
	ENUM_AUDIO_VOLUME_CTRL_P8_DB = 256 + 7,
	ENUM_AUDIO_VOLUME_CTRL_P9_DB = 256 + 8,
	ENUM_AUDIO_VOLUME_CTRL_P10_DB = 256 + 9,
	ENUM_AUDIO_VOLUME_CTRL_P11_DB = 256 + 10,
	ENUM_AUDIO_VOLUME_CTRL_P12_DB = 256 + 11,
	ENUM_AUDIO_VOLUME_CTRL_P13_DB = 256 + 12,
	ENUM_AUDIO_VOLUME_CTRL_P14_DB = 256 + 13,
	ENUM_AUDIO_VOLUME_CTRL_P15_DB = 256 + 14,
	ENUM_AUDIO_VOLUME_CTRL_P16_DB = 256 + 15,
};
typedef enum AUDIO_VOLUME_CTRL AUDIO_VOLUME_CTRL;

enum AUDIO_LICENSE_CONTROL_MASK {
	BONDING_OPTION_PA = 0,
	BONDING_OPTION_DA = 15,
};
typedef enum AUDIO_LICENSE_CONTROL_MASK AUDIO_LICENSE_CONTROL_MASK;

struct AUDIO_RPC_DEC_FORMAT_INFO {
	enum AUDIO_DEC_TYPE type;
	u_short nChannels;
	u_short wBitsPerSample;
	u_int nSamplesPerSec;
	u_int nAvgBytesPerSec;
	u_int reserved[4];
};
typedef struct AUDIO_RPC_DEC_FORMAT_INFO AUDIO_RPC_DEC_FORMAT_INFO;

struct AUDIO_LICENSE_STATUS_CONFIG {
	u_int HighWord;
	u_int LowWord;
};
typedef struct AUDIO_LICENSE_STATUS_CONFIG AUDIO_LICENSE_STATUS_CONFIG;

enum AudioCodecControlBit {
	AUDIO_UNKNOWN_BIT = 0,
	AUDIO_MPEG_DECODER_BIT = 1,
	AUDIO_AC3_DECODER_BIT = 2,
	AUDIO_LPCM_DECODER_BIT = 3,
	AUDIO_DTS_DECODER_BIT = 4,
	AUDIO_WMA_DECODER_BIT = 5,
	AUDIO_AAC_DECODER_BIT = 6,
	AUDIO_VORBIS_DECODER_BIT = 7,
	AUDIO_DV_DECODER_BIT = 8,
	AUDIO_MLP_DECODER_BIT = 9,
	AUDIO_DDP_DECODER_BIT = 10,
	AUDIO_DTS_HD_DECODER_BIT = 11,
	AUDIO_WMA_PRO_DECODER_BIT = 12,
	AUDIO_MP4AAC_DECODER_BIT = 13,
	AUDIO_MP3_PRO_DECODER_BIT = 14,
	AUDIO_MP4HEAAC_DECODER_BIT = 15,
	AUDIO_RAW_AAC_DECODER_BIT = 16,
	AUDIO_RA1_DECODER_BIT = 17,
	AUDIO_RA2_DECODER_BIT = 18,
	AUDIO_ATRAC3_DECODER_BIT = 19,
	AUDIO_COOK_DECODER_BIT = 20,
	AUDIO_LSD_DECODER_BIT = 21,
	AUDIO_ADPCM_DECODER_BIT = 22,
	AUDIO_FLAC_DECODER_BIT = 23,
	AUDIO_ULAW_DECODER_BIT = 24,
	AUDIO_ALAW_DECODER_BIT = 25,
	AUDIO_ALAC_DECODER_BIT = 26,
	AUDIO_DTS_HIGH_RESOLUTION_DECODER_BIT = 27,
	AUDIO_DTS_LBR_DECODER_BIT = 28,
	AUDIO_DTS_MASTER_AUDIO_DECODER_BIT = 29,
	AUDIO_AMR_DECODER_BIT = 30,
	AUDIO_MIDI_DECODER_BIT = 31,
	AUDIO_APE_DECODER_BIT = 32,
	AUDIO_AVS_DECODER_BIT = 33,
	AUDIO_NELLYMOSER_DECODER_BIT = 34,
	AUDIO_WMA_LOSSLESS_DECODER_BIT = 35,
	AUDIO_ILBC_DECODER_BIT = 38,
	AUDIO_SILK_DECODER_BIT = 39,
	AUDIO_AMRWB_DECODER_BIT = 40,
	AUDIO_G729_DECODER_BIT = 41,
	AUDIO_DOLBY_MS12_BIT = 45,
	AUDIO_AC3_MULTI_CH_ENCODER_BIT = 56,
	AUDIO_DTS_MULTI_CH_ENCODER_BIT = 57,
	AUDIO_ADPCM_ENCODER_BIT = 58,
	AUDIO_LPCM_ENCODER_BIT = 59,
	AUDIO_AAC_ENCODER_BIT = 60,
	AUDIO_MP2_ENCODER_BIT = 61,
	AUDIO_MP3_ENCODER_BIT = 62,
	AUDIO_AC3_ENCODER_BIT = 63,
};
typedef enum AudioCodecControlBit AudioCodecControlBit;

enum AUDIO_ENUM_PRIVAETINFO_TO_SYS {
	ENUM_PRIVATEINFO_AUDIO_HDMV_UNCERTAIN_TYPE = 0,
	ENUM_PRIVATEINFO_AUDIO_PCM_FORMAT_TYPE = 1,
	ENUM_PRIVATEINFO_AUDIO_OPEN_FILE = 2,
	ENUM_PRIVATEINFO_AUDIO_CLOSE_FILE = 3,
	ENUM_PRIVATEINFO_AUDIO_WRITE_FILE = 4,
	ENUM_PRIVATEINFO_AUDIO_DECODRER_MASSAGE = 5,
	ENUM_PRIVATEINFO_AUDIO_AO_MASSAGE = 6,
	ENUM_PRIVATEINFO_AUDIO_AI_AUDIO_PROCESSING = 7,
	ENUM_PRIVATEINFO_AUDIO_ARMFW_CREATE = 8,
	ENUM_PRIVATEINFO_AUDIO_ARMFW_DESTROY = 9,
	ENUM_PRIVATEINFO_AUDIO_ARMFW_FLUSH = 10,
	ENUM_PRIVATEINFO_AUDIO_ARMFW_INITRINGBUFFER_HEADER = 11,
	ENUM_PRIVATEINFO_AUDIO_ARMFW_PAUSE = 12,
	ENUM_PRIVATEINFO_AUDIO_ARMFW_RUN = 13,
	ENUM_PRIVATEINFO_AUDIO_ARMFW_STOP = 14,
	ENUM_PRIVATEINFO_AUDIO_ARMFW_ENDOFSTREAM = 15,
	ENUM_PRIVATEINFO_AUDIO_ARMFW_SET_DUMMY_STATE = 16,
	ENUM_PRIVATEINFO_AUDIO_ARMFW_DEC_CREATED_BY_5280FW = 17,
	ENUM_PRIVATEINFO_AUDIO_ARMFW_SET_OUT_PP_PIN = 18,
	ENUM_PRIVATEINFO_AUDIO_ARMFW_AO_PCM_OUT = 19,
	ENUM_PRIVATEINFO_AUDIO_ARMFW_GET_FMTINFO = 20,
};
typedef enum AUDIO_ENUM_PRIVAETINFO_TO_SYS AUDIO_ENUM_PRIVAETINFO_TO_SYS;

enum AUDIO_AO_MASSAGE_TO_SYS {
	ENUM_AO_EVENT_GET_BACK_MASTERSHIP = 1,
};
typedef enum AUDIO_AO_MASSAGE_TO_SYS AUDIO_AO_MASSAGE_TO_SYS;

struct AUDIO_RPC_PRIVATEINFO_TO_SYS {
	u_int instanceID;
	enum AUDIO_ENUM_PRIVAETINFO_TO_SYS type;
	u_int privateInfo[16];
};
typedef struct AUDIO_RPC_PRIVATEINFO_TO_SYS AUDIO_RPC_PRIVATEINFO_TO_SYS;

enum AUDIO_ENUM_PRIVAETINFO {
	ENUM_PRIVATEINFO_AUDIO_FORMAT_PARSER_CAPABILITY = 0,
	ENUM_PRIVATEINFO_AUDIO_DECODER_CAPABILITY = 1,
	ENUM_PRIVATEINFO_AUDIO_CONFIG_CMD_BS_INFO = 2,
	ENUM_PRIVATEINFO_AUDIO_CHECK_LPCM_ENDIANESS = 3,
	ENUM_PRIVATEINFO_AUDIO_CONFIG_CMD_AO_DELAY_INFO = 4,
	ENUM_PRIVATEINFO_AUDIO_AO_CHANNEL_VOLUME_LEVEL = 5,
	ENUM_PRIVATEINFO_AUDIO_GET_FLASH_PIN = 6,
	ENUM_PRIVATEINFO_AUDIO_RELEASE_FLASH_PIN = 7,
	ENUM_PRIVATEINFO_AUDIO_GET_MUTE_N_VOLUME = 8,
	ENUM_PRIVATEINFO_AUDIO_AO_MONITOR_FULLNESS = 9,
	ENUM_PRIVATEINFO_AUDIO_CONTROL_FLASH_VOLUME = 10,
	ENUM_PRIVATEINFO_AUDIO_CONTROL_DAC_SWITCH = 11,
	ENUM_PRIVATEINFO_AUDIO_PREPROCESS_CONFIG = 12,
	ENUM_PRIVATEINFO_AUDIO_CHECK_SECURITY_ID = 13,
	ENUM_PRIVATEINFO_AUDIO_LOW_DELAY_PARAMETERS = 14,
	ENUM_PRIVATEINFO_AUDIO_SET_NETWORK_JITTER = 15,
	ENUM_PRIVATEINFO_AUDIO_GET_QUEUE_DATA_SIZE = 16,
	ENUM_PRIVATEINFO_AUDIO_GET_SHARE_MEMORY_FROM_ALSA = 17,
	ENUM_PRIVATEINFO_AUDIO_AI_CONNECT_ALSA = 18,
	ENUM_PRIVATEINFO_AUDIO_SET_PCM_FORMAT = 19,
	ENUM_PRIVATEINFO_AUDIO_DO_SELF_DESTROY_FLOW = 20,
	ENUM_PRIVATEINFO_AUDIO_GET_SAMPLING_RATE = 21,
	ENUM_PRIVATEINFO_AUDIO_SLAVE_TIMEOUT_THRESHOLD = 22,
	ENUM_PRIVATEINFO_AUDIO_GET_GLOBAL_AO_INSTANCEID = 23,
	ENUM_PRIVATEINFO_AUDIO_SET_CEC_PARAMETERS = 24,
	ENUM_PRIVATEINFO_AUDIO_INIT_DBG_DUMP_MEM = 25,
	ENUM_PRIVATEINFO_AUDIO_AI_GET_AO_FLASH_PIN = 26,
	ENUM_PRIVATEINFO_AUDIO_AI_SET_AO_FLASH_PIN = 27,
	ENUM_PRIVATEINFO_AUDIO_GET_PP_FREE_PINID = 28,
	ENUM_PRIVATEINFO_AUDIO_HDMI_RX_CONNECT_TO_BT = 29,
	ENUM_PRIVATEINFO_AUDIO_GET_BS_ERR_RATE = 30,
	ENUM_PRIVATEINFO_AUDIO_SET_RESUME_IR_KEYS = 31,
	ENUM_PRIVATEINFO_SET_GSTREAMER_PTS_ACC_MODE = 32,
	ENUM_PRIVATEINFO_AUDIO_GET_BONDING_TYPE = 33,
	ENUM_PRIVATEINFO_AUDIO_SHARE_MEMORY_FOR_PORTING_FIRMWARE = 34,
	ENUM_PRIVATEINFO_AUDIO_SET_DVDPLAYER_AO_VERSION = 35,
	ENUM_PRIVATEINFO_AUDIO_MS_PP_CERT = 36,
	ENUM_PRIVATEINFO_AUDIO_TRIGGER_EVENT = 37,
	ENUM_PRIVATEINFO_AUDIO_AI_NON_PCM_IN = 38,
	ENUM_PRIVATEINFO_OMX_AUDIO_VERSION = 39,
        ENUM_PRIVATEINFO_AUDIO_AI_PAD_IN = 40,
        ENUM_PRIVATEINFO_AUDIO_MS_MAJOR_DECODER_PIN = 41,
        ENUM_PRIVATEINFO_AUDIO_PROVIDE_RAWOUT_LATENCY = 42,
	ENUM_PRIVATEINFO_AUDIO_MS_MIXER_IGNORE_PIN = 43,
	ENUM_PRIVATEINFO_AUDIO_MS_CERTIFICATION_PLATFORM = 44,
	ENUM_PRIVATEINFO_AUDIO_MS_MIXER_PIN_NEW_SEG = 45,
	ENUM_PRIVATEINFO_AUDIO_MS_DEC_DROP_BY_PTS = 46,
	ENUM_PRIVATEINFO_AUDIO_MS_DEC_INIT_PTS_OFFSET = 47,
	ENUM_PRIVATEINFO_AUDIO_MS_PP_OUTPUT_TYPE = 48,
	ENUM_PRIVATEINFO_AUDIO_DTS_ENCODER_CONFIG = 49,
	ENUM_PRIVATEINFO_AUDIO_GET_FW_VERSION = 50,
	ENUM_PRIVATEINFO_AUDIO_DTS_M8_IN_CONFIG = 51,
        ENUM_PRIVATEINFO_AUDIO_DTS_M8_LA_NUM = 52,
        ENUM_PRIVATEINFO_AUDIO_DTS_M8_SET_OUTPUT_FORMAT = 53,
	ENUM_PRIVATEINFO_AUDIO_SET_DRC_CFG = 54,
	ENUM_PRIVATEINFO_AUDIO_DTS_M8_LA_ERROR_MSG = 55,
	ENUM_PRIVATEINFO_GET_B_VALUE = 56,
	ENUM_PRIVATEINFO_AUDIO_ENTER_SUSPEND = 57,
	ENUM_PRIVATEINFO_AUDIO_MPEGH_IN_CONFIG = 58,
	ENUM_PRIVATEINFO_AUDIO_SET_LOW_WATERLEVEL = 59,
	ENUM_PRIVATEINFO_AUDIO_DECODER_ENTER_DUMMY_STATE = 60,
	ENUM_PRIVATEINFO_AUDIO_DECODER_NEED_CREATE_ARM_DEC = 61,
	ENUM_PRIVATEINFO_NOTIFY_FD_INFO_RECEIVED = 62,
};
typedef enum AUDIO_ENUM_PRIVAETINFO AUDIO_ENUM_PRIVAETINFO;

enum AUDIO_DTS_OUTPUT_FORMAT {
	ENUM_AUDIO_DTS_PCM_ORIGINAL = 0,
	ENUM_AUDIO_DTS_PCM_BE_Q24 = 0 + 1,
	ENUM_AUDIO_DTS_PCM_LE_Q24 = 0 + 2,
};
typedef enum AUDIO_DTS_OUTPUT_FORMAT AUDIO_DTS_OUTPUT_FORMAT;

struct AUDIO_RPC_PRIVATEINFO_PARAMETERS {
	u_int instanceID;
	enum AUDIO_ENUM_PRIVAETINFO type;
	u_int privateInfo[16];
};
typedef struct AUDIO_RPC_PRIVATEINFO_PARAMETERS AUDIO_RPC_PRIVATEINFO_PARAMETERS;

enum AUDIO_ENUM_MS_CERT_PLATFORM {
	ENUM_PRIVATEINFO_MS_CERT_PLATFORM_ANDROID = 0,
	ENUM_PRIVATEINFO_MS_CERT_PLATFORM_LINUX = 1,
};
typedef enum AUDIO_ENUM_MS_CERT_PLATFORM AUDIO_ENUM_MS_CERT_PLATFORM;

enum AUDIO_ENUM_AI_LOOPBACK_DEV {
       ENUM_RPC_AI_LOOPBACK_HDMITX = 0,
       ENUM_RPC_AI_LOOPBACK_DAC = 0 + 1,
       ENUM_RPC_AI_LOOPBACK_FROM_AO_I2S = 0 + 2,
       ENUM_RPC_AI_LOOPBACK_TOTAL_NUM = 0 + 3,
};
typedef enum AUDIO_ENUM_AI_LOOPBACK_DEV AUDIO_ENUM_AI_LOOPBACK_DEV;

enum AUDIO_ENUM_AIO_PRIVAETINFO {
	ENUM_PRIVATEINFO_AIO_AO_INTERFACE_SWITCH_CONTROL = 0,
	ENUM_PRIVATEINFO_AIO_AI_INTERFACE_SWITCH_CONTROL = 1,
	ENUM_PRIVATEINFO_AIO_ALSA_DESTROY_AI_FLOW = 2,
	ENUM_PRIVATEINFO_AIO_AI_NONPCM_WRITE_BACK_BS = 3,
        ENUM_PRIVATEINFO_AIO_HDMIRX_LATENCY_MEM = 4,
        ENUM_PRIVATEINFO_AIO_AI_LOOPBACK_AO = 5,
        ENUM_PRIVATEINFO_AIO_AI_LOOPBACK_HDMITX = 6,
        ENUM_PRIVATEINFO_AIO_AI_LOOPBACK_DAC = 7,
	ENUM_PRIVATEINFO_AIO_AI_ADC_ANALOG = 8,
	ENUM_PRIVATEINFO_AIO_AI_MULTIPLE_ADC = 9,
	ENUM_PRIVATEINFO_AIO_AI_ADC_AMIC = 9 + 1,
        ENUM_PRIVATEINFO_AIO_KERNEL_RPC = 9 + 2,
	ENUM_PRIVATEINFO_AIO_SET_SE_CLK = 9 + 3,
	ENUM_PRIVATEINFO_AIO_AI_PRIVATEINFO = 9 + 4,
        ENUM_PRIVATEINFO_AIO_DELIVER_SCPU_FW_PID = 9 + 5,
        ENUM_PRIVATEINFO_AIO_GET_D_VISION_CAPABILITY = 9 + 6,
        ENUM_PRIVATEINFO_AIO_TOTAL_NUM = 9 + 7,
};
typedef enum AUDIO_ENUM_AIO_PRIVAETINFO AUDIO_ENUM_AIO_PRIVAETINFO;

enum AUDIO_ENUM_AI_ADC_SWAP {
	ENUM_AI_ADC_SWAP_LR = 0,
	ENUM_AI_ADC_SWAP_RL = 0 + 1,
	ENUM_AI_ADC_SWAP_LL = 0 + 2,
	ENUM_AI_ADC_SWAP_RR = 0 + 3,
};
typedef enum AUDIO_ENUM_AI_ADC_SWAP AUDIO_ENUM_AI_ADC_SWAP;

enum AIN_AUDIO_PROCESSING {
       ENUM_AIN_AUDIO_PROCESSING_NONE = 0,
       ENUM_AIN_AUDIO_PROCESSING_NO_INTERNAL_RING_BUF = 0 + 1,
       ENUM_AIN_AUDIO_PROCESSING = 0 + 2,
       ENUM_AIN_AUDIO_PROCESSING_DMIC_AND_LOOPBACK = 0 + 3,
       ENUM_AIN_AUDIO_PROCESSING_DMIC = 0 + 4,
};
typedef enum AIN_AUDIO_PROCESSING AIN_AUDIO_PROCESSING;

enum AUDIO_ENUM_AI_PRIVATE_TYPE {
	ENUM_AI_PRIVATE_ADC_SWAP = 12,
        ENUM_AI_PRIVATE_ADC_SET_VOLUME = 12 + 1,
        ENUM_AI_PRIVATE_AUDIO_PROCESSING = 12 + 2,
	ENUM_AI_PRIVATE_VOLUME_CTRL = 12 + 3,
        ENUM_AI_PRIVATE_WRITE_BACK_SYSTEM_EXT = 12 + 4,
        ENUM_AI_PRIVATE_HDMIRX_AUDIO_INFO_FRAME = 12 + 5,
	ENUM_AI_PRIVATE_HACK_1KHZ_WITHOUT_HW = 12 + 6,
	ENUM_AI_PRIVATE_SPDIF_OPTICAL = 12 + 7,
	ENUM_AI_PRIVATE_HDMI_RX = 12 + 8,
	ENUM_AI_PRIVATE_SPDIF_COAXIAL = 12 + 9,
	ENUM_AI_PRIVATE_SPDIF_ARC = 12 + 10,
	ENUM_AI_PRIVATE_ADC_DMIC = 12 + 11,
	ENUM_AI_PRIVATE_TDM = 12 + 12,
	ENUM_AI_PRIVATE_ADC_DMIC_PACK = 12 + 13,
	ENUM_AI_PRIVATE_SELF_FLUSH = 12 + 14,
        ENUM_AI_PRIVATE_CONFIG_PIN_MUX = 12 + 15,
        ENUM_AI_PRIVATE_DUMP_NONPCM = 12 + 16,
        ENUM_AI_PRIVATE_DUAL_DMIC_AND_LOOPBACK = 12 + 17,
        ENUM_AI_PRIVATE_DUAL_DMIC_AND_LOOPBACK_FW = 12 + 18,
        ENUM_AI_PRIVATE_SPEECH_RECOGNITION_FROM_DMIC = 12 + 19,
        ENUM_AI_PRIVATE_SPEECH_RECOGNITION_FROM_DMIC_FW = 12 + 20,
	ENUM_AI_PRIVATE_TOTAL_NUM = 12 + 21,
};
typedef enum AUDIO_ENUM_AI_PRIVATE_TYPE AUDIO_ENUM_AI_PRIVATE_TYPE;

struct AUDIO_RPC_AIO_PRIVATEINFO_PARAMETERS {
	u_int instanceID;
	enum AUDIO_ENUM_AIO_PRIVAETINFO type;
	u_int privateInfo[16];
};
typedef struct AUDIO_RPC_AIO_PRIVATEINFO_PARAMETERS AUDIO_RPC_AIO_PRIVATEINFO_PARAMETERS;

enum AUDIO_ENUM_PP_PRIVAETINFO {
	ENUM_PRIVATEINFO_AUDIO_PP_SET_AGC_CFG = 0,
};
typedef enum AUDIO_ENUM_PP_PRIVAETINFO AUDIO_ENUM_PP_PRIVAETINFO;

struct AUDIO_RPC_PP_PRIVATEINFO_PARAMETERS {
	u_int instanceID;
	enum AUDIO_ENUM_PP_PRIVAETINFO type;
	u_int privateInfo[16];
};
typedef struct AUDIO_RPC_PP_PRIVATEINFO_PARAMETERS AUDIO_RPC_PP_PRIVATEINFO_PARAMETERS;

enum AUDIO_ENUM_PP_COMFORTABLE_LISTEN_GAIN {
	ENUM_AUDIO_AGC_DEFAULT_GAIN = 0,
	ENUM_AUDIO_AGC_TYPE_DEFAULT = 1,
	ENUM_AUDIO_AGC_TYPE_CONFIG = 1 + 1,
};
typedef enum AUDIO_ENUM_PP_COMFORTABLE_LISTEN_GAIN AUDIO_ENUM_PP_COMFORTABLE_LISTEN_GAIN;
enum AUDIO_ENUM_DEC_PRIVAETINFO {
	ENUM_PRIVATEINFO_DEC_CHECK_B = 0,
	ENUM_PRIVATEINFO_DEC_SET_LIMITER_EN = 1,
	ENUM_PRIVATEINFO_DEC_CHECK_D6 = 1 + 1,
        ENUM_PRIVATEINFO_DEC_CHECK_DSD = 1 + 2,
	ENUM_PRIVATEINFO_DEC_SET_CODEC_KEY = 1 + 3,
	ENUM_PRIVATEINFO_DEC_SET_PASSTHROUGH_KEY = 1 + 4,
};
typedef enum AUDIO_ENUM_DEC_PRIVAETINFO AUDIO_ENUM_DEC_PRIVAETINFO;

struct AUDIO_RPC_DEC_PRIVATEINFO_PARAMETERS {
	u_int instanceID;
	enum AUDIO_ENUM_DEC_PRIVAETINFO type;
	u_int privateInfo[16];
};
typedef struct AUDIO_RPC_DEC_PRIVATEINFO_PARAMETERS AUDIO_RPC_DEC_PRIVATEINFO_PARAMETERS;

enum OMX_AUDIO_VERSION {
	ENUM_OMX_AUDIO_VERSION_0 = 0,
	ENUM_OMX_AUDIO_VERSION_1 = 1,
	ENUM_OMX_AUDIO_VERSION_ERR = 2,
};
typedef enum OMX_AUDIO_VERSION OMX_AUDIO_VERSION;

struct AUDIO_RPC_PRIVATEINFO_RETURNVAL {
	u_int instanceID;
	u_int privateInfo[16];
};
typedef struct AUDIO_RPC_PRIVATEINFO_RETURNVAL AUDIO_RPC_PRIVATEINFO_RETURNVAL;

enum AUDIO_ENUM_MAX_OUTPUT_SAMPLERATE {
	ENUM_MAX_OUTPUT_SAMPLERATE_UNLIMITED = 0,
	ENUM_MAX_OUTPUT_SAMPLERATE_48000 = 1,
	ENUM_MAX_OUTPUT_SAMPLERATE_96000 = 2,
	ENUM_MAX_OUTPUT_SAMPLERATE_192000 = 3,
};
typedef enum AUDIO_ENUM_MAX_OUTPUT_SAMPLERATE AUDIO_ENUM_MAX_OUTPUT_SAMPLERATE;

struct AUDIO_PASSTHROUGH_INFO {
	u_int audioPassThroughType;
	u_short audioPassThroughFlag;
};
typedef struct AUDIO_PASSTHROUGH_INFO AUDIO_PASSTHROUGH_INFO;

enum AUDIO_SAMPLERATE {
	AUDIO_SAMPLERATE_32000 = 0x1,
	AUDIO_SAMPLERATE_44100 = 0x2,
	AUDIO_SAMPLERATE_48000 = 0x4,
	AUDIO_SAMPLERATE_88200 = 0x8,
	AUDIO_SAMPLERATE_96000 = 0x10,
	AUDIO_SAMPLERATE_176400 = 0x20,
	AUDIO_SAMPLERATE_192000 = 0x40,
	AUDIO_SAMPLERATE_22050 = 0x80,
	AUDIO_SAMPLERATE_24000 = 0x100,
	AUDIO_SAMPLERATE_64000 = 0x200,
	AUDIO_SAMPLERATE_16000 = 0x400,
	AUDIO_SAMPLERATE_8000 = 0x800,
	AUDIO_SAMPLERATE_11025 = 0x1000,
	AUDIO_SAMPLERATE_12000 = 0x2000,
};
typedef enum AUDIO_SAMPLERATE AUDIO_SAMPLERATE;

enum USB_AUDIO_IN_CMD {
	ENUM_USB_AUDIO_IN_CMD_DISCONNECT = 0,
	ENUM_USB_AUDIO_IN_CMD_CONNECT = 1,
	ENUM_USB_AUDIO_IN_CMD_STOP = 2,
	ENUM_USB_AUDIO_IN_CMD_START = 3,
	ENUM_USB_AUDIO_IN_CMD_GETINFO = 4,
	ENUM_USB_AUDIO_IN_CMD_SETINFO = 5,
	ENUM_USB_AUDIO_IN_CMD_MUTE = 6,
	ENUM_USB_AUDIO_IN_CMD_UNMUTE = 7,
	ENUM_USB_AUDIO_IN_CMD_MAX = 8,
};
typedef enum USB_AUDIO_IN_CMD USB_AUDIO_IN_CMD;

enum USB_AUDIO_IN_FORMAT {
	ENUM_USB_AUDIO_IN_FORMAT_SIGNED_8BITS = 0x1,
	ENUM_USB_AUDIO_IN_FORMAT_SIGNED_16BITS = 0x2,
	ENUM_USB_AUDIO_IN_FORMAT_SIGNED_24BITS = 0x4,
	ENUM_USB_AUDIO_IN_FORMAT_SIGNED_32BITS = 0x8,
	ENUM_USB_AUDIO_IN_FORMAT_UNSIGNED_8BITS = 0x10,
	ENUM_USB_AUDIO_IN_FORMAT_UNSIGNED_16BITS = 0x20,
	ENUM_USB_AUDIO_IN_FORMAT_UNSIGNED_24BITS = 0x40,
	ENUM_USB_AUDIO_IN_FORMAT_UNSIGNED_32BITS = 0x80,
};
typedef enum USB_AUDIO_IN_FORMAT USB_AUDIO_IN_FORMAT;

struct USB_AUDIO_IN_INFO {
	u_int command;
	u_int usb_ai_ringbuf_addr;
	u_int usb_ai_samplerate;
	u_int usb_ai_format;
	u_int usb_ai_max_chnum;
};
typedef struct USB_AUDIO_IN_INFO USB_AUDIO_IN_INFO;

enum USB_AUDIO_IN_TYPE {
	ENUM_USB_AUDIO_IN_TYPE_VIDEO_CONFERENCE = 0,
	ENUM_USB_AUDIO_IN_TYPE_KARAOKE = 1,
};
typedef enum USB_AUDIO_IN_TYPE USB_AUDIO_IN_TYPE;

struct AUDIO_AI_DEVICE_USB_INFO {
	u_int instanceID;
	u_int type;
	USB_AUDIO_IN_INFO info;
};
typedef struct AUDIO_AI_DEVICE_USB_INFO AUDIO_AI_DEVICE_USB_INFO;

struct AUDIO_PREPROCESS_MIC_INFO {
	u_int data_length;
	u_int sec;
	u_int usec;
	u_int first_pts_low;
	u_int first_pts_high;
};
typedef struct AUDIO_PREPROCESS_MIC_INFO AUDIO_PREPROCESS_MIC_INFO;

struct AUDIO_DUMMY_DATA {
	u_int parameter[8];
};
typedef struct AUDIO_DUMMY_DATA AUDIO_DUMMY_DATA;

enum LPCM_ENDIANESS {
	LPCM_ENDIANESS_UNKNOWN = 0,
	LPCM_ENDIANESS_LITTLE = 1,
	LPCM_ENDIANESS_BIG = 2,
};
typedef enum LPCM_ENDIANESS LPCM_ENDIANESS;

enum AUDIO_SAMPLERATE_TOLERANCE {
	AUDIO_SAMPLERATE_TOLERANCE_NONE = 0,
	AUDIO_SAMPLERATE_TOLERANCE_MAXIMUM = 1,
	AUDIO_SAMPLERATE_TOLERANCE_CUSTOM = 2,
};
typedef enum AUDIO_SAMPLERATE_TOLERANCE AUDIO_SAMPLERATE_TOLERANCE;

struct AUDIO_CODEC_KEY_INFO {
	u_int key;
	u_int flag;
};
typedef struct AUDIO_CODEC_KEY_INFO AUDIO_CODEC_KEY_INFO;

enum AUDIO_AO_CHANNEL_OUT_SWAP {
	AUDIO_AO_CHANNEL_OUT_STEREO = 0x0,
	AUDIO_AO_CHANNEL_OUT_L_TO_R = 0x1,
	AUDIO_AO_CHANNEL_OUT_R_TO_L = 0x2,
	AUDIO_AO_CHANNEL_OUT_LR_SWAP = 0x3,
};
typedef enum AUDIO_AO_CHANNEL_OUT_SWAP AUDIO_AO_CHANNEL_OUT_SWAP;

struct AUDIO_RPC_AO_CHANNEL_OPT_SWAP {
	u_int instanceID;
	u_int channelSwapIndex;
};
typedef struct AUDIO_RPC_AO_CHANNEL_OPT_SWAP AUDIO_RPC_AO_CHANNEL_OPT_SWAP;

enum AUDIO_LOW_DELAY_DROP_SAMPLES {
	AUDIO_DROP_1_SAMPLE = 0,
	AUDIO_DROP_2_SAMPLE = 1,
	AUDIO_DROP_4_SAMPLE = 2,
	AUDIO_DROP_8_SAMPLE = 3,
	AUDIO_DROP_16_SAMPLE = 4,
	AUDIO_DROP_256_SAMPLE = 5,
};
typedef enum AUDIO_LOW_DELAY_DROP_SAMPLES AUDIO_LOW_DELAY_DROP_SAMPLES;

struct AUDIO_LOW_DELAY_PARAMETERS {
	u_int data0;
	u_int data1;
	u_int reserved[4];
};
typedef struct AUDIO_LOW_DELAY_PARAMETERS AUDIO_LOW_DELAY_PARAMETERS;

enum AUDIO_LOW_DELAY_MODE {
	AUDIO_WFD_DROP = 0,
	AUDIO_WFD_FLUSH = 1,
	AUDIO_WFD_MUTE_AT_BEGINNING = 2,
	AUDIO_WFD_MANUAL = 7,
};
typedef enum AUDIO_LOW_DELAY_MODE AUDIO_LOW_DELAY_MODE;

enum AUDIO_FORMAT_OF_AI_SEND_TO_ALSA {
	AUDIO_ALSA_FORMAT_32BITS_BE_PCM = 0,
	AUDIO_ALSA_FORMAT_16BITS_LE_LPCM = 1,
	AUDIO_ALSA_FORMAT_24BITS_LE_LPCM = 2,
	AUDIO_ALSA_FORMAT_NONE = 3,
};
typedef enum AUDIO_FORMAT_OF_AI_SEND_TO_ALSA AUDIO_FORMAT_OF_AI_SEND_TO_ALSA;

struct RPC_RINGBUFFER {
	u_int instanceID;
	u_int pinID;
	u_int readPtrIndex;
	u_int pRINGBUFF_HEADER;
};
typedef struct RPC_RINGBUFFER RPC_RINGBUFFER;

struct RPC_RINGBUFF_FD_INFO {
	u_int listSize;
	u_int header_phyaddr[8];
	u_int buf_phyaddr[8];
	u_int buf_size[8];
	u_int instanceID;
	u_int pinID;
};
typedef struct RPC_RINGBUFF_FD_INFO RPC_RINGBUFF_FD_INFO;

struct RPC_RINGBUF_FD_HDL {
	u_int listSize;
	u_int header_phyaddr[8];
	u_int buf_phyaddr[8];
	u_int buf_size[8];
	u_int instanceID;
	u_int pinID;
	int buf_fd[8];
	int hdr_fd[8];
};
typedef struct RPC_RINGBUF_FD_HDL RPC_RINGBUF_FD_HDL;

enum VIDEO_VF_TYPE {
	VF_TYPE_VIDEO_MPEG2_DECODER = 0,
	VF_TYPE_VIDEO_MPEG4_DECODER = 1,
	VF_TYPE_VIDEO_DIVX_DECODER = 2,
	VF_TYPE_VIDEO_H263_DECODER = 3,
	VF_TYPE_VIDEO_H264_DECODER = 4,
	VF_TYPE_VIDEO_VC1_DECODER = 5,
	VF_TYPE_VIDEO_REAL_DECODER = 6,
	VF_TYPE_VIDEO_JPEG_DECODER = 7,
	VF_TYPE_VIDEO_MJPEG_DECODER = 8,
	VF_TYPE_SPU_DECODER = 9,
	VF_TYPE_VIDEO_OUT = 10,
	VF_TYPE_TRANSITION = 11,
	VF_TYPE_THUMBNAIL = 12,
	VF_TYPE_VIDEO_VP6_DECODER = 13,
	VF_TYPE_VIDEO_IMAGE_DECODER = 14,
	VF_TYPE_FLASH = 15,
	VF_TYPE_VIDEO_AVS_DECODER = 16,
	VF_TYPE_MIXER = 17,
	VF_TYPE_VIDEO_VP8_DECODER = 18,
	VF_TYPE_VIDEO_WMV7_DECODER = 19,
	VF_TYPE_VIDEO_WMV8_DECODER = 20,
	VF_TYPE_VIDEO_RAW_DECODER = 21,
	VF_TYPE_VIDEO_THEORA_DECODER = 22,
	VF_TYPE_VIDEO_FJPEG_DECODER = 23,
	VF_TYPE_VIDEO_H265_DECODER = 24,
	VF_TYPE_VIDEO_VP9_DECODER = 25,
};
typedef enum VIDEO_VF_TYPE VIDEO_VF_TYPE;

enum VIDEO_LOW_DELAY {
	LOW_DELAY_OFF = 0,
	LOW_DELAY_DECODER = 1,
	LOW_DELAY_DISPLAY = 2,
	LOW_DELAY_DECODER_DISPLAY = 3,
	LOW_DELAY_AVSYNC = 4,
	LOW_DELAY_DECODER_AVSYNC = 5,
	LOW_DELAY_DISPLAY_ORDER = 6,
};
typedef enum VIDEO_LOW_DELAY VIDEO_LOW_DELAY;

enum AIN_INPUT_TYPE {
	ENUM_AIN_INPUT_TYPE_NONE = 0,
	ENUM_AIN_INPUT_TYPE_PCM = 0 + 1,
	ENUM_AIN_INPUT_TYPE_RAW = 0 + 2,
	ENUM_AIN_INPUT_TYPE_RAW_HBR = 0 + 3,
};
typedef enum AIN_INPUT_TYPE AIN_INPUT_TYPE;

enum VIDEO_IMG_TYPE {
	IMG_JPEG = 0,
	IMG_PNG = 1,
	IMG_BMP = 2,
	IMG_GIF = 3,
	IMG_TIFF = 4,
};
typedef enum VIDEO_IMG_TYPE VIDEO_IMG_TYPE;

enum VIDEO_JPEG_ROTATION {
	VIDEO_ROTATE_0 = 0,
	VIDEO_ROTATE_90 = 1,
	VIDEO_ROTATE_180 = 2,
	VIDEO_ROTATE_270 = 3,
};
typedef enum VIDEO_JPEG_ROTATION VIDEO_JPEG_ROTATION;

enum VIDEO_ASSISTANT_TYPE {
	VIDEO_ASSISTANT_VP8 = 0x100,
	VIDEO_ASSISTANT_THEORA = 0x200,
};
typedef enum VIDEO_ASSISTANT_TYPE VIDEO_ASSISTANT_TYPE;

enum VIDEO_ASSISTANT_ACTION {
	VIDEO_ASSISTANT_CREATE = 0x100,
	VIDEO_ASSISTANT_DESTROY = 0x500,
};
typedef enum VIDEO_ASSISTANT_ACTION VIDEO_ASSISTANT_ACTION;

enum VIDEO_JPEG_MIRROR {
	VIDEO_MIRROR_NONE = 0,
	VIDEO_MIRROR_X = 1,
	VIDEO_MIRROR_Y = 2,
	VIDEO_MIRROR_XY = 3,
};
typedef enum VIDEO_JPEG_MIRROR VIDEO_JPEG_MIRROR;

enum IMG_TARGET_FORMAT {
	IMG_YUV = 0,
	IMG_ARGB8888 = 1,
	IMG_RGB565 = 2,
	IMG_RGB332 = 3,
	IMG_HANDLE = 4,
	IMG_RGBA8888 = 5,
	IMG_RGBA8888_LE = 6,
	IMG_ARGB8888_LE = 7,
	IMG_RGB565_LE = 8,
};
typedef enum IMG_TARGET_FORMAT IMG_TARGET_FORMAT;

enum IMG_TARGET_POSITION {
	IMG_TARGET_LEFTTOP = 0,
	IMG_TARGET_CENTER = 1,
	IMG_TARGET_FILL = 2,
};
typedef enum IMG_TARGET_POSITION IMG_TARGET_POSITION;

enum IMG_SOURCE_PICTURE_SELECT {
	IMG_PICTURE_OPTIONAL = 0,
	IMG_PICTURE_WHOLE = 1,
	IMG_PICTURE_THUMBNAIL = 2,
	IMG_PICTURE_THUMBNAIL_FIRST = 3,
};
typedef enum IMG_SOURCE_PICTURE_SELECT IMG_SOURCE_PICTURE_SELECT;

enum IMG_STATUS {
	IMG_STATUS_INIT = 0,
	IMG_STATUS_FINISH = 1,
	IMG_STATUS_FAIL_DECODE = 2,
	IMG_STATUS_UNSUPPORT = 3,
	IMG_STATUS_TIFF_FOR_BATCH = 4,
	IMG_STATUS_ANIMATION_GIF = 5,
	IMG_STATUS_UNSUPPORT_SIZE = 6,
};
typedef enum IMG_STATUS IMG_STATUS;

enum VIDEO_COLOR_FMT {
	VIDEO_COLOR_YUV = 0,
	VIDEO_COLOR_ARGB8888 = 1,
	VIDEO_COLOR_RGB565 = 2,
	VIDEO_COLOR_RGB332 = 3,
	VIDEO_COLOR_RGBA8888 = 4,
	VIDEO_COLOR_HANDLE = 5,
};
typedef enum VIDEO_COLOR_FMT VIDEO_COLOR_FMT;

enum VIDEO_TRANSITION_TYPE {
	VIDEO_TRANSITION_COPY = 0,
	VIDEO_TRANSITION_CROSSFADE = 1,
	VIDEO_TRANSITION_LEFT_TO_RIGHT = 2,
	VIDEO_TRANSITION_TOP_TO_BOTTOM = 3,
	VIDEO_TRANSITION_WATERFALL = 4,
	VIDEO_TRANSITION_SNAKE = 5,
	VIDEO_TRANSITION_RANDOM_BOX = 6,
	VIDEO_TRANSITION_DIAGONAL = 7,
	VIDEO_TRANSITION_FADEIN_FADEOUT = 8,
	VIDEO_TRANSITION_MOVE = 9,
	VIDEO_TRANSITION_CROSSFADE_KENBURNS = 10,
	VIDEO_TRANSITION_WINDOW = 11,
	VIDEO_TRANSITION_EXTEND = 12,
	VIDEO_TRANSITION_EXPAND = 13,
	VIDEO_TRANSITION_STEP_ALPHA = 14,
	VIDEO_TRANSITION_UNKNOWN = 15,
};
typedef enum VIDEO_TRANSITION_TYPE VIDEO_TRANSITION_TYPE;

enum VIDEO_FORMAT {
	VIDEO_FORMAT_NTSC = 0,
	VIDEO_FORMAT_PAL = 1,
	VIDEO_FORMAT_NTSC_443 = 2,
	VIDEO_FORMAT_PAL_M = 3,
	VIDEO_FORMAT_PAL_CN = 4,
	VIDEO_FORMAT_SECAM = 5,
	VIDEO_FORMAT_480P = 6,
	VIDEO_FORMAT_576P = 7,
	VIDEO_FORMAT_720P50 = 8,
	VIDEO_FORMAT_720P60 = 9,
	VIDEO_FORMAT_720P25 = 10,
	VIDEO_FORMAT_720P30 = 11,
	VIDEO_FORMAT_720I50 = 12,
	VIDEO_FORMAT_720I60 = 13,
	VIDEO_FORMAT_1080I50 = 14,
	VIDEO_FORMAT_1080I60 = 15,
	VIDEO_FORMAT_1080P50 = 16,
	VIDEO_FORMAT_1080P60 = 17,
};
typedef enum VIDEO_FORMAT VIDEO_FORMAT;

enum VIDEO_STREAM_TYPE {
	VIDEO_STREAM_MPEG1 = 0,
	VIDEO_STREAM_MPEG2 = 1,
	VIDEO_STREAM_MPEG4 = 2,
	VIDEO_STREAM_DIVX3 = 3,
	VIDEO_STREAM_H263 = 4,
	VIDEO_STREAM_H264 = 5,
	VIDEO_STREAM_VC1 = 6,
	VIDEO_STREAM_REALVIDEO = 7,
	VIDEO_STREAM_MJPEG = 8,
	VIDEO_STREAM_VP6 = 9,
	VIDEO_STREAM_AVS = 10,
	VIDEO_STREAM_YUV = 11,
	VIDEO_STREAM_VP8 = 12,
	VIDEO_STREAM_WMV7 = 13,
	VIDEO_STREAM_WMV8 = 14,
	VIDEO_STREAM_RAW = 15,
	VIDEO_STREAM_THEORA = 16,
	VIDEO_STREAM_UNKNOWN = 17,
	VIDEO_STREAM_FJPEG = 18,
	VIDEO_STREAM_H265 = 19,
	VIDEO_STREAM_VP9 = 20,
};
typedef enum VIDEO_STREAM_TYPE VIDEO_STREAM_TYPE;

enum VIDEO_DECODER_CC_BYPASS_MODE {
	VIDEODECODER_CC_DROP = 0,
	VIDEODECODER_CC_BYPASS = 1,
	VIDEODECODER_CC_DECODE = 2,
};
typedef enum VIDEO_DECODER_CC_BYPASS_MODE VIDEO_DECODER_CC_BYPASS_MODE;

enum VO_STANDARD {
	VO_STANDARD_NTSC_M = 0,
	VO_STANDARD_NTSC_J = 1,
	VO_STANDARD_NTSC_443 = 2,
	VO_STANDARD_PAL_B = 3,
	VO_STANDARD_PAL_D = 4,
	VO_STANDARD_PAL_G = 5,
	VO_STANDARD_PAL_H = 6,
	VO_STANDARD_PAL_I = 7,
	VO_STANDARD_PAL_N = 8,
	VO_STANDARD_PAL_NC = 9,
	VO_STANDARD_PAL_M = 10,
	VO_STANDARD_PAL_60 = 11,
	VO_STANDARD_SECAM = 12,
	VO_STANDARD_HDTV_720P_60 = 13,
	VO_STANDARD_HDTV_720P_50 = 14,
	VO_STANDARD_HDTV_720P_30 = 15,
	VO_STANDARD_HDTV_720P_25 = 16,
	VO_STANDARD_HDTV_720P_24 = 17,
	VO_STANDARD_HDTV_1080I_60 = 18,
	VO_STANDARD_HDTV_1080I_50 = 19,
	VO_STANDARD_HDTV_1080P_30 = 20,
	VO_STANDARD_HDTV_1080P_25 = 21,
	VO_STANDARD_HDTV_1080P_24 = 22,
	VO_STANDARD_VGA = 23,
	VO_STANDARD_SVGA = 24,
	VO_STANDARD_HDTV_1080P_60 = 25,
	VO_STANDARD_HDTV_1080P_50 = 26,
	VO_STANDARD_HDTV_1080I_59 = 27,
	VO_STANDARD_HDTV_720P_59 = 28,
	VO_STANDARD_HDTV_1080P_23 = 29,
	VO_STANDARD_HDTV_1080P_59 = 30,
	VO_STANDARD_HDTV_1080P_60_3D = 31,
	VO_STANDARD_HDTV_1080P_50_3D = 32,
	VO_STANDARD_HDTV_1080P_30_3D = 33,
	VO_STANDARD_HDTV_1080P_24_3D = 34,
	VO_STANDARD_HDTV_720P_60_3D = 35,
	VO_STANDARD_HDTV_720P_50_3D = 36,
	VO_STANDARD_HDTV_720P_30_3D = 37,
	VO_STANDARD_HDTV_720P_24_3D = 38,
	VO_STANDARD_HDTV_720P_59_3D = 39,
	VO_STANDARD_HDTV_1080I_60_3D = 40,
	VO_STANDARD_HDTV_1080I_59_3D = 41,
	VO_STANDARD_HDTV_1080I_50_3D = 42,
	VO_STANDARD_HDTV_1080P_23_3D = 43,
	VO_STANDARD_HDTV_2160P_30 = 44,
	VO_STANDARD_HDTV_2160P_29 = 45,
	VO_STANDARD_HDTV_2160P_25 = 46,
	VO_STANDARD_HDTV_2160P_24 = 47,
	VO_STANDARD_HDTV_2160P_23 = 48,
	VO_STANDARD_HDTV_4096_2160P_24 = 49,
	VO_STANDARD_HDTV_2160P_60 = 50,
	VO_STANDARD_HDTV_2160P_50 = 51,
	VO_STANDARD_HDTV_4096_2160P_25 = 52,
	VO_STANDARD_HDTV_4096_2160P_30 = 53,
	VO_STANDARD_HDTV_4096_2160P_50 = 54,
	VO_STANDARD_HDTV_4096_2160P_60 = 55,
	VO_STANDARD_HDTV_2160P_60_420 = 56,
	VO_STANDARD_HDTV_2160P_50_420 = 57,
	VO_STANDARD_HDTV_4096_2160P_60_420 = 58,
	VO_STANDARD_HDTV_4096_2160P_50_420 = 59,
	VO_STANDARD_DP_FORMAT_1920_1080P_60 = 60,
	VO_STANDARD_DP_FORMAT_2160P_30 = 61,
	VO_STANDARD_HDTV_2160P_24_3D = 62,
	VO_STANDARD_HDTV_2160P_23_3D = 63,
	VO_STANDARD_HDTV_2160P_59 = 64,
	VO_STANDARD_HDTV_2160P_59_420 = 65,
	VO_STANDARD_HDTV_2160P_25_3D = 66,
	VO_STANDARD_HDTV_2160P_30_3D = 67,
	VO_STANDARD_HDTV_2160P_50_3D = 68,
	VO_STANDARD_HDTV_2160P_60_3D = 69,
	VO_STANDARD_HDTV_4096_2160P_24_3D = 70,
	VO_STANDARD_HDTV_4096_2160P_25_3D = 71,
	VO_STANDARD_HDTV_4096_2160P_30_3D = 72,
	VO_STANDARD_HDTV_4096_2160P_50_3D = 73,
	VO_STANDARD_HDTV_4096_2160P_60_3D = 74,
	VO_STANDARD_DP_FORMAT_1280_720P_60 = 75,
	VO_STANDARD_DP_FORMAT_3840_2160P_60 = 76,
	VO_STANDARD_DP_FORMAT_1024_768P_60 = 77,
	VO_STANDARD_HDTV_2160P_50_422_12bit = 78,
	VO_STANDARD_HDTV_2160P_60_422_12bit = 79,
	VO_STANDARD_DP_FORMAT_1280_800P_60 = 80,
	VO_STANDARD_DP_FORMAT_1440_900P_60 = 81,
	VO_STANDARD_DP_FORMAT_1440_768P_60 = 82,
	VO_STANDARD_ERROR = 83,
};
typedef enum VO_STANDARD VO_STANDARD;

enum VO_PEDESTAL_TYPE {
	VO_PEDESTAL_TYPE_300_700_ON = 0,
	VO_PEDESTAL_TYPE_300_700_OFF = 1,
	VO_PEDESTAL_TYPE_286_714_ON = 2,
	VO_PEDESTAL_TYPE_286_714_OFF = 3,
};
typedef enum VO_PEDESTAL_TYPE VO_PEDESTAL_TYPE;

enum VO_TV_TYPE {
	VO_TV_TYPE_4_BY_3 = 0,
	VO_TV_TYPE_16_BY_9_FIXED = 1,
	VO_TV_TYPE_16_BY_9_AUTO = 2,
	VO_TV_TYPE_16_BY_10 = 3,
	VO_TV_TYPE_ERROR = 4,
};
typedef enum VO_TV_TYPE VO_TV_TYPE;

enum VO_DISPLAY_WH_RATIO_TYPE {
	VO_DISPLAY_WH_RATIO_DEFAULT = 0,
	VO_DISPLAY_WH_RATIO_4_BY_3 = 1,
	VO_DISPLAY_WH_RATIO_16_BY_9 = 2,
	VO_DISPLAY_WH_RATIO_16_BY_10 = 3,
};
typedef enum VO_DISPLAY_WH_RATIO_TYPE VO_DISPLAY_WH_RATIO_TYPE;
enum VO_HDMI_MODE {
	VO_DVI_ON = 0,
	VO_HDMI_ON = 1,
	VO_HDMI_OFF = 2,
	VO_MHL_ON = 3,
	VO_MHL_OFF = 4,
	VO_HDMI_MODE_ERROR = 5,
};
typedef enum VO_HDMI_MODE VO_HDMI_MODE;

enum VO_HDR_CTRL_MODE {
	VO_HDR_CTRL_NONE = 0,
	VO_HDR_CTRL_DV_ON = 1,
	VO_HDR_CTRL_SDR = 2,
	VO_HDR_CTRL_HDR_GAMMA = 3,
	VO_HDR_CTRL_PQHDR = 4,
	VO_HDR_CTRL_FUTURE = 5,
	VO_HDR_CTRL_INPUT = 6,
	VO_HDR_CTRL_DV_LOW_LATENCY_12b_YUV422 = 7,
	VO_HDR_CTRL_DV_LOW_LATENCY_10b_YUV444 = 8,
	VO_HDR_CTRL_DV_LOW_LATENCY_10b_RGB444 = 9,
	VO_HDR_CTRL_DV_LOW_LATENCY_12b_YUV444 = 10,
	VO_HDR_CTRL_DV_LOW_LATENCY_12b_RGB444 = 11,
	VO_HDR_CTRL_DV_ON_INPUT = 12,
	VO_HDR_CTRL_DV_ON_LOW_LATENCY_12b422_INPUT = 13,
};
typedef enum VO_HDR_CTRL_MODE VO_HDR_CTRL_MODE;
enum VO_HDMI_OFF_MODE {
	VO_HDMI_OFF_CLOCK_OFF = 0,
	VO_HDMI_OFF_CLOCK_ON = 1,
};
typedef enum VO_HDMI_OFF_MODE VO_HDMI_OFF_MODE;
enum VO_HDMI_AUDIO_SAMPLE_FREQ {
	VO_HDMI_AUDIO_NULL = 0,
	VO_HDMI_AUDIO_32K = 1,
	VO_HDMI_AUDIO_44_1K = 2,
	VO_HDMI_AUDIO_48K = 3,
	VO_HDMI_AUDIO_88_2K = 4,
	VO_HDMI_AUDIO_96K = 5,
	VO_HDMI_AUDIO_176_4K = 6,
	VO_HDMI_AUDIO_192K = 7,
};
typedef enum VO_HDMI_AUDIO_SAMPLE_FREQ VO_HDMI_AUDIO_SAMPLE_FREQ;

enum VO_HDMI_COLOR_FMT {
	VO_HDMI_RGB444 = 0,
	VO_HDMI_YCbCr422 = 1,
	VO_HDMI_YCbCr444 = 2,
};
typedef enum VO_HDMI_COLOR_FMT VO_HDMI_COLOR_FMT;

enum VO_INTERFACE_TYPE {
	VO_ANALOG_AND_DIGITAL = 0,
	VO_ANALOG_ONLY = 1,
	VO_DIGITAL_ONLY = 2,
	VO_DISPLAY_PORT_ONLY = 3,
	VO_HDMI_AND_DISPLAY_PORT_SAME_SOURCE = 4,
	VO_HDMI_AND_DISPLAY_PORT_DIFF_SOURCE = 5,
	VO_DISPLAY_PORT_AND_CVBS_SAME_SOURCE = 6,
	VO_HDMI_AND_DP_DIFF_SOURCE_WITH_CVBS = 7,
	VO_FORCE_DP_OFF = 8,
	VO_HDMI_AND_CVBS_DIFF_SOURCE = 9,
};
typedef enum VO_INTERFACE_TYPE VO_INTERFACE_TYPE;

enum VO_3D_SOURCE_FORMAT {
	VO_SIDE_BY_SIDE = 0,
	VO_TOP_BOTTOM = 1,
};
typedef enum VO_3D_SOURCE_FORMAT VO_3D_SOURCE_FORMAT;

enum VO_VBI_ASPECT_RATIO {
	VO_VBI_ASPECT_RATIO_RESEVED_0 = 0,
	VO_VBI_ASPECT_RATIO_14_BY_9_LB_CENTER = 0 + 1,
	VO_VBI_ASPECT_RATIO_14_BY_9_LB_TOP = 0 + 2,
	VO_VBI_ASPECT_RATIO_RESEVED_3 = 0 + 3,
	VO_VBI_ASPECT_RATIO_16_BY_9_LB_TOP = 0 + 4,
	VO_VBI_ASPECT_RATIO_RESEVED_5 = 0 + 5,
	VO_VBI_ASPECT_RATIO_RESEVED_6 = 0 + 6,
	VO_VBI_ASPECT_RATIO_16_BY_9 = 0 + 7,
	VO_VBI_ASPECT_RATIO_4_BY_3 = 0 + 8,
	VO_VBI_ASPECT_RATIO_RESEVED_9 = 0 + 9,
	VO_VBI_ASPECT_RATIO_RESEVED_10 = 0 + 10,
	VO_VBI_ASPECT_RATIO_16_BY_9_LB_CENTER = 0 + 11,
	VO_VBI_ASPECT_RATIO_RESEVED_12 = 0 + 12,
	VO_VBI_ASPECT_RATIO_LT_16_BY_9_LB_CENTER = 0 + 13,
	VO_VBI_ASPECT_RATIO_14_BY_9 = 0 + 14,
};
typedef enum VO_VBI_ASPECT_RATIO VO_VBI_ASPECT_RATIO;

enum VO_VBI_COPY_MODE {
	VO_VBI_COPY_MODE_COPY_FREE = 0,
	VO_VBI_COPY_MODE_RESERVE = 0 + 1,
	VO_VBI_COPY_MODE_COPY_ONCE = 0 + 2,
	VO_VBI_COPY_MODE_COPY_NONE = 0 + 3,
};
typedef enum VO_VBI_COPY_MODE VO_VBI_COPY_MODE;

enum VO_VBI_APS {
	VO_VBI_APS_OFF = 0,
	VO_VBI_APS_TYPE_1 = 0 + 1,
	VO_VBI_APS_TYPE_2 = 0 + 2,
	VO_VBI_APS_TYPE_3 = 0 + 3,
};
typedef enum VO_VBI_APS VO_VBI_APS;

enum VO_VBI_SUBTITLE_MODE {
	VO_VBI_SUBTITLE_MODE_NONE = 0,
	VO_VBI_SUBTITLE_MODE_INSIDE = 0 + 1,
	VO_VBI_SUBTITLE_MODE_OUTSIDE = 0 + 2,
	VO_VBI_SUBTITLE_MODE_RESERVED = 0 + 3,
};
typedef enum VO_VBI_SUBTITLE_MODE VO_VBI_SUBTITLE_MODE;

enum VO_VIDEO_PLANE {
	VO_VIDEO_PLANE_V1 = 0,
	VO_VIDEO_PLANE_V2 = 1,
	VO_VIDEO_PLANE_SUB1 = 2,
	VO_VIDEO_PLANE_OSD1 = 3,
	VO_VIDEO_PLANE_OSD2 = 4,
	VO_VIDEO_PLANE_WIN1 = 5,
	VO_VIDEO_PLANE_WIN2 = 6,
	VO_VIDEO_PLANE_WIN3 = 7,
	VO_VIDEO_PLANE_WIN4 = 8,
	VO_VIDEO_PLANE_WIN5 = 9,
	VO_VIDEO_PLANE_WIN6 = 10,
	VO_VIDEO_PLANE_WIN7 = 11,
	VO_VIDEO_PLANE_WIN8 = 12,
	VO_VIDEO_PLANE_SUB2 = 13,
	VO_VIDEO_PLANE_CSR = 14,
	VO_VIDEO_PLANE_V3 = 15,
	VO_VIDEO_PLANE_NONE = 255,
};
typedef enum VO_VIDEO_PLANE VO_VIDEO_PLANE;

enum VO_RESCALE_MODE {
	VO_RESCALE_MODE_KEEP_AR_AUTO = 0,
	VO_RESCALE_MODE_KEEP_AR_LB_CNTR = 1,
	VO_RESCALE_MODE_KEEP_AR_LB_TOP = 2,
	VO_RESCALE_MODE_KEEP_AR_PS_CNTR = 3,
	VO_RESCALE_MODE_KEEP_AR_PS_AUTO = 4,
	VO_RESCALE_MODE_FULL_SCALE = 5,
	VO_RESCALE_MODE_USER_DEFINE = 6,
	VO_RESCALE_MODE_IPTV_SPECIAL_MODE = 7,
	VO_RESCALE_MODE_ERROR = 8,
};
typedef enum VO_RESCALE_MODE VO_RESCALE_MODE;

enum VO_DEINT_MODE {
	VO_DEINT_MODE_BOB = 0,
	VO_DEINT_MODE_WEAVE = 1,
	VO_DEINT_MODE_MADI = 2,
	VO_DEINT_MODE_MADI_SNGLDIR = 3,
	VO_DEINT_MODE_MCOMP = 4,
	VO_DEINT_MODE_FILM = 5,
	VO_DEINT_MODE_AUTO = 6,
	VO_DEINT_MODE_AUTO_STATIC = 7,
	VO_DEINT_MODE_AUTO_DYNAMIC = 8,
	VO_DEINT_MODE_AUTO_STATIC_INTRA = 9,
	VO_DEINT_MODE_ERROR = 10,
};
typedef enum VO_DEINT_MODE VO_DEINT_MODE;

enum VO_OSD_LPF_TYPE {
	VO_OSD_LPF_TYPE_DROP = 0,
	VO_OSD_LPF_TYPE_FILTER = 1,
	VO_OSD_LPF_TYPE_AVERAGE = 2,
	VO_OSD_LPF_TYPE_ERROR = 3,
};
typedef enum VO_OSD_LPF_TYPE VO_OSD_LPF_TYPE;

enum VO_OSD_COLOR_FORMAT {
	VO_OSD_COLOR_FORMAT_2BIT = 0,
	VO_OSD_COLOR_FORMAT_4BIT = 1,
	VO_OSD_COLOR_FORMAT_8BIT = 2,
	VO_OSD_COLOR_FORMAT_RGB332 = 3,
	VO_OSD_COLOR_FORMAT_RGB565 = 4,
	VO_OSD_COLOR_FORMAT_ARGB1555 = 5,
	VO_OSD_COLOR_FORMAT_ARGB4444 = 6,
	VO_OSD_COLOR_FORMAT_ARGB8888 = 7,
	VO_OSD_COLOR_FORMAT_Reserved0 = 8,
	VO_OSD_COLOR_FORMAT_Reserved1 = 9,
	VO_OSD_COLOR_FORMAT_Reserved2 = 10,
	VO_OSD_COLOR_FORMAT_YCBCRA4444 = 11,
	VO_OSD_COLOR_FORMAT_YCBCRA8888 = 12,
	VO_OSD_COLOR_FORMAT_RGBA5551 = 13,
	VO_OSD_COLOR_FORMAT_RGBA4444 = 14,
	VO_OSD_COLOR_FORMAT_RGBA8888 = 15,
	VO_OSD_COLOR_FORMAT_420 = 16,
	VO_OSD_COLOR_FORMAT_422 = 17,
	VO_OSD_COLOR_FORMAT_RGB323 = 18,
	VO_OSD_COLOR_FORMAT_RGB233 = 19,
	VO_OSD_COLOR_FORMAT_RGB556 = 20,
	VO_OSD_COLOR_FORMAT_RGB655 = 21,
	VO_OSD_COLOR_FORMAT_RGB888 = 22,
	VO_OSD_COLOR_FORMAT_RGB565_LITTLE = 36,
	VO_OSD_COLOR_FORMAT_ARGB1555_LITTLE = 37,
	VO_OSD_COLOR_FORMAT_ARGB4444_LITTLE = 38,
	VO_OSD_COLOR_FORMAT_ARGB8888_LITTLE = 39,
	VO_OSD_COLOR_FORMAT_YCBCRA4444_LITTLE = 43,
	VO_OSD_COLOR_FORMAT_YCBCRA8888_LITTLE = 44,
	VO_OSD_COLOR_FORMAT_RGBA5551_LITTLE = 45,
	VO_OSD_COLOR_FORMAT_RGBA4444_LITTLE = 46,
	VO_OSD_COLOR_FORMAT_RGBA8888_LITTLE = 47,
	VO_OSD_COLOR_FORMAT_RGB556_LITTLE = 52,
	VO_OSD_COLOR_FORMAT_RGB655_LITTLE = 53,
	VO_OSD_COLOR_FORMAT_RGB888_LITTLE = 54,
};
typedef enum VO_OSD_COLOR_FORMAT VO_OSD_COLOR_FORMAT;

enum VO_OSD_RGB_ORDER {
	VO_OSD_COLOR_RGB = 0,
	VO_OSD_COLOR_BGR = 1,
	VO_OSD_COLOR_GRB = 2,
	VO_OSD_COLOR_GBR = 3,
	VO_OSD_COLOR_RBG = 4,
	VO_OSD_COLOR_BRG = 5,
};
typedef enum VO_OSD_RGB_ORDER VO_OSD_RGB_ORDER;

enum VO_GRAPHIC_PLANE {
	VO_GRAPHIC_OSD = 0,
	VO_GRAPHIC_SUB1 = 1,
	VO_GRAPHIC_SUB2 = 2,
	VO_GRAPHIC_OSD1 = 0,
	VO_GRAPHIC_OSD2 = 2,
};
typedef enum VO_GRAPHIC_PLANE VO_GRAPHIC_PLANE;

enum VO_GRAPHIC_STORAGE_MODE {
	VO_GRAPHIC_BLOCK = 0,
	VO_GRAPHIC_SEQUENTIAL = 1,
};
typedef enum VO_GRAPHIC_STORAGE_MODE VO_GRAPHIC_STORAGE_MODE;

struct VO_COLOR {
	u_char c1;
	u_char c2;
	u_char c3;
	u_char isRGB;
};
typedef struct VO_COLOR VO_COLOR;

struct VO_RECTANGLE {
	short x;
	short y;
	u_short width;
	u_short height;
};
typedef struct VO_RECTANGLE VO_RECTANGLE;

struct VO_SUBPIC_COLORMAP {
	u_char alpha3;
	u_char alpha2;
	u_char alpha1;
	u_char alpha0;
	u_char color3;
	u_char color2;
	u_char color1;
	u_char color0;
};
typedef struct VO_SUBPIC_COLORMAP VO_SUBPIC_COLORMAP;

enum VO_ZOOM_TYPE {
	VO_ZOOM_FULL_SIZE = 0,
	VO_ZOOM_ORIGINAL_SIZE = 1,
	VO_ZOOM_DOUBLE_SIZE = 2,
	VO_ZOOM_ERROR = 3,
};
typedef enum VO_ZOOM_TYPE VO_ZOOM_TYPE;

enum SP_STREAM_TYPE {
	SP_DVD_TYPE = 0,
	SP_DIVX_TYPE = 1,
	SP_DIVX_MENU_TYPE = 2,
	SP_DVB_SUBTITLE_TYPE = 3,
	SP_DVB_TT_TYPE = 4,
	SP_ATSC_CC_TYPE = 5,
	SP_SRT_TYPE = 6,
	SP_SSA_TYPE = 7,
	SP_DIVX_XSUB_PLUS_TYPE = 8,
	SP_DVD_FOR_DIVX_TYPE = 9,
	SP_BD_SUBTITLE_TYPE = 10,
        SP_DUMMY_TYPE = 11,
};
typedef enum SP_STREAM_TYPE SP_STREAM_TYPE;

enum TVE_BOARD_TYPE {
	TVE_BOARD_CLASSIC_TYPE = 0,
	TVE_BOARD_EXTERNAL_SCART_TYPE = 1,
	TVE_BOARD_AVHDD_TYPE = 2,
	TVE_BOARD_CUSTOM_1_TYPE = 3,
	TVE_BOARD_CUSTOM_2_TYPE = 4,
	TVE_BOARD_CUSTOM_3_TYPE = 5,
	TVE_BOARD_CUSTOM_4_TYPE = 6,
	TVE_BOARD_CUSTOM_5_TYPE = 7,
	TVE_BOARD_CUSTOM_6_TYPE = 8,
	TVE_BOARD_CUSTOM_7_TYPE = 9,
	TVE_BOARD_CUSTOM_8_TYPE = 10,
	TVE_BOARD_CUSTOM_9_TYPE = 11,
};
typedef enum TVE_BOARD_TYPE TVE_BOARD_TYPE;

enum VIDEO_BUFFER_TYPE {
	VIDEO_BUFFER_SD = 0,
	VIDEO_BUFFER_HD = 1,
	VIDEO_BUFFER_HD_DIVX = 2,
	VIDEO_BUFFER_RM_CIF = 3,
	VIDEO_BUFFER_USER_DEFINE = 4,
};
typedef enum VIDEO_BUFFER_TYPE VIDEO_BUFFER_TYPE;

enum VIDEO_DNR_MODE {
	VIDEO_DNR_OFF = 0,
	VIDEO_DNR_AUTO = 1,
	VIDEO_DNR_DEMO = 2,
};
typedef enum VIDEO_DNR_MODE VIDEO_DNR_MODE;

enum VIDEO_CODEC_CONTROL_BIT {
	VIDEO_MPEG2_DECODER_BIT = 43,
	VIDEO_MPEG4_DECODER_BIT = 44,
	VIDEO_DIVX_DECODER_BIT = 45,
	VIDEO_REALVIDEO_DECODER_BIT = 46,
	VIDEO_H263_DECODER_BIT = 47,
	VIDEO_MJPEG_DECODER_BIT = 48,
	VIDEO_H264_DECODER_BIT = 49,
	VIDEO_VC1_DECODER_BIT = 50,
	VIDEO_FJPEG_DECODER_BIT = 51,
};
typedef enum VIDEO_CODEC_CONTROL_BIT VIDEO_CODEC_CONTROL_BIT;

enum VIDEO_PHOTO_DEC_JPEG_CTRL {
	JPEG_ENABLE = 0,
	JPEG_DISABLE = 1,
	JPEG_NO_PROGRESSIVE = 2,
};
typedef enum VIDEO_PHOTO_DEC_JPEG_CTRL VIDEO_PHOTO_DEC_JPEG_CTRL;

enum VIDEO_PHOTO_DEC_BITMAP_CTRL {
	BITMAP_ENABLE = 0,
	BITMAP_DISABLE = 1,
};
typedef enum VIDEO_PHOTO_DEC_BITMAP_CTRL VIDEO_PHOTO_DEC_BITMAP_CTRL;

enum VIDEO_PHOTO_DEC_TIFF_CTRL {
	TIFF_ENABLE = 0,
	TIFF_DISABLE = 1,
};
typedef enum VIDEO_PHOTO_DEC_TIFF_CTRL VIDEO_PHOTO_DEC_TIFF_CTRL;

enum VIDEO_PHOTO_DEC_GIF_CTRL {
	GIF_ENABLE = 0,
	GIF_DISABLE = 1,
	GIF_NO_ANIMATION = 2,
};
typedef enum VIDEO_PHOTO_DEC_GIF_CTRL VIDEO_PHOTO_DEC_GIF_CTRL;

enum VIDEO_PHOTO_DEC_PNG_CTRL {
	PNG_ENABLE = 0,
	PNG_DISABLE = 1,
};
typedef enum VIDEO_PHOTO_DEC_PNG_CTRL VIDEO_PHOTO_DEC_PNG_CTRL;

struct MIXER_WIN {
	u_char winID;
	short order;
	short alpha;
	struct VO_RECTANGLE dispWin;
	struct VO_RECTANGLE clipSrcWin;
};
typedef struct MIXER_WIN MIXER_WIN;

enum YUV_FMT {
	FMT_YUYV = 0,
	FMT_YUV420 = 1,
	FMT_YUV422P = 2,
};
typedef enum YUV_FMT YUV_FMT;

struct PLANE_MIXER_WIN {
	enum VO_VIDEO_PLANE winID;
	short opacity;
	short alpha;
};
typedef struct PLANE_MIXER_WIN PLANE_MIXER_WIN;

enum ENUM_SEI_3D_TYPE {
	SEI_3D_NON = 0,
	SEI_3D_SBS = 2,
	SEI_3D_TB = 4,
	SEI_3D_SBS_SWITCH = 10,
	SEI_3D_TB_SWITCH = 12,
};
typedef enum ENUM_SEI_3D_TYPE ENUM_SEI_3D_TYPE;

enum ENUM_VIDEO_DEC_PRIVATEINFO {
	ENUM_VIDEO_PRIVATEINFO_SEI_INFO = 0,
	ENUM_VIDEO_PRIVATEINFO_DEC_IGNORE_BS_ASPECT_RATIO = 1,
	ENUM_VIDEO_PRIVATEINFO_H264DEC_SET_DPB_BYPASS = 2,
	ENUM_VIDEO_PRIVATEINFO_H264DEC_SET_PROPAGATION_LEVEL = 3,
	ENUM_VIDEO_PRIVATEINFO_SET_PRESEND_FIRST_I_FRM = 4,
	ENUM_VIDEO_PRIVATEINFO_SET_SWITCH_VIDEO_RESERVE_LAST_FRAME = 5,
	ENUM_VIDEO_PRIVATEINFO_DISABLE_REORDER = 6,
	ENUM_VIDEO_PRIVATEINFO_DISABLE_CHK_BROKEN_LINK = 7,
	ENUM_VIDEO_PRIVATEINFO_GET_VIDEO_ERR_RATE = 8,
	ENUM_VIDEO_PRIVATEINFO_SET_CTC_SOURCE = 9,
};
typedef enum ENUM_VIDEO_DEC_PRIVATEINFO ENUM_VIDEO_DEC_PRIVATEINFO;

enum ENUM_VIDEO_VO_PRIVATEINFO {
	ENUM_VIDEO_PRIVATEINFO_ENTER_OSD1_FULLWIN_IN_3D_MODE = 0,
	ENUM_VIDEO_PRIVATEINFO_EXIT_OSD1_FULLWIN_IN_3D_MODE = 1,
	ENUM_VIDEO_PRIVATEINFO_FORCE_NOT_CLOSE_ANALOG_OUT = 2,
};
typedef enum ENUM_VIDEO_VO_PRIVATEINFO ENUM_VIDEO_VO_PRIVATEINFO;

struct VIDEO_RPC_DEC_PRIVATEINFO_INPUT_PARAMETERS {
	u_int instanceID;
	enum ENUM_VIDEO_DEC_PRIVATEINFO type;
	u_int data[16];
};
typedef struct VIDEO_RPC_DEC_PRIVATEINFO_INPUT_PARAMETERS VIDEO_RPC_DEC_PRIVATEINFO_INPUT_PARAMETERS;

struct VIDEO_RPC_DEC_PRIVATEINFO_OUTPUT_PARAMETERS {
	u_int data[16];
};
typedef struct VIDEO_RPC_DEC_PRIVATEINFO_OUTPUT_PARAMETERS VIDEO_RPC_DEC_PRIVATEINFO_OUTPUT_PARAMETERS;

struct VIDEO_RPC_DEC_PRIVATEINFO_SEI_INFO {
	u_int sei_3d_type;
};
typedef struct VIDEO_RPC_DEC_PRIVATEINFO_SEI_INFO VIDEO_RPC_DEC_PRIVATEINFO_SEI_INFO;

struct VIDEO_RPC_VO_PRIVATEINFO_INPUT_PARAMETERS {
	enum ENUM_VIDEO_VO_PRIVATEINFO type;
	u_int data[16];
};
typedef struct VIDEO_RPC_VO_PRIVATEINFO_INPUT_PARAMETERS VIDEO_RPC_VO_PRIVATEINFO_INPUT_PARAMETERS;

struct VIDEO_RPC_VO_PRIVATEINFO_OUTPUT_PARAMETERS {
	u_int data[16];
};
typedef struct VIDEO_RPC_VO_PRIVATEINFO_OUTPUT_PARAMETERS VIDEO_RPC_VO_PRIVATEINFO_OUTPUT_PARAMETERS;

enum VIDEO_ENUM_PRIVATEINFO {
	ENUM_PRIVATEINFO_VIDEO_CHECK_SECURITY_ID = 0,
	ENUM_PRIVATEINFO_VIDEO_DISPLAY_RATIO = 1,
	ENUM_PRIVATEINFO_VIDEO_DISPLAY_X_Y_W_H = 2,
	ENUM_PRIVATEINFO_VIDEO_CVBS_POWER_OFF = 3,
	ENUM_PRIVATEINFO_VIDEO_VO_CAPTURE = 4,
	ENUM_PRIVATEINFO_VIDEO_VDAC_POWER_OFF = 5,
	ENUM_PRIVATEINFO_HDMI_RANGE_SETTING = 6,
	ENUM_PRIVATEINFO_VO_DISPLAY_RATIO_TYPE = 7,
	ENUM_PRIVATEINFO_MIXDD_DISPLAY_RATIO = 8,
	ENUM_PRIVATEINFO_MIX1_DISPLAY_RATIO = 9,
	ENUM_PRIVATEINFO_MIX2_DISPLAY_RATIO = 10,
	ENUM_PRIVATEINFO_MIX2_DISPLAY_XY = 11,
	ENUM_PRIVATEINFO_MIXDD_DISPLAY_XY = 12,
	ENUM_PRIVATEINFO_V2_DISPLAY_V1_FRAME = 13,
	ENUM_PRIVATEINFO_FORCE_EMBEDDED_SUB_DISPLAY_RATIO_FIXED = 14,
	ENUM_PRIVATEINFO_FORCE_VO_SUPER_RESOLUTION_DISABLE = 15,
};
typedef enum VIDEO_ENUM_PRIVATEINFO VIDEO_ENUM_PRIVATEINFO;

struct VIDEO_RPC_PRIVATEINFO_PARAMETERS {
	u_int instanceID;
	enum VIDEO_ENUM_PRIVATEINFO type;
	u_int privateInfo[16];
};
typedef struct VIDEO_RPC_PRIVATEINFO_PARAMETERS VIDEO_RPC_PRIVATEINFO_PARAMETERS;

struct VIDEO_RPC_PRIVATEINFO_RETURNVAL {
	u_int instanceID;
	u_int privateInfo[16];
};
typedef struct VIDEO_RPC_PRIVATEINFO_RETURNVAL VIDEO_RPC_PRIVATEINFO_RETURNVAL;

enum VO_3D_MODE_TYPE {
	VO_2D_MODE = 0,
	VO_3D_SIDE_BY_SIDE_HALF = 1,
	VO_3D_TOP_AND_BOTTOM = 2,
	VO_3D_FRAME_PACKING = 3,
};
typedef enum VO_3D_MODE_TYPE VO_3D_MODE_TYPE;

struct VO_SIZE {
	u_short w;
	u_short h;
};
typedef struct VO_SIZE VO_SIZE;

struct VIDEO_RPC_ENDOFSTREAM {
	u_int SP_instanceID;
};
typedef struct VIDEO_RPC_ENDOFSTREAM VIDEO_RPC_ENDOFSTREAM;

struct VIDEO_RPC_DEC_JPEG_INFO {
	u_int instanceID;
	u_int destWidth;
	u_int destHeight;
	u_int eventID;
	u_int reserved2;
	u_int reserved3;
};
typedef struct VIDEO_RPC_DEC_JPEG_INFO VIDEO_RPC_DEC_JPEG_INFO;

struct VIDEO_RPC_VideoAssistant {
	u_int instanceID;
	VIDEO_ASSISTANT_ACTION action;
	VIDEO_ASSISTANT_TYPE assistantType;
	u_int reserved;
};
typedef struct VIDEO_RPC_VideoAssistant VIDEO_RPC_VideoAssistant;

struct VIDEO_RPC_DEC_JPEG_CTRL {
	u_int decodedWidth;
	u_int decodedHeight;
	u_int bitstreamEnd;
	u_int cancel;
	u_int status;
	u_int orgJpegWidth;
	u_int orgJpegHeight;
	u_int croppedJpegX;
	u_int croppedJpegY;
	u_int croppedJpegWidth;
	u_int croppedJpegHeight;
	enum VIDEO_JPEG_ROTATION orientation;
	u_int percentage;
	u_int reserved3;
	u_int JPEG_CTRL;
	u_int BITMAP_CTRL;
	u_int TIFF_CTRL;
	u_int GIF_CTRL;
	u_int PNG_CTRL;
	u_int Format1_CTRL;
	u_int Format2_CTRL;
	u_int Format3_CTRL;
	u_int bitstreamStart;
	u_int outInstanceID;
	enum VIDEO_IMG_TYPE imgType;
	u_int pScratchBase;
	u_int scratchSize;
};
typedef struct VIDEO_RPC_DEC_JPEG_CTRL VIDEO_RPC_DEC_JPEG_CTRL;

struct VIDEO_RPC_DEC_ERROR_INFO {
	u_int instanceID;
	u_int errCode;
};
typedef struct VIDEO_RPC_DEC_ERROR_INFO VIDEO_RPC_DEC_ERROR_INFO;

struct VIDEO_RPC_ENC_AUTOPAUSE {
	u_int instanceID;
	u_char isFinish;
};
typedef struct VIDEO_RPC_ENC_AUTOPAUSE VIDEO_RPC_ENC_AUTOPAUSE;

struct VIDEO_RPC_FLASH_FRAME_INFO {
	short LuBufID;
	short ChBufID;
	u_int pic_width;
	u_int pic_height;
	int Lu_width_scale;
	int Lu_init_page;
	int Lu_x_offset;
	int Lu_y_offset;
	int Ch_width_scale;
	int Ch_init_page;
	int Ch_x_offset;
	int Ch_y_offset;
	u_int context;
	u_int PTShigh;
	u_int PTSlow;
	u_int reserved0;
	u_int reserved1;
};
typedef struct VIDEO_RPC_FLASH_FRAME_INFO VIDEO_RPC_FLASH_FRAME_INFO;

struct VIDEO_RPC_DEC_MESSAGE {
	u_int instanceID;
	u_int message;
};
typedef struct VIDEO_RPC_DEC_MESSAGE VIDEO_RPC_DEC_MESSAGE;

struct VIDEO_INIT_DATA {
	enum TVE_BOARD_TYPE boardType;
};
typedef struct VIDEO_INIT_DATA VIDEO_INIT_DATA;

struct VIDEO_CONFIG_DATA {
	enum VIDEO_BUFFER_TYPE videoBufferType;
};
typedef struct VIDEO_CONFIG_DATA VIDEO_CONFIG_DATA;

struct VIDEO_RPC_INSTANCE {
	enum VIDEO_VF_TYPE type;
};
typedef struct VIDEO_RPC_INSTANCE VIDEO_RPC_INSTANCE;

struct VIDEO_RPC_SET_REFCLOCK {
	u_int instanceID;
	u_int pRefClock;
};
typedef struct VIDEO_RPC_SET_REFCLOCK VIDEO_RPC_SET_REFCLOCK;

struct VIDEO_RPC_REQUEST_BUFFER {
	u_int width;
	u_int height;
};
typedef struct VIDEO_RPC_REQUEST_BUFFER VIDEO_RPC_REQUEST_BUFFER;

struct VIDEO_RPC_FILL_BUFFER {
	u_int width;
	u_int height;
	u_int Y_bufID;
	u_int C_bufID;
	struct VO_RECTANGLE fillWin;
	u_int lumaValue;
	u_int chromaValue;
};
typedef struct VIDEO_RPC_FILL_BUFFER VIDEO_RPC_FILL_BUFFER;

struct VIDEO_RPC_LOW_DELAY {
	enum VIDEO_LOW_DELAY mode;
	u_int reserved;
};
typedef struct VIDEO_RPC_LOW_DELAY VIDEO_RPC_LOW_DELAY;

struct VIDEO_RPC_CHANNEL_LOW_DELAY {
	enum VIDEO_LOW_DELAY mode;
	u_int instanceId;
	u_int reserved[6];
};
typedef struct VIDEO_RPC_CHANNEL_LOW_DELAY VIDEO_RPC_CHANNEL_LOW_DELAY;

struct VIDEO_RPC_VOUT_SET_VIDEO_STANDARD {
	enum VO_STANDARD standard;
	u_char enProg;
	u_char enDIF;
	u_char enCompRGB;
	enum VO_PEDESTAL_TYPE pedType;
};
typedef struct VIDEO_RPC_VOUT_SET_VIDEO_STANDARD VIDEO_RPC_VOUT_SET_VIDEO_STANDARD;

struct VIDEO_RPC_VOUT_CONFIG_VIDEO_STANDARD {
	enum VO_STANDARD standard;
	u_char enProg;
	u_char enDIF;
	u_char enCompRGB;
	enum VO_PEDESTAL_TYPE pedType;
	u_int dataInt0;
	u_int dataInt1;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_VIDEO_STANDARD VIDEO_RPC_VOUT_CONFIG_VIDEO_STANDARD;

struct VIDEO_RPC_VOUT_SET_HDMI {
	enum VO_HDMI_MODE hdmiMode;
	enum VO_HDMI_AUDIO_SAMPLE_FREQ audioSampleFreq;
	u_char audioChannelCount;
};
typedef struct VIDEO_RPC_VOUT_SET_HDMI VIDEO_RPC_VOUT_SET_HDMI;

struct VIDEO_RPC_VOUT_CONFIG_HDMI {
	enum VO_HDMI_MODE hdmiMode;
	enum VO_HDMI_AUDIO_SAMPLE_FREQ audioSampleFreq;
	enum VO_HDMI_COLOR_FMT colorFmt;
	u_char audioChannelCount;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_HDMI VIDEO_RPC_VOUT_CONFIG_HDMI;

struct VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME {
	enum VO_HDMI_MODE hdmiMode;
	enum VO_HDMI_AUDIO_SAMPLE_FREQ audioSampleFreq;
	u_char audioChannelCount;
	u_char dataByte1;
	u_char dataByte2;
	u_char dataByte3;
	u_char dataByte4;
	u_char dataByte5;
	u_int dataInt0;
	u_int hdmi2p0_feature;
	enum VO_HDMI_OFF_MODE hdmi_off_mode;
	enum VO_HDR_CTRL_MODE hdr_ctrl_mode;
	u_int reserved4;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME;

struct VIDEO_RPC_VOUT_CONFIG_TV_SYSTEM {
	enum VO_INTERFACE_TYPE interfaceType;
	struct VIDEO_RPC_VOUT_CONFIG_VIDEO_STANDARD videoInfo;
	struct VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME hdmiInfo;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_TV_SYSTEM VIDEO_RPC_VOUT_CONFIG_TV_SYSTEM;

struct VIDEO_RPC_VOUT_ANAGLYPH_CONVERSION {
	u_char enable;
	u_char switchSrcEye;
	enum VO_3D_SOURCE_FORMAT srcFormat;
};
typedef struct VIDEO_RPC_VOUT_ANAGLYPH_CONVERSION VIDEO_RPC_VOUT_ANAGLYPH_CONVERSION;

struct VIDEO_RPC_VOUT_VIDEO_ROTATE {
	u_char enable;
	enum VO_VIDEO_PLANE videoPlane;
	enum VIDEO_JPEG_ROTATION rotateAngle;
};
typedef struct VIDEO_RPC_VOUT_VIDEO_ROTATE VIDEO_RPC_VOUT_VIDEO_ROTATE;

struct VIDEO_RPC_VOUT_CONFIG_MACROVISION {
	u_char dataByte1;
	u_char dataByte2;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_MACROVISION VIDEO_RPC_VOUT_CONFIG_MACROVISION;

struct VIDEO_RPC_VOUT_SET_BKGRND {
	struct VO_COLOR bgColor;
	u_char bgEnable;
};
typedef struct VIDEO_RPC_VOUT_SET_BKGRND VIDEO_RPC_VOUT_SET_BKGRND;

struct VIDEO_RPC_VOUT_SET_MIXER_ORDER {
	u_char pic;
	u_char dd;
	u_char v1;
	u_char sub1;
	u_char v2;
	u_char osd1;
	u_char osd2;
	u_char csr;
	u_char sub2;
	u_char v3;
	u_char reserved[6];
};
typedef struct VIDEO_RPC_VOUT_SET_MIXER_ORDER VIDEO_RPC_VOUT_SET_MIXER_ORDER;

struct VIDEO_RPC_VOUT_CONFIGURE_PLANE_MIXER {
	u_int instanceID;
	enum VO_VIDEO_PLANE targetPlane;
	enum VO_VIDEO_PLANE mixOrder[8];
	struct PLANE_MIXER_WIN win[8];
	u_int dataIn0;
	u_int dataIn1;
	u_int dataIn2;
};
typedef struct VIDEO_RPC_VOUT_CONFIGURE_PLANE_MIXER VIDEO_RPC_VOUT_CONFIGURE_PLANE_MIXER;

struct VIDEO_RPC_VOUT_CONFIGURE_3D_OFFSET {
	u_int instanceID;
	enum VO_VIDEO_PLANE targetPlane;
	u_int delta_offset;
	u_int dataIn0;
	u_int dataIn1;
	u_int dataIn2;
};
typedef struct VIDEO_RPC_VOUT_CONFIGURE_3D_OFFSET VIDEO_RPC_VOUT_CONFIGURE_3D_OFFSET;

struct VIDEO_RPC_VOUT_SET_CC {
	u_char enCC_odd;
	u_char enCC_even;
};
typedef struct VIDEO_RPC_VOUT_SET_CC VIDEO_RPC_VOUT_SET_CC;

struct VIDEO_RPC_VOUT_SET_APS {
	u_char enExt;
	enum VO_VBI_APS APS;
};
typedef struct VIDEO_RPC_VOUT_SET_APS VIDEO_RPC_VOUT_SET_APS;

struct VIDEO_RPC_VOUT_SET_COPY_MODE {
	u_char enExt;
	enum VO_VBI_COPY_MODE copyMode;
};
typedef struct VIDEO_RPC_VOUT_SET_COPY_MODE VIDEO_RPC_VOUT_SET_COPY_MODE;

struct VIDEO_RPC_VOUT_SET_AR {
	u_char enExt;
	enum VO_VBI_ASPECT_RATIO aspectRatio;
};
typedef struct VIDEO_RPC_VOUT_SET_AR VIDEO_RPC_VOUT_SET_AR;

struct VIDEO_RPC_VOUT_CONFIG_DISP_WIN {
	enum VO_VIDEO_PLANE videoPlane;
	struct VO_RECTANGLE videoWin;
	struct VO_RECTANGLE borderWin;
	struct VO_COLOR borderColor;
	u_char enBorder;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_DISP_WIN VIDEO_RPC_VOUT_CONFIG_DISP_WIN;

struct VIDEO_RPC_VOUT_CONFIG_DISP_WIN_ZOOM_WIN {
	enum VO_VIDEO_PLANE videoPlane;
	struct VO_RECTANGLE videoWin;
	struct VO_RECTANGLE srcZoomWin;
	struct VO_RECTANGLE borderWin;
	struct VO_COLOR borderColor;
	u_char enBorder;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_DISP_WIN_ZOOM_WIN VIDEO_RPC_VOUT_CONFIG_DISP_WIN_ZOOM_WIN;

struct VIDEO_RPC_VOUT_CONFIG_DISP_WIN_DISP_ZOOM_WIN {
	enum VO_VIDEO_PLANE videoPlane;
	struct VO_RECTANGLE videoWin;
	struct VO_RECTANGLE dispZoomWin;
	struct VO_RECTANGLE borderWin;
	struct VO_COLOR borderColor;
	u_char enBorder;
	u_int reserved[10];
};
typedef struct VIDEO_RPC_VOUT_CONFIG_DISP_WIN_DISP_ZOOM_WIN VIDEO_RPC_VOUT_CONFIG_DISP_WIN_DISP_ZOOM_WIN;
struct VIDEO_RPC_VOUT_DISP_WIN_ANIMATION {
	enum VO_VIDEO_PLANE videoPlane;
	struct VO_RECTANGLE videoWinEnd;
	struct VO_RECTANGLE borderWin;
	struct VO_COLOR borderColor;
	u_char enBorder;
	u_int time;
};
typedef struct VIDEO_RPC_VOUT_DISP_WIN_ANIMATION VIDEO_RPC_VOUT_DISP_WIN_ANIMATION;

struct VIDEO_RPC_VOUT_SET_VIDEO_SHARPNESS {
	u_char enable;
	u_char sharpness;
	enum VO_VIDEO_PLANE videoPlane;
	u_int reserved[6];
};
typedef struct VIDEO_RPC_VOUT_SET_VIDEO_SHARPNESS VIDEO_RPC_VOUT_SET_VIDEO_SHARPNESS;

struct VIDEO_RPC_VOUT_SET_RESCALE_MODE {
	enum VO_VIDEO_PLANE videoPlane;
	enum VO_RESCALE_MODE rescaleMode;
	struct VO_RECTANGLE rescaleWindow;
	u_char delayExec;
};
typedef struct VIDEO_RPC_VOUT_SET_RESCALE_MODE VIDEO_RPC_VOUT_SET_RESCALE_MODE;

struct VIDEO_RPC_VOUT_SET_DEINT_MODE {
	enum VO_VIDEO_PLANE videoPlane;
	enum VO_DEINT_MODE deintMode;
};
typedef struct VIDEO_RPC_VOUT_SET_DEINT_MODE VIDEO_RPC_VOUT_SET_DEINT_MODE;

struct VIDEO_RPC_VOUT_SET_3D_TO_2D_MODE {
	enum VO_VIDEO_PLANE videoPlane;
	enum VO_3D_MODE_TYPE srcformat3D;
	int reserved[3];
};
typedef struct VIDEO_RPC_VOUT_SET_3D_TO_2D_MODE VIDEO_RPC_VOUT_SET_3D_TO_2D_MODE;
struct VIDEO_RPC_VOUT_ZOOM {
	enum VO_VIDEO_PLANE videoPlane;
	struct VO_RECTANGLE zoomWin;
};
typedef struct VIDEO_RPC_VOUT_ZOOM VIDEO_RPC_VOUT_ZOOM;

struct VIDEO_RPC_VOUT_PAN_ZOOM {
	enum VO_VIDEO_PLANE videoPlane;
	struct VO_RECTANGLE zoomWinStart;
	struct VO_RECTANGLE zoomWinEnd;
	u_short time;
};
typedef struct VIDEO_RPC_VOUT_PAN_ZOOM VIDEO_RPC_VOUT_PAN_ZOOM;

struct VIDEO_RPC_VOUT_TRANSPARENCY {
	enum VO_VIDEO_PLANE videoPlane;
	u_short alphaStart;
	u_short alphaEnd;
	u_short time;
};
typedef struct VIDEO_RPC_VOUT_TRANSPARENCY VIDEO_RPC_VOUT_TRANSPARENCY;

struct VIDEO_RPC_VOUT_ACTUAL_ZOOM {
	enum VO_VIDEO_PLANE videoPlane;
	enum VO_ZOOM_TYPE type;
};
typedef struct VIDEO_RPC_VOUT_ACTUAL_ZOOM VIDEO_RPC_VOUT_ACTUAL_ZOOM;

struct VIDEO_RPC_VOUT_CONFIG_OSD {
	enum VO_OSD_LPF_TYPE lpfType;
	short RGB2YUVcoeff[12];
};
typedef struct VIDEO_RPC_VOUT_CONFIG_OSD VIDEO_RPC_VOUT_CONFIG_OSD;

struct VIDEO_RPC_VOUT_CONFIG_OSD_PALETTE {
	u_char paletteIndex;
	u_int pPalette;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_OSD_PALETTE VIDEO_RPC_VOUT_CONFIG_OSD_PALETTE;

struct VIDEO_RPC_VOUT_CREATE_OSD_WIN {
	struct VO_RECTANGLE winPos;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	int colorKey;
	u_char alpha;
};
typedef struct VIDEO_RPC_VOUT_CREATE_OSD_WIN VIDEO_RPC_VOUT_CREATE_OSD_WIN;

struct VIDEO_RPC_VOUT_SET_OSD_WIN_PALETTE {
	u_char winID;
	u_char paletteIndex;
};
typedef struct VIDEO_RPC_VOUT_SET_OSD_WIN_PALETTE VIDEO_RPC_VOUT_SET_OSD_WIN_PALETTE;

struct VIDEO_RPC_VOUT_MODIFY_OSD_WIN {
	u_char winID;
	u_char reqMask;
	struct VO_RECTANGLE winPos;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	int colorKey;
	u_char alpha;
	u_short startX;
	u_short startY;
	u_short imgPitch;
	u_int pImage;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_MODIFY_OSD_WIN VIDEO_RPC_VOUT_MODIFY_OSD_WIN;

struct VIDEO_RPC_VOUT_DRAW_OSD_WIN {
	u_short winID;
	u_short startX;
	u_short startY;
	u_short imgPitch;
	u_int pImage;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_DRAW_OSD_WIN VIDEO_RPC_VOUT_DRAW_OSD_WIN;

struct VIDEO_RPC_VOUT_HIDE_OSD_WIN {
	u_short winID;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_HIDE_OSD_WIN VIDEO_RPC_VOUT_HIDE_OSD_WIN;

struct VIDEO_RPC_VOUT_DELETE_OSD_WIN {
	u_short winID;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_DELETE_OSD_WIN VIDEO_RPC_VOUT_DELETE_OSD_WIN;

struct VIDEO_RPC_VOUT_CONFIG_OSD_CANVAS {
	struct VO_RECTANGLE srcWin;
	struct VO_RECTANGLE dispWin;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_OSD_CANVAS VIDEO_RPC_VOUT_CONFIG_OSD_CANVAS;

struct VIDEO_RPC_VOUT_CONFIG_CURSOR {
	char alpha;
	char colorKey;
	struct VO_COLOR colorMap[4];
	enum VO_OSD_LPF_TYPE lpfType;
	u_int pCursorImg;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_CURSOR VIDEO_RPC_VOUT_CONFIG_CURSOR;

struct VIDEO_RPC_VOUT_CONFIG_MARS_CURSOR {
	u_short width;
	u_short height;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	u_char paletteIndex;
	u_int pCursorImg;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_MARS_CURSOR VIDEO_RPC_VOUT_CONFIG_MARS_CURSOR;

struct VIDEO_RPC_VOUT_DRAW_CURSOR {
	u_short x;
	u_short y;
};
typedef struct VIDEO_RPC_VOUT_DRAW_CURSOR VIDEO_RPC_VOUT_DRAW_CURSOR;

struct VIDEO_RPC_VOUT_CONFIG_COLOR_MATRIX {
	short ColorMatrixCoeff[12];
};
typedef struct VIDEO_RPC_VOUT_CONFIG_COLOR_MATRIX VIDEO_RPC_VOUT_CONFIG_COLOR_MATRIX;

struct VIDEO_RPC_VOUT_CONFIG_GRAPHIC_CANVAS {
	enum VO_GRAPHIC_PLANE plane;
	struct VO_RECTANGLE srcWin;
	struct VO_RECTANGLE dispWin;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_GRAPHIC_CANVAS VIDEO_RPC_VOUT_CONFIG_GRAPHIC_CANVAS;

struct VIDEO_RPC_VOUT_CREATE_GRAPHIC_WIN {
	enum VO_GRAPHIC_PLANE plane;
	struct VO_RECTANGLE winPos;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	enum VO_OSD_RGB_ORDER rgbOrder;
	int colorKey;
	u_char alpha;
	u_char reserved;
};
typedef struct VIDEO_RPC_VOUT_CREATE_GRAPHIC_WIN VIDEO_RPC_VOUT_CREATE_GRAPHIC_WIN;

struct VIDEO_RPC_VOUT_MODIFY_GRAPHIC_WIN {
	enum VO_GRAPHIC_PLANE plane;
	u_char winID;
	u_char reqMask;
	struct VO_RECTANGLE winPos;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	enum VO_OSD_RGB_ORDER rgbOrder;
	int colorKey;
	u_char alpha;
	enum VO_GRAPHIC_STORAGE_MODE storageMode;
	u_char paletteIndex;
	u_char compressed;
	u_char interlace_Frame;
	u_char bottomField;
	u_short startX[4];
	u_short startY[4];
	u_short imgPitch[4];
	u_int pImage[4];
	u_char reserved;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_MODIFY_GRAPHIC_WIN VIDEO_RPC_VOUT_MODIFY_GRAPHIC_WIN;

struct VIDEO_RPC_VOUT_DRAW_GRAPHIC_WIN {
	enum VO_GRAPHIC_PLANE plane;
	u_short winID;
	enum VO_GRAPHIC_STORAGE_MODE storageMode;
	u_char paletteIndex;
	u_char compressed;
	u_char interlace_Frame;
	u_char bottomField;
	u_short startX[4];
	u_short startY[4];
	u_short imgPitch[4];
	u_int pImage[4];
	u_char reserved;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_DRAW_GRAPHIC_WIN VIDEO_RPC_VOUT_DRAW_GRAPHIC_WIN;

struct VIDEO_RPC_VOUT_HIDE_GRAPHIC_WIN {
	enum VO_GRAPHIC_PLANE plane;
	u_short winID;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_HIDE_GRAPHIC_WIN VIDEO_RPC_VOUT_HIDE_GRAPHIC_WIN;

struct VIDEO_RPC_VOUT_DELETE_GRAPHIC_WIN {
	enum VO_GRAPHIC_PLANE plane;
	u_short winID;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_DELETE_GRAPHIC_WIN VIDEO_RPC_VOUT_DELETE_GRAPHIC_WIN;

struct VIDEO_RPC_VOUT_DISPLAY_GRAPHIC_WIN {
	u_int x;
	u_int y;
	u_int width;
	u_int height;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	enum VO_OSD_RGB_ORDER rgbOrder;
	u_int colorKey;
	u_int alpha;
	enum VO_GRAPHIC_STORAGE_MODE storageMode;
	u_int paletteIndex;
	u_int compressed;
	u_int interlace_Frame;
	u_int bottomField;
	u_int startX[4];
	u_int startY[4];
	u_int imgPitch[4];
	u_int pImage[4];
	u_int reserved0;
	u_int reserved1;
};
typedef struct VIDEO_RPC_VOUT_DISPLAY_GRAPHIC_WIN VIDEO_RPC_VOUT_DISPLAY_GRAPHIC_WIN;

struct VIDEO_RPC_VOUT_DISPLAY_GRAPHIC {
	enum VO_GRAPHIC_PLANE plane;
	u_char osdNum;
	u_int pGraphic;
};
typedef struct VIDEO_RPC_VOUT_DISPLAY_GRAPHIC VIDEO_RPC_VOUT_DISPLAY_GRAPHIC;

struct VIDEO_RPC_VOUT_VIDEO_CAPTURE {
	enum VO_OSD_COLOR_FORMAT colorFmt;
	u_int pImage;
	u_short imgPitch;
	u_short startX;
	u_short startY;
	u_short width;
	u_short height;
};
typedef struct VIDEO_RPC_VOUT_VIDEO_CAPTURE VIDEO_RPC_VOUT_VIDEO_CAPTURE;

struct VIDEO_RPC_VOUT_QUERY_DISP_WIN_IN {
	enum VO_VIDEO_PLANE plane;
};
typedef struct VIDEO_RPC_VOUT_QUERY_DISP_WIN_IN VIDEO_RPC_VOUT_QUERY_DISP_WIN_IN;

struct VIDEO_RPC_VOUT_QUERY_DISP_WIN_OUT {
	short result;
	enum VO_VIDEO_PLANE plane;
	u_short numWin;
	u_short zOrder;
	struct VO_RECTANGLE configWin;
	struct VO_RECTANGLE contentWin;
	short deintMode;
	u_short pitch;
	enum VO_OSD_COLOR_FORMAT colorType;
	enum VO_OSD_RGB_ORDER RGBOrder;
	enum VO_3D_MODE_TYPE format3D;
	struct VO_SIZE mix1_size;
	enum VO_STANDARD standard;
	u_char enProg;
	u_char reserved1;
	u_short reserved2;
	struct VO_SIZE mix2_size;
};
typedef struct VIDEO_RPC_VOUT_QUERY_DISP_WIN_OUT VIDEO_RPC_VOUT_QUERY_DISP_WIN_OUT;

struct VIDEO_RPC_VOUT_QUERY_DISP_WIN_OUT_NEW {
	short result;
	enum VO_VIDEO_PLANE plane;
	u_short numWin;
	u_short zOrder;
	struct VO_RECTANGLE configWin;
	struct VO_RECTANGLE contentWin;
	short deintMode;
	u_short pitch;
	enum VO_OSD_COLOR_FORMAT colorType;
	enum VO_OSD_RGB_ORDER RGBOrder;
	enum VO_3D_MODE_TYPE format3D;
	struct VO_SIZE mix1_size;
	enum VO_STANDARD standard;
	u_char enProg;
	u_char cvbs_off;
	u_short reserved2;
	struct VO_RECTANGLE srcZoomWin;
	struct VO_SIZE mix2_size;
	struct VO_SIZE mixdd_size;
	u_int wb_usedFormat;
	u_int reserved3[7];
};
typedef struct VIDEO_RPC_VOUT_QUERY_DISP_WIN_OUT_NEW VIDEO_RPC_VOUT_QUERY_DISP_WIN_OUT_NEW;

struct VIDEO_RPC_VOUT_QUERY_GRAPHIC_WIN_INFO_IN {
	enum VO_VIDEO_PLANE plane;
	u_short winID;
};
typedef struct VIDEO_RPC_VOUT_QUERY_GRAPHIC_WIN_INFO_IN VIDEO_RPC_VOUT_QUERY_GRAPHIC_WIN_INFO_IN;

struct VIDEO_RPC_VOUT_QUERY_GRAPHIC_WIN_INFO_OUT {
	short result;
	enum VO_VIDEO_PLANE plane;
	struct VO_RECTANGLE srcWin;
	u_short hidden;
	enum VO_OSD_COLOR_FORMAT colorType;
	enum VO_OSD_RGB_ORDER RGBOrder;
	u_int reserved1;
	u_int reserved2;
	u_int reserved3;
	u_int reserved4;
};
typedef struct VIDEO_RPC_VOUT_QUERY_GRAPHIC_WIN_INFO_OUT VIDEO_RPC_VOUT_QUERY_GRAPHIC_WIN_INFO_OUT;

struct VIDEO_RPC_VOUT_SET_Q_PARAMETER {
	u_int depth;
	u_int init_frame;
	u_int jitter;
};
typedef struct VIDEO_RPC_VOUT_SET_Q_PARAMETER VIDEO_RPC_VOUT_SET_Q_PARAMETER;

enum ENUM_VIDEO_KEEP_CUR_SVP_TYPE {
	ENUM_VIDEO_KEEP_CUR_SVP_TYPE_GET_CUR = 0,
	ENUM_VIDEO_KEEP_CUR_SVP_TYPE_SET_CUR = 1,
};
typedef enum ENUM_VIDEO_KEEP_CUR_SVP_TYPE ENUM_VIDEO_KEEP_CUR_SVP_TYPE;

struct VIDEO_RPC_VOUT_KEEP_CURPIC_SVP {
	u_int result_ok;
	enum VO_VIDEO_PLANE plane;
	ENUM_VIDEO_KEEP_CUR_SVP_TYPE type;
	u_int lock;
	u_int Yaddr;
	u_int Caddr;
	u_int offsetTable_yaddr;
	u_int offsetTable_caddr;
	u_int Ysize;
	u_int Csize;
	u_int reserved[6];
};
typedef struct VIDEO_RPC_VOUT_KEEP_CURPIC_SVP VIDEO_RPC_VOUT_KEEP_CURPIC_SVP;

struct VIDEO_RPC_VOUT_KEEP_V1_CURPIC {
	u_int ptr;
	u_int lock;
	u_int offsetTable_yaddr;
	u_int offsetTable_caddr;
	u_int offsetTable_ysize;
	u_int offsetTable_csize;
};
typedef struct VIDEO_RPC_VOUT_KEEP_V1_CURPIC VIDEO_RPC_VOUT_KEEP_V1_CURPIC;

struct VIDEO_RPC_VOUT_KEEP_CURPIC {
	enum VO_VIDEO_PLANE plane;
	u_int ptr;
	u_int lock;
	u_int offsetTable_yaddr;
	u_int offsetTable_caddr;
	u_int offsetTable_ysize;
	u_int offsetTable_csize;
	u_int reserved[8];
};
typedef struct VIDEO_RPC_VOUT_KEEP_CURPIC VIDEO_RPC_VOUT_KEEP_CURPIC;

enum VO_PLANE_MIXER_EXT {
	VO_MIXER_OWNER_MASK = 65536,
};
typedef enum VO_PLANE_MIXER_EXT VO_PLANE_MIXER_EXT;
struct VIDEO_RPC_VO_FILTER_DISPLAY {
	u_int instanceID;
	enum VO_VIDEO_PLANE videoPlane;
	u_char zeroBuffer;
	u_char realTimeSrc;
};
typedef struct VIDEO_RPC_VO_FILTER_DISPLAY VIDEO_RPC_VO_FILTER_DISPLAY;

struct VIDEO_RPC_VO_FILTER_HIDE {
	u_int instanceID;
	enum VO_VIDEO_PLANE videoPlane;
};
typedef struct VIDEO_RPC_VO_FILTER_HIDE VIDEO_RPC_VO_FILTER_HIDE;

struct VIDEO_RPC_VO_FILTER_DISP_BD_COLOR {
	u_int instanceID;
	enum VO_VIDEO_PLANE videoPlane;
};
typedef struct VIDEO_RPC_VO_FILTER_DISP_BD_COLOR VIDEO_RPC_VO_FILTER_DISP_BD_COLOR;

struct VIDEO_RPC_VO_FILTER_SET_SPEED {
	u_int instanceID;
	u_int speed;
};
typedef struct VIDEO_RPC_VO_FILTER_SET_SPEED VIDEO_RPC_VO_FILTER_SET_SPEED;

struct VIDEO_RPC_VO_FILTER_SHOW_STILL_PIC {
	u_int instanceID;
	u_int lumaAddr;
	u_int lumaPitch;
	u_int chromaAddr;
	u_int chromaPitch;
	u_int width;
	u_int height;
};
typedef struct VIDEO_RPC_VO_FILTER_SHOW_STILL_PIC VIDEO_RPC_VO_FILTER_SHOW_STILL_PIC;

struct VIDEO_RPC_VO_FILTER_FILL_VIDEO_BORDER {
	u_int instanceID;
	u_int border;
	u_int num_pixels;
	struct VO_COLOR fillColor;
};
typedef struct VIDEO_RPC_VO_FILTER_FILL_VIDEO_BORDER VIDEO_RPC_VO_FILTER_FILL_VIDEO_BORDER;

struct VIDEO_RPC_VO_FILTER_SET_FAST_DISPLAY {
	u_int instanceID;
	u_char enFastDisplay;
	u_char count;
};
typedef struct VIDEO_RPC_VO_FILTER_SET_FAST_DISPLAY VIDEO_RPC_VO_FILTER_SET_FAST_DISPLAY;

struct VIDEO_RPC_VO_FILTER_DESTROY_TRANS_BUF {
	u_int instanceID;
	u_int reserved[4];
};
typedef struct VIDEO_RPC_VO_FILTER_DESTROY_TRANS_BUF VIDEO_RPC_VO_FILTER_DESTROY_TRANS_BUF;

struct VIDEO_RPC_VO_FILTER_CAPTURE {
	u_int instanceID;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	u_int pImage;
	u_short imgPitch;
	u_short startX;
	u_short startY;
	u_short width;
	u_short height;
	u_int pStretchBuf;
	u_int stretchBufSize;
	u_int pImage_C;
	u_short imgPitch_C;
};
typedef struct VIDEO_RPC_VO_FILTER_CAPTURE VIDEO_RPC_VO_FILTER_CAPTURE;

struct VIDEO_RPC_DEBUG_MEMORY {
	u_int videoFirmwareVersion;
};
typedef struct VIDEO_RPC_DEBUG_MEMORY VIDEO_RPC_DEBUG_MEMORY;

struct VIDEO_RPC_YUYV_TO_RGB {
	u_int yuyv_addr;
	u_int rgb_addr;
	u_int width;
	u_int height;
	u_int imgPitch;
	enum YUV_FMT yuv_fmt;
	enum IMG_TARGET_FORMAT rgb_fmt;
};
typedef struct VIDEO_RPC_YUYV_TO_RGB VIDEO_RPC_YUYV_TO_RGB;

struct VIDEO_RPC_SUBPIC_DEC_ENABLE_SUBPIC {
	u_int instanceID;
	u_char alwaysOnTop;
};
typedef struct VIDEO_RPC_SUBPIC_DEC_ENABLE_SUBPIC VIDEO_RPC_SUBPIC_DEC_ENABLE_SUBPIC;

struct VIDEO_RPC_JPEG_DEC {
	u_int colorFormat;
	u_int pBitstreamRB;
	u_int pTargetLuma;
	u_int pTargetChroma;
	u_int pitch;
	u_int targetRectX;
	u_int targetRectY;
	u_int targetRectWidth;
	u_int targetRectHeight;
	u_int centerToTargetRect;
	enum VIDEO_JPEG_ROTATION rotation;
	u_int srcRectAlignmentRatioX;
	u_int srcRectAlignmentRatioY;
	u_int srcRectZoomFactor;
	u_int initOption;
	u_int pSharedJpegDecCtrl;
	u_int useWholePictureOnly;
	u_int ScaleUpToRect;
	u_int FillBlackInRect;
	u_int SmoothLevel;
	enum VIDEO_JPEG_MIRROR mirror;
	u_int pTargetLuma_right;
	u_int pTargetChroma_right;
	u_int pLumaSeq;
	u_int pChromaSeq;
	u_short pitchYSeq;
	u_short pitchCSeq;
	u_short widthSeq;
	u_short heightSeq;
	u_int reserved;
};
typedef struct VIDEO_RPC_JPEG_DEC VIDEO_RPC_JPEG_DEC;

struct VIDEO_MEM_CHUNK {
	u_int address;
	u_int size;
};
typedef struct VIDEO_MEM_CHUNK VIDEO_MEM_CHUNK;

struct VIDEO_RPC_VIDEO_FREE_MEMORY {
	u_int numMemChunks;
	struct VIDEO_MEM_CHUNK memChunk[8];
};
typedef struct VIDEO_RPC_VIDEO_FREE_MEMORY VIDEO_RPC_VIDEO_FREE_MEMORY;

struct VIDEO_RPC_CONFIG_CHUNK {
	u_int configMode;
	u_int numofChunk;
};
typedef struct VIDEO_RPC_CONFIG_CHUNK VIDEO_RPC_CONFIG_CHUNK;

struct VIDEO_RPC_VO_QUERY_ARG {
	u_int pVOFilter;
	u_int queryWhat;
	u_int arg0;
	u_int arg1;
};
typedef struct VIDEO_RPC_VO_QUERY_ARG VIDEO_RPC_VO_QUERY_ARG;

enum ENUM_AUDIO_CODEC_KEY_TYPE {
	ENUM_AUDIO_CODEC_KEY_DISABLE = 0,
	ENUM_AUDIO_CODEC_KEY_ENABLE = 1,
};
typedef enum ENUM_AUDIO_CODEC_KEY_TYPE ENUM_AUDIO_CODEC_KEY_TYPE;

struct VIDEO_RPC_SP_CONFIG_RESOLUTION_2 {
	u_int pVOFilter;
	u_int spFullWidth;
	u_int spFullHeight;
};
typedef struct VIDEO_RPC_SP_CONFIG_RESOLUTION_2 VIDEO_RPC_SP_CONFIG_RESOLUTION_2;


enum ENUM_AUDIO_ON_SCPU_API_TYPE {
	ENUM_SCPU_API_NONE = 0,
};
typedef enum ENUM_AUDIO_ON_SCPU_API_TYPE ENUM_AUDIO_ON_SCPU_API_TYPE;

enum ENUM_DEINTFLAG {
	AUTODEINT = 0,
	FORCEDEINT = 1,
	FORCEPROGRESSIVE = 2,
};
typedef enum ENUM_DEINTFLAG ENUM_DEINTFLAG;


struct VIDEO_RPC_VOUT_SET_DIFLAG {
	enum ENUM_DEINTFLAG flag;
};
typedef struct VIDEO_RPC_VOUT_SET_DIFLAG VIDEO_RPC_VOUT_SET_DIFLAG;
enum ENUM_SDRFLAG {
	AUTO_SDR_HDR = 0,
	FORCE_HDR2SDR_ON = 1,
	FORCE_HDR2SDR_OFF = 2,
	FORCE_HDR_METADATA_OFF = 3,
	FORCE_SDR2HDR_OFF = 4,
	SDRFLAG_IGNORE = 255,
};
typedef enum ENUM_SDRFLAG ENUM_SDRFLAG;


struct VIDEO_RPC_VOUT_SDRFLAG {
	enum ENUM_SDRFLAG flag;
	int VideoSdrToHdrNits;
	int VideoSaturation;
	int VideoHDRtoSDRgma;
};
typedef struct VIDEO_RPC_VOUT_SDRFLAG VIDEO_RPC_VOUT_SDRFLAG;

struct VIDEO_RPC_VOUT_QUERYTVCAP {
	int isHDRtv;
	int reserved1;
	int reserved2;
	int reserved3;
};
typedef struct VIDEO_RPC_VOUT_QUERYTVCAP VIDEO_RPC_VOUT_QUERYTVCAP;

enum ENUM_WRITEBACK_TYPE {
	BACKGROUND_V1 = 0,
	BACKGROUND_V2 = 1,
	VSYNC_MIXER1 = 2,
	VSYNC_MIXER2 = 3,
	VSYNC_V1 = 4,
};
typedef enum ENUM_WRITEBACK_TYPE ENUM_WRITEBACK_TYPE;


struct VIDEO_RPC_CONFIG_WRITEBACK_FLOW {
	u_int instanceID;
	ENUM_WRITEBACK_TYPE type;
	u_int reserved[10];
};
typedef struct VIDEO_RPC_CONFIG_WRITEBACK_FLOW VIDEO_RPC_CONFIG_WRITEBACK_FLOW;


struct VIDEO_RPC_VOUT_SET_WATERMARK {
	u_char version_major;
	u_char version_minor;
	u_char watermark_on;
	u_char frequency_distance_lr[3];
	u_char frequency_distance[3];
	u_char background_embedding_on;
	u_short embedding_strength_threshold_10[12];
	u_short embedding_strength_threshold_bg_10[12];
	u_short embedding_strength_threshold_12[48];
	u_short embedding_strength_threshold_bg_12[48];
	u_short direction_max;
	char strength_multiply;
	u_int p_payload_symbols;
	u_char symbols_rows;
	u_char symbols_cols;
	u_char symbols_xpos;
	u_char symbols_ypos;
	u_char symbol_size;
	u_short spacing_vert;
	u_short spacing_horz;
	u_char symbol_scale_control;
};
typedef struct VIDEO_RPC_VOUT_SET_WATERMARK VIDEO_RPC_VOUT_SET_WATERMARK;

enum ENUM_MS_BS_OUTPUT_MODE {
	AUDIO_MS_BS_OUTPUT_MODE_NONE = 0,
	AUDIO_MS_BS_OUTPUT_MODE_DD = 1,
	AUDIO_MS_BS_OUTPUT_MODE_DDP = 2,
	AUDIO_MS_BS_OUTPUT_MODE_SIM_DDP_DD = 3,
	AUDIO_MS_BS_OUTPUT_MODE_MAT = 4,
};
typedef enum ENUM_MS_BS_OUTPUT_MODE ENUM_MS_BS_OUTPUT_MODE;

enum ENUM_MS_DAP_MODE {
	AUDIO_MS_DAP_NO_PROC = 0,
	AUDIO_MS_DAP_CONTENT_PROC = 1,
	AUDIO_MS_DAP_DEVICE_PROC = 2,
	AUDIO_MS_DAP_DEVICE_CONTENT_PROC = 3,
	AUDIO_MS_DAP_SI_PROC = 4,
};
typedef enum ENUM_MS_DAP_MODE ENUM_MS_DAP_MODE;

struct AUDIO_MS_DAP_PARAM {
	int drc_type;
	int dmx_type;
	int speaker_lfe;
	int pregain;
	int postgain;
	int systemgain;
	int surround_decoder_enable;
	int virtualizer_enable;
	int headphone_reverb;
	int speaker_angle;
	int speaker_start;
	int surround_boost;
	int mi_ieq_enable;
	int mi_dv_enable;
	int mi_de_enable;
	int mi_surround_enable;
	int calibration_boost;
	int leveler_amount;
	int leveler_input;
	int leveler_output;
	int leveler_enable;
	int leveler_ignore_il;
	int modeler_enable;
	int modeler_calibration;
	int ieq_enable;
	int ieq_amount;
	int ieq_nb_bands;
	int a_ieq_band_center[20];
	int a_ieq_band_target[20];
	int de_enable;
	int de_amount;
	int de_ducking;
	int volmax_boost;
	int eq_enable;
	int eq_nb_bands;
	int a_geq_band_center[20];
	int a_geq_band_target[20];
	int optimizer_enable;
	int optimizer_nb_bands;
	int a_opt_band_center_freq[20];
	int a_opt_band_gain0[20];
	int a_opt_band_gain1[20];
	int a_opt_band_gain2[20];
	int a_opt_band_gain3[20];
	int a_opt_band_gain4[20];
	int a_opt_band_gain5[20];
	int a_opt_band_gain6[20];
	int a_opt_band_gain7[20];
	int bass_enable;
	int bass_boost;
	int bass_cutoff;
	int bass_width;
	int reg_nb_bands;
	int a_reg_band_center[20];
	int a_reg_low_thresholds[20];
	int a_reg_high_thresholds[20];
	int a_reg_isolated_bands[20];
	int regulator_overdrive;
	int regulator_timbre;
	int regulator_distortion;
	int regulator_mode;
	int regulator_enable;
	int vb_mode;
	int vb_low_src_freq;
	int vb_high_src_freq;
	int vb_overall_gain;
	int vb_slope_gain;
	int vb_subgain[3];
	int vb_mix_low_freq;
	int vb_mix_high_freq;
};
typedef struct AUDIO_MS_DAP_PARAM AUDIO_MS_DAP_PARAM;

struct AUDIO_MS_CHANNEL_CONFIG {
	u_short acmod;
	u_short b_lfe_present;
	u_short dsurmod;
};
typedef struct AUDIO_MS_CHANNEL_CONFIG AUDIO_MS_CHANNEL_CONFIG;

struct AUDIO_MS_mix_fade_t {
	int target_attenuation;
	int duration_in_ms;
	int type;
};
typedef struct AUDIO_MS_mix_fade_t AUDIO_MS_mix_fade_t;

enum ENUM_MS_INPUT_TYPE {
	AUDIO_DOLBY_DIGITAL_PLUS = 0,
	AUDIO_HE_AAC = 1,
	AUDIO_AC4 = 2,
	AUDIO_EXTERNAL_PCM = 3,
};
typedef enum ENUM_MS_INPUT_TYPE ENUM_MS_INPUT_TYPE;

struct AUDIO_MS_USE_CASE {
	enum ENUM_MS_INPUT_TYPE input_type;
	int b_low_complexity;
	int b_dual_input;
	int b_file_playback;
	int b_restricted_ad;
	int b_mainonly;
	int b_system_sounds;
	int b_app_sounds;
	int b_eval_mode;
	enum ENUM_MS_BS_OUTPUT_MODE bs_output_mode;
	enum ENUM_MS_DAP_MODE dap_init_mode;
	int b_dap_vb_enable;
	int b_dual_main;
	int ac4_mode;
};
typedef struct AUDIO_MS_USE_CASE AUDIO_MS_USE_CASE;

struct AUDIO_MS_RUNTIME_PARAMS {
	short drc_cut_fac_mc;
	short drc_boost_fac_mc;
	short drc_cut_fac_2ch;
	short drc_boost_fac_2ch;
	short downmix_type;
	short drc_mode;
	short dual_mono;
	short cmix_lev;
	short smix_lev;
	short multichannel_enable;
	short associated_audio_mixing;
	short user_balance_adjustment;
	short mixer_balance_adjustment;
	short b_sys_app_sound_mixing;
	int extpcm_num_in_samples;
	AUDIO_MS_CHANNEL_CONFIG extpcm_in_channel_config;
	int sys_sounds_num_in_samples;
	AUDIO_MS_CHANNEL_CONFIG sys_sounds_channel_config;
	int app_sounds_num_in_samples;
	AUDIO_MS_CHANNEL_CONFIG app_sounds_channel_config;
	short heaac_mixing_mode;
	short heaac_default_dialnorm;
	short heaac_transport_format;
	short ddplus_associated_substream;
	short ddplus_outlfe;
	short ddplus_outmode;
	AUDIO_MS_DAP_PARAM dap_parameter;
	int b_mc_5_1_dmx;
	int frame;
	AUDIO_MS_mix_fade_t input_mix_input1;
	AUDIO_MS_mix_fade_t input_mix_input2;
	AUDIO_MS_mix_fade_t syssound_mix_input1;
	AUDIO_MS_mix_fade_t syssound_mix_input2;
	AUDIO_MS_mix_fade_t syssound_mix_input3;
	char ac4_1st_pref_lang[4];
	char ac4_2nd_pref_lang[4];
	int ac4_associated_type;
	int b_ac4_pref_assoc_type_over_lang;
	int ac4_de_gain;
	int ac4_pres_index[2];
	int ac4_prog_id_type;
	char ac4_program_identifier_string[32];
};
typedef struct AUDIO_MS_RUNTIME_PARAMS AUDIO_MS_RUNTIME_PARAMS;

struct AUDIO_MS_INIT_PARAMS {
	int pcm_out_chans[4];
	short verbose_mode;
	int wav_bit_depth;
	int max_num_channels;
	int b_high_risc_precision;
	short extpcm_compressor_profile;
	u_short heaac_allow_partial_feed;
	u_short dap_output_mode;
	int dbg_output_mask;
	int enc_chmod_locking_mode;
};
typedef struct AUDIO_MS_INIT_PARAMS AUDIO_MS_INIT_PARAMS;

struct AUDIO_RPC_MS_RUNTIME_CFG {
	u_int instanceID;
	u_int pinID;
	AUDIO_MS_RUNTIME_PARAMS args;
};
typedef struct AUDIO_RPC_MS_RUNTIME_CFG AUDIO_RPC_MS_RUNTIME_CFG;

struct AUDIO_RPC_MS_INIT_CFG {
	u_int instanceID;
	u_int pinID;
	AUDIO_MS_INIT_PARAMS init_args;
	AUDIO_MS_USE_CASE use_case;
};
typedef struct AUDIO_RPC_MS_INIT_CFG AUDIO_RPC_MS_INIT_CFG;

struct AUDIO_MS_PARAM_QUERY_S {
	u_int apply_start_sample;
	u_int id;
	u_int param_type;
	u_int num_bytes;
	u_int mem_pool_start_offset;
};
typedef struct AUDIO_MS_PARAM_QUERY_S AUDIO_MS_PARAM_QUERY_S;

struct AUDIO_MS_PARAM_UPDATE_S {
	u_int num_param_update;
	u_int mem_pool_total_used_offset;
	AUDIO_MS_PARAM_QUERY_S param_update_table[32];
	char static_mem_pool[820];
};
typedef struct AUDIO_MS_PARAM_UPDATE_S AUDIO_MS_PARAM_UPDATE_S;

struct AUDIO_RPC_MS_PARAM_UPDATE {
	u_int instanceID;
	u_int pinID;
	AUDIO_MS_PARAM_UPDATE_S args;
};
typedef struct AUDIO_RPC_MS_PARAM_UPDATE AUDIO_RPC_MS_PARAM_UPDATE;

struct AUDIO_RPC_MS_CLEAR_PARAM_UPDATE {
	u_int instanceID;
	u_int pinID;
	u_int doClear;
};
typedef struct AUDIO_RPC_MS_CLEAR_PARAM_UPDATE AUDIO_RPC_MS_CLEAR_PARAM_UPDATE;

enum ENUM_MS_HDMI_OUTPUT_TYPE {
	AUDIO_MS_HDMI_OUTPUT_TYPE_FULL = 0,
	AUDIO_MS_HDMI_OUTPUT_TYPE_ARC = 1,
	AUDIO_MS_HDMI_OUTPUT_TYPE_EARC = 2,
};
typedef enum ENUM_MS_HDMI_OUTPUT_TYPE ENUM_MS_HDMI_OUTPUT_TYPE;

struct AUDIO_MS_V2_3_DAP_PARAM {
	int drc_type;
	int speaker_lfe;
	int pregain;
	int postgain;
	int systemgain;
	int surround_decoder_enable;
	int virtualizer_mode;
	int speaker_angle;
	int surround_boost;
	int height_filter_mode;
	int mi_ieq_enable;
	int mi_dv_enable;
	int mi_de_enable;
	int mi_surround_enable;
	int calibration_boost;
	int leveler_amount;
	int leveler_input;
	int leveler_output;
	int leveler_setting;
	int modeler_enable;
	int modeler_calibration;
	int ieq_enable;
	int ieq_amount;
	int ieq_nb_bands;
	int a_ieq_band_center[20];
	int a_ieq_band_target[20];
	int de_enable;
	int de_amount;
	int volmax_boost;
	int eq_enable;
	int eq_nb_bands;
	int a_geq_band_center[20];
	int a_geq_band_target[20];
	int optimizer_enable;
	int optimizer_nb_bands;
	int a_opt_band_center_freq[20];
	int a_opt_band_gain0[20];
	int a_opt_band_gain1[20];
	int a_opt_band_gain2[20];
	int a_opt_band_gain3[20];
	int a_opt_band_gain4[20];
	int a_opt_band_gain5[20];
	int a_opt_band_gain6[20];
	int a_opt_band_gain7[20];
	int bass_enable;
	int bass_boost;
	int bass_cutoff;
	int bass_width;
	int reg_nb_bands;
	int a_reg_band_center[20];
	int a_reg_low_thresholds[20];
	int a_reg_high_thresholds[20];
	int a_reg_isolated_bands[20];
	int regulator_overdrive;
	int regulator_timbre;
	int regulator_distortion;
	int regulator_mode;
	int regulator_enable;
	int vb_mode;
	int vb_low_src_freq;
	int vb_high_src_freq;
	int vb_overall_gain;
	int vb_slope_gain;
	int vb_subgain[3];
	int vb_mix_low_freq;
	int vb_mix_high_freq;
};
typedef struct AUDIO_MS_V2_3_DAP_PARAM AUDIO_MS_V2_3_DAP_PARAM;

enum ENUM_MS_V2_3_INPUT_TYPE {
	AUDIO_MSV2_3_UNKNOWN = 0,
	AUDIO_MSV2_3_DOLBY_DIGITAL_PLUS = 1,
	AUDIO_MSV2_3_HE_AAC = 2,
	AUDIO_MSV2_3_AC4 = 3,
	AUDIO_MSV2_3_AUDIOFW_MAT = 4,
	AUDIO_MSV2_3_EXTERNAL_PCM = 5,
};
typedef enum ENUM_MS_V2_3_INPUT_TYPE ENUM_MS_V2_3_INPUT_TYPE;

struct AUDIO_MS_V2_3_USE_CASE {
	enum ENUM_MS_V2_3_INPUT_TYPE input_type;
	int b_ott_graph;
	int b_dual_input;
	int b_dual_main;
	int b_file_playback;
	int b_restricted_ad;
	int b_mainonly;
	int b_system_sounds;
	int b_app_sounds;
	int b_ui_sounds;
	int b_always_audio_out;
	int b_eval_mode;
	enum ENUM_MS_BS_OUTPUT_MODE bs_output_mode;
	enum ENUM_MS_DAP_MODE dap_init_mode;
	int b_headphone;
	int b_dap_vb_enable;
	int b_lfe_10db_boost_enable;
	int b_lfe_to_lr_enable;
	int lfe_to_lr_gain;
	int b_bass_extraction;
	int bass_extraction_cutoff_freq;
	int height_filter_mode;
	int dap_speaker_config;
	int b_dap_stereo_fill_heights;
	int dap_user_mix_matrix_len;
	int dap_user_mix_matrix0[8];
	int dap_user_mix_matrix1[8];
	int dap_user_mix_matrix2[8];
	int dap_user_mix_matrix3[8];
	int dap_user_mix_matrix4[8];
	int dap_user_mix_matrix5[8];
	int dap_user_mix_matrix6[8];
	int dap_user_mix_matrix7[8];
	int ac4_mode;
	int b_mlp_only;
	enum ENUM_MS_HDMI_OUTPUT_TYPE hdmi_output_type;
};
typedef struct AUDIO_MS_V2_3_USE_CASE AUDIO_MS_V2_3_USE_CASE;

struct AUDIO_MS_V2_3_RUNTIME_PARAMS {
	short drc_cut_fac_mc;
	short drc_boost_fac_mc;
	short drc_cut_fac_2ch;
	short drc_boost_fac_2ch;
	short downmix_type;
	short drc_mode;
	short cmix_lev;
	short smix_lev;
	short multichannel_enable;
	short associated_audio_mixing;
	short user_balance_adjustment;
	short b_sys_app_sound_mixing;
	AUDIO_MS_mix_fade_t input_mix_input1;
	AUDIO_MS_mix_fade_t input_mix_input2;
	AUDIO_MS_mix_fade_t input_mix_input3;
	AUDIO_MS_mix_fade_t syssound_mix_input1;
	AUDIO_MS_mix_fade_t syssound_mix_input2;
	AUDIO_MS_mix_fade_t syssound_mix_input3;
	int pause_flag;
	int extpcm_num_in_samples;
	AUDIO_MS_CHANNEL_CONFIG extpcm_in_channel_config;
	int sys_sounds_num_in_samples;
	AUDIO_MS_CHANNEL_CONFIG sys_sounds_channel_config;
	int app_sounds_num_in_samples;
	AUDIO_MS_CHANNEL_CONFIG app_sounds_channel_config;
	int ui_sounds_num_in_samples;
	AUDIO_MS_CHANNEL_CONFIG ui_sounds_channel_config;
	short heaac_default_dialnorm;
	short ddplus_outlfe;
	short ddplus_outmode;
	AUDIO_MS_V2_3_DAP_PARAM dap_parameter;
	char ac4_1st_pref_lang[4];
	char ac4_2nd_pref_lang[4];
	int ac4_associated_type;
	int b_ac4_pref_assoc_type_over_lang;
	int ac4_de_gain;
	int ac4_pres_group_index[2];
	int ac4_short_program_identifier;
	int b_bitstream_output_atmos_lock_enabled;
};
typedef struct AUDIO_MS_V2_3_RUNTIME_PARAMS AUDIO_MS_V2_3_RUNTIME_PARAMS;

struct AUDIO_MS_V2_3_INIT_PARAMS {
	short verbose_mode;
	int wav_bit_depth;
	int max_num_channels;
	int enc_chmod_locking_mode;
	int b_legacy_ddplus_out;
	int b_enable_5_1_dmx_mc2;
	int b_high_risc_precision;
	short extpcm_compressor_profile;
};
typedef struct AUDIO_MS_V2_3_INIT_PARAMS AUDIO_MS_V2_3_INIT_PARAMS;

enum ENUM_MS_V2_3_OUTPUT_TYPE {
	AUDIO_MSV2_3_DOWNMIX_OUT = 0,
	AUDIO_MSV2_3_VIRTUALIZER_OUT = 1,
	AUDIO_MSV2_3_DAP_SPEAKER_OUT = 2,
	AUDIO_MSV2_3_DAP_HEADPHONE_OUT = 3,
	AUDIO_MSV2_3_DD_OUT = 4,
	AUDIO_MSV2_3_DDP_OUT = 5,
	AUDIO_MSV2_3_MAT_OUT = 6,
};
typedef enum ENUM_MS_V2_3_OUTPUT_TYPE ENUM_MS_V2_3_OUTPUT_TYPE;

struct AUDIO_RPC_MS_V2_3_RUNTIME_CFG {
	u_int instanceID;
	AUDIO_MS_V2_3_RUNTIME_PARAMS args;
};
typedef struct AUDIO_RPC_MS_V2_3_RUNTIME_CFG AUDIO_RPC_MS_V2_3_RUNTIME_CFG;

struct AUDIO_RPC_MS_V2_3_INIT_CFG {
	u_int instanceID;
	u_int dummyInputMap;
	u_int outputPinMap;
	u_int inputPinMap;
	AUDIO_MS_V2_3_INIT_PARAMS init_args;
	AUDIO_MS_V2_3_USE_CASE use_case;
};
typedef struct AUDIO_RPC_MS_V2_3_INIT_CFG AUDIO_RPC_MS_V2_3_INIT_CFG;

struct VIDEO_RPC_VOUT_EDID_DATA {
	u_char et;
	u_char sm;
	u_char max_luminance;
	u_char max_frame_avg;
	u_char min_luminance;
	u_char red_green_lo;
	u_char black_white_lo;
	u_char red_x;
	u_char red_y;
	u_char green_x;
	u_char green_y;
	u_char blue_x;
	u_char blue_y;
	u_char white_x;
	u_char white_y;
	u_char color_space;
	u_char vcdb;
	u_char metadata_len;
	u_char dolby_len;
	u_char dolby_data[22];
	u_char hdr10_plus;
	u_char reserved[6];
};
typedef struct VIDEO_RPC_VOUT_EDID_DATA VIDEO_RPC_VOUT_EDID_DATA;
struct VIDEO_RPC_TRANSCODE_FLUSH_ICQ {
	u_int instanceID;
	u_int agentID_H;
	u_int agentID_L;
	u_int bufferID_H;
	u_int bufferID_L;
	u_int reserved[10];
};
typedef struct VIDEO_RPC_TRANSCODE_FLUSH_ICQ VIDEO_RPC_TRANSCODE_FLUSH_ICQ;

struct AUDIO_RPC_MONITERING_VARIABLE {
	int reserved[16];
};
typedef struct AUDIO_RPC_MONITERING_VARIABLE AUDIO_RPC_MONITERING_VARIABLE;

struct AUDIO_RPC_MONITERING_TOTAL_DEC_STATS {
	u_int decoded_frames;
	u_int decoding_errors;
};
typedef struct AUDIO_RPC_MONITERING_TOTAL_DEC_STATS AUDIO_RPC_MONITERING_TOTAL_DEC_STATS;

struct AUDIO_RPC_MONITERING_SAMPLE_DEC_STATS {
	u_int sample_seconds[2];
	u_int decoded_frames[2];
	u_int decoding_errors[2];
};
typedef struct AUDIO_RPC_MONITERING_SAMPLE_DEC_STATS AUDIO_RPC_MONITERING_SAMPLE_DEC_STATS;

struct AUDIO_RPC_MONITERING_AUDIO_DECODER {
	int state;
	int audio_standard;
	AUDIO_RPC_MONITERING_TOTAL_DEC_STATS total_dec_stats;
	AUDIO_RPC_MONITERING_SAMPLE_DEC_STATS sample_dec_stats;
};
typedef struct AUDIO_RPC_MONITERING_AUDIO_DECODER AUDIO_RPC_MONITERING_AUDIO_DECODER;

struct AUDIO_RPC_MONITERING_RETURNVAL {
	AUDIO_RPC_MONITERING_AUDIO_DECODER dec_var[2];
};
typedef struct AUDIO_RPC_MONITERING_RETURNVAL AUDIO_RPC_MONITERING_RETURNVAL;

struct RPC_FW_QUERY_RETURN {
	char query_return[200];
	u_int reserved1;
	u_int reserved2;
	u_int reserved3;
	u_int reserved4;
};
typedef struct RPC_FW_QUERY_RETURN RPC_FW_QUERY_RETURN;

enum ENUM_FW_DBG_QUERY_TYPE {
	ENUM_QUERY_VO_TV_SYSTEM_CONFIG = 0,
	ENUM_QUERY_VO_PLANE = 1,
	ENUM_QUERY_LOW_DELAY = 2,
	ENUM_QUERY_OSD_SETTING = 3,
	ENUM_QUERY_SUB_SETTING = 4,
	ENUM_QUERY_DROP_REPEAT = 5,
	ENUM_QUERY_VIDEO_INFO = 6,
	ENUM_QUERY_HDR_STATUS = 7,
};
typedef enum ENUM_FW_DBG_QUERY_TYPE ENUM_FW_DBG_QUERY_TYPE;

struct VIDEO_RPC_VOUT_DV_CP_INFO {
	u_int is_destroy;
	u_int ControlPathMemAddr;
	u_int is_from_service;
	u_int reserved[5];
};
typedef struct VIDEO_RPC_VOUT_DV_CP_INFO VIDEO_RPC_VOUT_DV_CP_INFO;

struct VIDEO_RPC_VOUT_SET_LPORT_COLOR {
	u_int brightness;
	u_int contrast;
	u_int hue;
	u_int saturation;
	u_int reserved[2];
};
typedef struct VIDEO_RPC_VOUT_SET_LPORT_COLOR VIDEO_RPC_VOUT_SET_LPORT_COLOR;

struct VIDEO_RPC_VOUT_GET_DV_REGISTER {
	u_int dm_reg1_addr;
	u_int dm_reg1_size;
	u_int dm_reg2_addr;
	u_int dm_reg2_size;
	u_int dm_reg3_addr;
	u_int dm_reg3_size;
	u_int dv_lut1_addr;
	u_int dv_lut1_size;
	u_int dv_lut2_addr;
	u_int dv_lut2_size;
	u_int display_primaries_x0;
	u_int display_primaries_y0;
	u_int display_primaries_x1;
	u_int display_primaries_y1;
	u_int display_primaries_x2;
	u_int display_primaries_y2;
	u_int white_point_x;
	u_int white_point_y;
	u_int max_display_mastering_luminance;
	u_int min_display_mastering_luminance;
	u_int max_content_light_level;
	u_int max_frame_avg_light_level;
	u_int reserved[4];
};
typedef struct VIDEO_RPC_VOUT_GET_DV_REGISTER VIDEO_RPC_VOUT_GET_DV_REGISTER;

enum VIDEO_ENUM_PRIVAETINFO_TO_SYS {
	ENUM_PRIVATEINFO_VIDEO_VO_DISPLAY_MASSAGE = 0,
};
typedef enum VIDEO_ENUM_PRIVAETINFO_TO_SYS VIDEO_ENUM_PRIVAETINFO_TO_SYS;

struct VIDEO_RPC_PRIVATEINFO_TO_SYS {
	u_int instanceID;
	enum VIDEO_ENUM_PRIVAETINFO_TO_SYS type;
	u_int privateInfo[16];
};
typedef struct VIDEO_RPC_PRIVATEINFO_TO_SYS VIDEO_RPC_PRIVATEINFO_TO_SYS;

enum OUTPUT_CONTROL_TARGET_TVSYS {
	OUTPUT_CONTROL_SD = 0,
	OUTPUT_CONTROL_HD = 1,
	OUTPUT_CONTROL_UHD = 2,
	OUTPUT_CONTROL_UNKNOWN = 3,
};
typedef enum OUTPUT_CONTROL_TARGET_TVSYS OUTPUT_CONTROL_TARGET_TVSYS;

struct VIDEO_RPC_DMX_OUTPUT_CONTROL_TO_SYS {
	u_int is_output_disable;
	u_int downresing;
	u_int current_hdcp;
	u_int content_hdcp;
	u_int pip;
	u_int current_tvsys;
	u_int target_tvsys;
};
typedef struct VIDEO_RPC_DMX_OUTPUT_CONTROL_TO_SYS VIDEO_RPC_DMX_OUTPUT_CONTROL_TO_SYS;

#endif /* !_AUDIORPCBASEDS_DATA_H_RPCGEN */
