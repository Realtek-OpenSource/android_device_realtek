/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _RPCBASEDS_DATA_H_RPCGEN
#define _RPCBASEDS_DATA_H_RPCGEN


typedef int HRESULT;

struct RPCRES_LONG {
	HRESULT result;
	unsigned int data;
};
typedef struct RPCRES_LONG RPCRES_LONG;

struct USB_DEVICE_CONFIG_INFO {
	HRESULT ret;
	unsigned int usb_ai_samplerate;
	unsigned int usb_ai_format;
	unsigned int usb_ai_chnum;
};
typedef struct USB_DEVICE_CONFIG_INFO USB_DEVICE_CONFIG_INFO;

struct RPC_CONNECTION {
	unsigned int srcInstanceID;
	unsigned int srcPinID;
	unsigned int desInstanceID;
	unsigned int desPinID;
	unsigned int mediaType;
};
typedef struct RPC_CONNECTION RPC_CONNECTION;

struct RPC_SEND_LONG {
	unsigned int instanceID;
	unsigned int pinID;
	unsigned int data;
};
typedef struct RPC_SEND_LONG RPC_SEND_LONG;

enum VIDEO_IMG_TYPE {
	IMG_JPEG = 0,
	IMG_PNG = 1,
	IMG_BMP = 2,
	IMG_GIF = 3,
	IMG_TIFF = 4,
	IMG_WEBP = 5,
	IMG_PSEUDO = 6,
	IMG_HEIF = 7,
};
typedef enum VIDEO_IMG_TYPE VIDEO_IMG_TYPE;

enum VIDEO_LOW_DELAY {
	LOW_DELAY_OFF = 0,
	LOW_DELAY_DECODER = 1,
	LOW_DELAY_DISPLAY = 2,
	LOW_DELAY_DECODER_DISPLAY = 3,
	LOW_DELAY_AVSYNC = 4,
	LOW_DELAY_DECODER_AVSYNC = 5,
	LOW_DELAY_DISPLAY_ORDER = 6,
	VO_LOW_DELAY_ERROR = 7,
};
typedef enum VIDEO_LOW_DELAY VIDEO_LOW_DELAY;

enum VIDEO_VF_TYPE {
	VF_TYPE_VIDEO_MPEG2_DECODER = 0,
	VF_TYPE_VIDEO_MPEG4_DECODER = 1,
	VF_TYPE_VIDEO_DIVX_DECODER = 2,
	VF_TYPE_VIDEO_H263_DECODER = 3,
	VF_TYPE_VIDEO_H264_DECODER = 4,
	VF_TYPE_VIDEO_VC1_DECODER = 5,
	VF_TYPE_VIDEO_REAL_DECODER = 6,
	VF_TYPE_VIDEO_JPEG_DECODER = 7,
	VF_TYPE_VIDEO_MJPEG_DECODER = 8,
	VF_TYPE_SPU_DECODER = 9,
	VF_TYPE_VIDEO_OUT = 10,
	VF_TYPE_TRANSITION = 11,
	VF_TYPE_THUMBNAIL = 12,
	VF_TYPE_VIDEO_VP6_DECODER = 13,
	VF_TYPE_VIDEO_IMAGE_DECODER = 14,
	VF_TYPE_FLASH = 15,
	VF_TYPE_VIDEO_AVS_DECODER = 16,
	VF_TYPE_MIXER = 17,
	VF_TYPE_VIDEO_VP8_DECODER = 18,
	VF_TYPE_VIDEO_WMV7_DECODER = 19,
	VF_TYPE_VIDEO_WMV8_DECODER = 20,
	VF_TYPE_VIDEO_RAW_DECODER = 21,
	VF_TYPE_VIDEO_THEORA_DECODER = 22,
	VF_TYPE_VIDEO_FJPEG_DECODER = 23,
	VF_TYPE_VIDEO_H265_DECODER = 24,
	VF_TYPE_VIDEO_VP9_DECODER = 25,
	VF_TYPE_VIDEO_H264lv51_DECODER = 26,
	VF_TYPE_VIDEO_CAPTURER = 27,
	VF_TYPE_RAWCONV = 28,
	VF_TYPE_TVD = 29,
	VF_TYPE_VIDEO_ENCODER = 30,
	VF_TYPE_VIDEO_SPLITTER = 31,
	VF_TYPE_VIDEO_AVS2_DECODER = 32,
	VF_TYPE_VIDEO_AV1_DECODER = 33,
};
typedef enum VIDEO_VF_TYPE VIDEO_VF_TYPE;

enum TVE_BOARD_TYPE {
	TVE_BOARD_CLASSIC_TYPE = 0,
	TVE_BOARD_EXTERNAL_SCART_TYPE = 1,
	TVE_BOARD_AVHDD_TYPE = 2,
	TVE_BOARD_CUSTOM_1_TYPE = 3,
	TVE_BOARD_CUSTOM_2_TYPE = 4,
	TVE_BOARD_CUSTOM_3_TYPE = 5,
	TVE_BOARD_CUSTOM_4_TYPE = 6,
	TVE_BOARD_CUSTOM_5_TYPE = 7,
	TVE_BOARD_CUSTOM_6_TYPE = 8,
	TVE_BOARD_CUSTOM_7_TYPE = 9,
	TVE_BOARD_CUSTOM_8_TYPE = 10,
	TVE_BOARD_CUSTOM_9_TYPE = 11,
};
typedef enum TVE_BOARD_TYPE TVE_BOARD_TYPE;

enum VIDEO_BUFFER_TYPE {
	VIDEO_BUFFER_SD = 0,
	VIDEO_BUFFER_HD = 1,
	VIDEO_BUFFER_HD_DIVX = 2,
	VIDEO_BUFFER_RM_CIF = 3,
	VIDEO_BUFFER_USER_DEFINE = 4,
	VIDEO_BUFFER_720P = 5,
	VIDEO_BUFFER_HD_MVC = 6,
	VIDEO_SUBPIC_RENDER_BUFFER_FULL = 16,
	VIDEO_SUBPIC_RENDER_BUFFER_HALF = 16 + 1,
	VIDEO_MEMORY_CONFIG_BASE = 32,
	VIDEO_MEMORY_CONFIG_720P = 32,
	VIDEO_MEMORY_CONFIG_720P_WITH_SCALER_BUFFER_3D = 32 + 1,
	VIDEO_MEMORY_CONFIG_HD = 32 + 2,
	VIDEO_MEMORY_CONFIG_HD_WITH_SCALER_BUFFER_3D = 32 + 3,
	VIDEO_MEMORY_CONFIG_HD_3D = 32 + 4,
	VIDEO_MEMORY_CONFIG_HD_SMOOTH_TOGGLE_FRC = 32 + 5,
	VIDEO_MEMORY_CONFIG_HD_SMOOTH_TOGGLE_FS = 32 + 6,
	VIDEO_MEMORY_CONFIG_SCALING_TO_FHD = 32 + 7,
	VIDEO_MEMORY_CONFIG_HD_SMOOTH_TOGGLE_FS_NO_MEMORY = 32 + 8,
};
typedef enum VIDEO_BUFFER_TYPE VIDEO_BUFFER_TYPE;

enum VIDEO_DNR_MODE {
	VIDEO_DNR_OFF = 0,
	VIDEO_DNR_AUTO = 1,
	VIDEO_DNR_DEMO = 2,
};
typedef enum VIDEO_DNR_MODE VIDEO_DNR_MODE;

enum VIDEO_COLOR_FMT {
	VIDEO_COLOR_YUV = 0,
	VIDEO_COLOR_ARGB8888 = 1,
	VIDEO_COLOR_RGB565 = 2,
	VIDEO_COLOR_RGB332 = 3,
	VIDEO_COLOR_RGBA8888 = 4,
	VIDEO_COLOR_HANDLE = 5,
	VIDEO_COLOR_ARGB8888_LE = 6,
	VIDEO_COLOR_JPEG = 7,
};
typedef enum VIDEO_COLOR_FMT VIDEO_COLOR_FMT;

enum SP_STREAM_TYPE {
	SP_DVD_TYPE = 0,
	SP_DIVX_TYPE = 1,
	SP_DIVX_MENU_TYPE = 2,
	SP_DVB_SUBTITLE_TYPE = 3,
	SP_DVB_TT_TYPE = 4,
	SP_ATSC_CC_TYPE = 5,
	SP_SRT_TYPE = 6,
	SP_SSA_TYPE = 7,
	SP_DIVX_XSUB_PLUS_TYPE = 8,
	SP_DVD_FOR_DIVX_TYPE = 9,
	SP_BD_SUBTITLE_TYPE = 10,
	SP_DUMMY_TYPE = 11,
};
typedef enum SP_STREAM_TYPE SP_STREAM_TYPE;

struct VO_COLOR {
	unsigned char c1;
	unsigned char c2;
	unsigned char c3;
	unsigned char isRGB;
};
typedef struct VO_COLOR VO_COLOR;

enum VO_OSD_COLOR_FORMAT {
	VO_OSD_COLOR_FORMAT_2BIT = 0,
	VO_OSD_COLOR_FORMAT_4BIT = 1,
	VO_OSD_COLOR_FORMAT_8BIT = 2,
	VO_OSD_COLOR_FORMAT_RGB332 = 3,
	VO_OSD_COLOR_FORMAT_RGB565 = 4,
	VO_OSD_COLOR_FORMAT_ARGB1555 = 5,
	VO_OSD_COLOR_FORMAT_ARGB4444 = 6,
	VO_OSD_COLOR_FORMAT_ARGB8888 = 7,
	VO_OSD_COLOR_FORMAT_Reserved0 = 8,
	VO_OSD_COLOR_FORMAT_Reserved1 = 9,
	VO_OSD_COLOR_FORMAT_Reserved2 = 10,
	VO_OSD_COLOR_FORMAT_YCBCRA4444 = 11,
	VO_OSD_COLOR_FORMAT_YCBCRA8888 = 12,
	VO_OSD_COLOR_FORMAT_RGBA5551 = 13,
	VO_OSD_COLOR_FORMAT_RGBA4444 = 14,
	VO_OSD_COLOR_FORMAT_RGBA8888 = 15,
	VO_OSD_COLOR_FORMAT_420 = 16,
	VO_OSD_COLOR_FORMAT_422 = 17,
	VO_OSD_COLOR_FORMAT_RGB323 = 18,
	VO_OSD_COLOR_FORMAT_RGB233 = 19,
	VO_OSD_COLOR_FORMAT_RGB556 = 20,
	VO_OSD_COLOR_FORMAT_RGB655 = 21,
	VO_OSD_COLOR_FORMAT_RGB888 = 22,
	VO_OSD_COLOR_FORMAT_RGB565_LITTLE = 36,
	VO_OSD_COLOR_FORMAT_ARGB1555_LITTLE = 37,
	VO_OSD_COLOR_FORMAT_ARGB4444_LITTLE = 38,
	VO_OSD_COLOR_FORMAT_ARGB8888_LITTLE = 39,
	VO_OSD_COLOR_FORMAT_YCBCRA4444_LITTLE = 43,
	VO_OSD_COLOR_FORMAT_YCBCRA8888_LITTLE = 44,
	VO_OSD_COLOR_FORMAT_RGBA5551_LITTLE = 45,
	VO_OSD_COLOR_FORMAT_RGBA4444_LITTLE = 46,
	VO_OSD_COLOR_FORMAT_RGBA8888_LITTLE = 47,
	VO_OSD_COLOR_FORMAT_RGB556_LITTLE = 52,
	VO_OSD_COLOR_FORMAT_RGB655_LITTLE = 53,
	VO_OSD_COLOR_FORMAT_RGB888_LITTLE = 54,
};
typedef enum VO_OSD_COLOR_FORMAT VO_OSD_COLOR_FORMAT;

enum VO_GRAPHIC_STORAGE_MODE {
	VO_GRAPHIC_BLOCK = 0,
	VO_GRAPHIC_SEQUENTIAL = 1,
};
typedef enum VO_GRAPHIC_STORAGE_MODE VO_GRAPHIC_STORAGE_MODE;

enum VIDEO_JPEG_MIRROR {
	VIDEO_MIRROR_NONE = 0,
	VIDEO_MIRROR_X = 1,
	VIDEO_MIRROR_Y = 2,
	VIDEO_MIRROR_XY = 3,
};
typedef enum VIDEO_JPEG_MIRROR VIDEO_JPEG_MIRROR;

enum VIDEO_JPEG_ROTATION {
	VIDEO_ROTATE_0 = 0,
	VIDEO_ROTATE_90 = 1,
	VIDEO_ROTATE_180 = 2,
	VIDEO_ROTATE_270 = 3,
};
typedef enum VIDEO_JPEG_ROTATION VIDEO_JPEG_ROTATION;

struct VO_RECTANGLE {
	short x;
	short y;
	unsigned short width;
	unsigned short height;
};
typedef struct VO_RECTANGLE VO_RECTANGLE;

struct MIXER_WIN {
	unsigned char winID;
	short order;
	short alpha;
	struct VO_RECTANGLE dispWin;
	struct VO_RECTANGLE clipSrcWin;
};
typedef struct MIXER_WIN MIXER_WIN;

struct VIDEO_RPC_JPEG_DEC {
	unsigned int colorFormat;
	unsigned int pBitstreamRB;
	unsigned int pTargetLuma;
	unsigned int pTargetChroma;
	unsigned int pitch;
	unsigned int targetRectX;
	unsigned int targetRectY;
	unsigned int targetRectWidth;
	unsigned int targetRectHeight;
	unsigned int centerToTargetRect;
	enum VIDEO_JPEG_ROTATION rotation;
	unsigned int srcRectAlignmentRatioX;
	unsigned int srcRectAlignmentRatioY;
	unsigned int srcRectZoomFactor;
	unsigned int initOption;
	unsigned int pSharedJpegDecCtrl;
	unsigned int useWholePictureOnly;
	unsigned int ScaleUpToRect;
	unsigned int FillBlackInRect;
	unsigned int SmoothLevel;
	enum VIDEO_JPEG_MIRROR mirror;
	unsigned int pTargetLuma_right;
	unsigned int pTargetChroma_right;
	unsigned int pLumaSeq;
	unsigned int pChromaSeq;
	unsigned short pitchYSeq;
	unsigned short pitchCSeq;
	unsigned short widthSeq;
	unsigned short heightSeq;
	unsigned int reserved;
};
typedef struct VIDEO_RPC_JPEG_DEC VIDEO_RPC_JPEG_DEC;

struct VIDEO_INIT_DATA {
	enum TVE_BOARD_TYPE boardType;
};
typedef struct VIDEO_INIT_DATA VIDEO_INIT_DATA;

struct VIDEO_CONFIG_DATA {
	enum VIDEO_BUFFER_TYPE videoBufferType;
};
typedef struct VIDEO_CONFIG_DATA VIDEO_CONFIG_DATA;

struct VIDEO_RPC_INSTANCE {
	enum VIDEO_VF_TYPE type;
};
typedef struct VIDEO_RPC_INSTANCE VIDEO_RPC_INSTANCE;

struct VIDEO_RPC_SET_REFCLOCK {
	unsigned int instanceID;
	unsigned int pRefClock;
};
typedef struct VIDEO_RPC_SET_REFCLOCK VIDEO_RPC_SET_REFCLOCK;

struct VIDEO_RPC_REQUEST_BUFFER {
	unsigned int width;
	unsigned int height;
};
typedef struct VIDEO_RPC_REQUEST_BUFFER VIDEO_RPC_REQUEST_BUFFER;

struct VIDEO_RPC_LOW_DELAY {
	enum VIDEO_LOW_DELAY mode;
	unsigned int reserved;
};
typedef struct VIDEO_RPC_LOW_DELAY VIDEO_RPC_LOW_DELAY;

enum ENUM_VIDEO_DEC_PRIVATEINFO {
	ENUM_VIDEO_PRIVATEINFO_SEI_INFO = 0,
	ENUM_VIDEO_PRIVATEINFO_DEC_IGNORE_BS_ASPECT_RATIO = 1,
	ENUM_VIDEO_PRIVATEINFO_H264DEC_SET_DPB_BYPASS = 2,
	ENUM_VIDEO_PRIVATEINFO_H264DEC_SET_PROPAGATION_LEVEL = 3,
	ENUM_VIDEO_PRIVATEINFO_SET_PRESEND_FIRST_I_FRM = 4,
	ENUM_VIDEO_PRIVATEINFO_SET_SWITCH_VIDEO_RESERVE_LAST_FRAME = 5,
	ENUM_VIDEO_PRIVATEINFO_DISABLE_REORDER = 6,
	ENUM_VIDEO_PRIVATEINFO_DISABLE_CHK_BROKEN_LINK = 7,
	ENUM_VIDEO_PRIVATEINFO_GET_VIDEO_ERR_RATE = 8,
	ENUM_VIDEO_PRIVATEINFO_SET_CTC_SOURCE = 9,
};
typedef enum ENUM_VIDEO_DEC_PRIVATEINFO ENUM_VIDEO_DEC_PRIVATEINFO;

struct VIDEO_RPC_DEC_PRIVATEINFO_INPUT_PARAMETERS {
	unsigned int instanceID;
	enum ENUM_VIDEO_DEC_PRIVATEINFO type;
	unsigned int data[16];
};
typedef struct VIDEO_RPC_DEC_PRIVATEINFO_INPUT_PARAMETERS VIDEO_RPC_DEC_PRIVATEINFO_INPUT_PARAMETERS;

struct VIDEO_RPC_DEC_PRIVATEINFO_OUTPUT_PARAMETERS {
	unsigned int data[16];
};
typedef struct VIDEO_RPC_DEC_PRIVATEINFO_OUTPUT_PARAMETERS VIDEO_RPC_DEC_PRIVATEINFO_OUTPUT_PARAMETERS;

struct VIDEO_MEM_CHUNK {
	unsigned int address;
	unsigned int size;
};
typedef struct VIDEO_MEM_CHUNK VIDEO_MEM_CHUNK;

struct VIDEO_RPC_VIDEO_FREE_MEMORY {
	unsigned int numMemChunks;
	struct VIDEO_MEM_CHUNK memChunk[8];
};
typedef struct VIDEO_RPC_VIDEO_FREE_MEMORY VIDEO_RPC_VIDEO_FREE_MEMORY;

struct VIDEO_RPC_CONFIG_CHUNK {
	unsigned int configMode;
	unsigned int numofChunk;
};
typedef struct VIDEO_RPC_CONFIG_CHUNK VIDEO_RPC_CONFIG_CHUNK;

enum YUV_FMT {
	FMT_YUYV = 0,
	FMT_YUV420 = 1,
	FMT_YUV422P = 2,
	FMT_UYVY = 3,
	FMT_M_DOMAIN = 4,
	FMT_YV12 = 5,
	FMT_NV12 = 6,
	FMT_BGRA_8888 = 7,
	FMT_YUV420P = 8,
	FMT_REFRECORD = 9,
	FMT_RGBA_8888 = 10,
};
typedef enum YUV_FMT YUV_FMT;

enum IMG_TARGET_FORMAT {
	IMG_YUV = 0,
	IMG_ARGB8888 = 1,
	IMG_RGB565 = 2,
	IMG_RGB332 = 3,
	IMG_HANDLE = 4,
	IMG_RGBA8888 = 5,
	IMG_RGBA8888_LE = 6,
	IMG_ARGB8888_LE = 7,
	IMG_RGB565_LE = 8,
};
typedef enum IMG_TARGET_FORMAT IMG_TARGET_FORMAT;

struct VIDEO_RPC_YUYV_TO_RGB {
	unsigned int yuyv_addr;
	unsigned int rgb_addr;
	unsigned int width;
	unsigned int height;
	unsigned int imgPitch;
	enum YUV_FMT yuv_fmt;
	enum IMG_TARGET_FORMAT rgb_fmt;
};
typedef struct VIDEO_RPC_YUYV_TO_RGB VIDEO_RPC_YUYV_TO_RGB;

struct VIDEO_RPC_DEBUG_MEMORY {
	unsigned int videoFirmwareVersion;
};
typedef struct VIDEO_RPC_DEBUG_MEMORY VIDEO_RPC_DEBUG_MEMORY;

enum VIDEO_CODEC_CONTROL_BIT {
	VIDEO_MPEG2_DECODER_BIT = 43,
	VIDEO_MPEG4_DECODER_BIT = 44,
	VIDEO_DIVX_DECODER_BIT = 45,
	VIDEO_REALVIDEO_DECODER_BIT = 46,
	VIDEO_H263_DECODER_BIT = 47,
	VIDEO_MJPEG_DECODER_BIT = 48,
	VIDEO_H264_DECODER_BIT = 49,
	VIDEO_VC1_DECODER_BIT = 50,
	VIDEO_FJPEG_DECODER_BIT = 51,
	VIDEO_H264lv51_DECODER_BIT = 52,
	VIDEO_MPEG2_ENCODER_BIT = 53,
	VIDEO_MPEG4_ENCODER_BIT = 54,
};
typedef enum VIDEO_CODEC_CONTROL_BIT VIDEO_CODEC_CONTROL_BIT;

enum VIDEO_DECODER_CC_BYPASS_MODE {
	VIDEODECODER_CC_DROP = 0,
	VIDEODECODER_CC_BYPASS = 1,
	VIDEODECODER_CC_DECODE = 2,
	VIDEODECODER_CC_CALLBACK = 3,
};
typedef enum VIDEO_DECODER_CC_BYPASS_MODE VIDEO_DECODER_CC_BYPASS_MODE;

enum VIDEO_STREAM_TYPE {
	VIDEO_STREAM_MPEG1 = 0,
	VIDEO_STREAM_MPEG2 = 1,
	VIDEO_STREAM_MPEG4 = 2,
	VIDEO_STREAM_DIVX3 = 3,
	VIDEO_STREAM_H263 = 4,
	VIDEO_STREAM_H264 = 5,
	VIDEO_STREAM_VC1 = 6,
	VIDEO_STREAM_REALVIDEO = 7,
	VIDEO_STREAM_MJPEG = 8,
	VIDEO_STREAM_VP6 = 9,
	VIDEO_STREAM_AVS = 10,
	VIDEO_STREAM_YUV = 11,
	VIDEO_STREAM_VP8 = 12,
	VIDEO_STREAM_WMV7 = 13,
	VIDEO_STREAM_WMV8 = 14,
	VIDEO_STREAM_RAW = 15,
	VIDEO_STREAM_THEORA = 16,
	VIDEO_STREAM_UNKNOWN = 17,
	VIDEO_STREAM_FJPEG = 18,
	VIDEO_STREAM_H265 = 19,
	VIDEO_STREAM_VP9 = 20,
	VIDEO_STREAM_H264lv51 = 21,
	VIDEO_STREAM_AVS2 = 22,
	VIDEO_STREAM_AV1 = 23,
};
typedef enum VIDEO_STREAM_TYPE VIDEO_STREAM_TYPE;

struct RPC_RINGBUFFER {
	unsigned int instanceID;
	unsigned int pinID;
	unsigned int readPtrIndex;
	unsigned int pRINGBUFF_HEADER;
};
typedef struct RPC_RINGBUFFER RPC_RINGBUFFER;

struct VIDEO_RPC_ENDOFSTREAM {
	unsigned int SP_instanceID;
};
typedef struct VIDEO_RPC_ENDOFSTREAM VIDEO_RPC_ENDOFSTREAM;

struct VIDEO_RPC_DEC_JPEG_INFO {
	unsigned int instanceID;
	unsigned int destWidth;
	unsigned int destHeight;
	unsigned int eventID;
	unsigned int reserved2;
	unsigned int reserved3;
};
typedef struct VIDEO_RPC_DEC_JPEG_INFO VIDEO_RPC_DEC_JPEG_INFO;

struct VIDEO_RPC_DEC_JPEG_CTRL {
	unsigned int decodedWidth;
	unsigned int decodedHeight;
	unsigned int bitstreamEnd;
	unsigned int cancel;
	unsigned int status;
	unsigned int orgJpegWidth;
	unsigned int orgJpegHeight;
	unsigned int croppedJpegX;
	unsigned int croppedJpegY;
	unsigned int croppedJpegWidth;
	unsigned int croppedJpegHeight;
	enum VIDEO_JPEG_ROTATION orientation;
	unsigned int percentage;
	unsigned int reserved3;
	unsigned int JPEG_CTRL;
	unsigned int BITMAP_CTRL;
	unsigned int TIFF_CTRL;
	unsigned int GIF_CTRL;
	unsigned int PNG_CTRL;
	unsigned int Format1_CTRL;
	unsigned int Format2_CTRL;
	unsigned int Format3_CTRL;
	unsigned int bitstreamStart;
	unsigned int outInstanceID;
	enum VIDEO_IMG_TYPE imgType;
	unsigned int pScratchBase;
	unsigned int scratchSize;
};
typedef struct VIDEO_RPC_DEC_JPEG_CTRL VIDEO_RPC_DEC_JPEG_CTRL;

struct VIDEO_RPC_ENC_AUTOPAUSE {
	unsigned int instanceID;
	unsigned char isFinish;
};
typedef struct VIDEO_RPC_ENC_AUTOPAUSE VIDEO_RPC_ENC_AUTOPAUSE;

struct VIDEO_RPC_DEC_ERROR_INFO {
	unsigned int instanceID;
	unsigned int errCode;
};
typedef struct VIDEO_RPC_DEC_ERROR_INFO VIDEO_RPC_DEC_ERROR_INFO;

struct VIDEO_RPC_DEC_MESSAGE {
	unsigned int instanceID;
	unsigned int message;
};
typedef struct VIDEO_RPC_DEC_MESSAGE VIDEO_RPC_DEC_MESSAGE;

#endif /* !_RPCBASEDS_DATA_H_RPCGEN */
