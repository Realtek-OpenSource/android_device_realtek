/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _VIDEORPC_SYSTEM_DATA_H_RPCGEN
#define _VIDEORPC_SYSTEM_DATA_H_RPCGEN

#include <RPCBaseDS.h>
#include <VideoRPCBaseDS.h>
#include <AudioRPCBaseDS.h>
#include <AudioRPC_System.h>

struct VIDEO_RPC_DEC_SET_SPEED {
	u_int instanceID;
	u_int displaySpeed;
	u_int decodeSkip;
};
typedef struct VIDEO_RPC_DEC_SET_SPEED VIDEO_RPC_DEC_SET_SPEED;

struct VIDEO_RPC_DEC_SET_ERR_CONCEALMENT_LEVEL {
	u_int instanceID;
	u_int errConcealmentLevel;
	u_int errNotificationLevel;
	u_int continuousFrmCntForNotification;
	u_int bIsVideoSlowForErrBlk;
};
typedef struct VIDEO_RPC_DEC_SET_ERR_CONCEALMENT_LEVEL VIDEO_RPC_DEC_SET_ERR_CONCEALMENT_LEVEL;

struct VIDEO_RPC_DEC_INIT {
	u_int instanceID;
	VIDEO_STREAM_TYPE type;
	struct VIDEO_RPC_DEC_SET_SPEED set_speed;
};
typedef struct VIDEO_RPC_DEC_INIT VIDEO_RPC_DEC_INIT;

struct VIDEO_RPC_DEC_SET_DEBLOCK {
	u_int instanceID;
	u_char enable;
};
typedef struct VIDEO_RPC_DEC_SET_DEBLOCK VIDEO_RPC_DEC_SET_DEBLOCK;

struct VIDEO_RPC_DEC_BITSTREAM_BUFFER {
	u_int bsBase;
	u_int bsSize;
};
typedef struct VIDEO_RPC_DEC_BITSTREAM_BUFFER VIDEO_RPC_DEC_BITSTREAM_BUFFER;

struct VIDEO_RPC_DEC_BV_RESULT {
	u_int bitRate;
	u_int type;
};
typedef struct VIDEO_RPC_DEC_BV_RESULT VIDEO_RPC_DEC_BV_RESULT;

struct VIDEO_RPC_DEC_SEQ_INFO {
	u_int hor_size;
	u_int ver_size;
	u_int aspect_ratio;
	u_int frame_rate;
	u_int bit_rate;
	u_int vbv_buf_size;
	u_int profile_level;
	u_int chroma_format;
	u_int video_format;
	u_int disp_hor_size;
	u_int disp_ver_size;
	u_int isProg;
	u_int isMVC;
	u_int isHDR;
	u_int isCompressBufferMode;
	u_int offsetTable_ysize;
	u_int offsetTable_csize;
};
typedef struct VIDEO_RPC_DEC_SEQ_INFO VIDEO_RPC_DEC_SEQ_INFO;

struct VIDEO_RPC_DEC_CC_BYPASS_MODE {
	u_int instanceID;
	enum VIDEO_DECODER_CC_BYPASS_MODE cc_mode;
};
typedef struct VIDEO_RPC_DEC_CC_BYPASS_MODE VIDEO_RPC_DEC_CC_BYPASS_MODE;

struct VIDEO_RPC_DEC_SET_DNR {
	u_int instanceID;
	enum VIDEO_DNR_MODE dnr_mode;
};
typedef struct VIDEO_RPC_DEC_SET_DNR VIDEO_RPC_DEC_SET_DNR;

struct VIDEO_RPC_DEC_SET_REF_SYNC_LIMIT {
	u_int instanceID;
	u_int refSyncLimit;
};
typedef struct VIDEO_RPC_DEC_SET_REF_SYNC_LIMIT VIDEO_RPC_DEC_SET_REF_SYNC_LIMIT;

struct VIDEO_RPC_DEC_CAPABILITY {
	u_int HighWord;
	u_int LowWord;
};
typedef struct VIDEO_RPC_DEC_CAPABILITY VIDEO_RPC_DEC_CAPABILITY;

struct VIDEO_RPC_THUMBNAIL_SET_VSCALER_OUTFORMAT {
	u_int instanceID;
	u_int ThumbAckAddr;
	VIDEO_COLOR_FMT colorFormat;
	u_int pTargetLuma;
	u_int pTargetChroma;
	u_int pitch;
	u_int targetRectX;
	u_int targetRectY;
	u_int targetRectWidth;
	u_int targetRectHeight;
	u_int alpha;
	u_int fillColor;
};
typedef struct VIDEO_RPC_THUMBNAIL_SET_VSCALER_OUTFORMAT VIDEO_RPC_THUMBNAIL_SET_VSCALER_OUTFORMAT;

struct VIDEO_RPC_THUMBNAIL_SET_THRESHOLD {
	u_int instanceID;
	u_int threshold;
};
typedef struct VIDEO_RPC_THUMBNAIL_SET_THRESHOLD VIDEO_RPC_THUMBNAIL_SET_THRESHOLD;

struct VIDEO_RPC_FLASH_SET_OUTPUT {
	u_int instanceID;
	u_int address;
};
typedef struct VIDEO_RPC_FLASH_SET_OUTPUT VIDEO_RPC_FLASH_SET_OUTPUT;

struct VIDEO_RPC_THUMBNAIL_SET_STARTPIC {
	u_int instanceID;
	u_int startPicNum;
	u_int endPicNum;
};
typedef struct VIDEO_RPC_THUMBNAIL_SET_STARTPIC VIDEO_RPC_THUMBNAIL_SET_STARTPIC;

struct VIDEO_RPC_SUBPIC_DEC_CONFIGURE {
	u_int instanceID;
	u_short fullWidth;
	u_short fullHeight;
	enum SP_STREAM_TYPE streamType;
};
typedef struct VIDEO_RPC_SUBPIC_DEC_CONFIGURE VIDEO_RPC_SUBPIC_DEC_CONFIGURE;

struct VIDEO_RPC_SUBPIC_DEC_PAGE {
	u_int instanceID;
	u_short page_id_composition;
	u_short page_id_ancillary;
};
typedef struct VIDEO_RPC_SUBPIC_DEC_PAGE VIDEO_RPC_SUBPIC_DEC_PAGE;

struct VIDEO_RPC_JPEG_DEC_BATCH {
	u_int number;
	u_int structure_addr;
};
typedef struct VIDEO_RPC_JPEG_DEC_BATCH VIDEO_RPC_JPEG_DEC_BATCH;

struct VIDEO_RPC_TRANSITION_EFFECT {
	u_int instantID;
	u_int YBufID_A;
	u_int YBufID_B;
	u_int CBufID_A;
	u_int CBufID_B;
	u_int width;
	u_int height;
	u_int type;
	u_int frame_num;
	u_int PTS_inc;
	u_int start_x;
	u_int start_y;
	u_int start_width;
	u_int start_height;
	u_int end_x;
	u_int end_y;
	u_int end_width;
	u_int end_height;
	u_int pSharedTransEffCtrl;
	u_int YBufID_A_right;
	u_int YBufID_B_right;
	u_int CBufID_A_right;
	u_int CBufID_B_right;
};
typedef struct VIDEO_RPC_TRANSITION_EFFECT VIDEO_RPC_TRANSITION_EFFECT;

struct VIDEO_RPC_MIXER_FILTER_CONFIGURE {
	u_int instanceID;
	u_short width;
	u_short height;
	u_char EnablebgPicture;
	struct VO_COLOR bgColor;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	enum VO_GRAPHIC_STORAGE_MODE storageMode;
	struct VO_RECTANGLE SrcWin;
	struct VO_RECTANGLE dispWin;
	u_short startX[2];
	u_short startY[2];
	u_short imgPitch[2];
	u_int pImage[2];
};
typedef struct VIDEO_RPC_MIXER_FILTER_CONFIGURE VIDEO_RPC_MIXER_FILTER_CONFIGURE;

struct VIDEO_RPC_MIXER_FILTER_CONFIGURE_WIN {
	u_int instanceID;
	u_int count;
	struct MIXER_WIN win[8];
};
typedef struct VIDEO_RPC_MIXER_FILTER_CONFIGURE_WIN VIDEO_RPC_MIXER_FILTER_CONFIGURE_WIN;

struct VIDEO_RPC_MIXER_FILTER_SET_MASTER_WIN {
	u_int instanceID;
	u_char winID;
};
typedef struct VIDEO_RPC_MIXER_FILTER_SET_MASTER_WIN VIDEO_RPC_MIXER_FILTER_SET_MASTER_WIN;

struct VIDEO_RPC_MIXER_PLAY_ONE_MOTION_JPEG_FRAME {
	u_char mixerWinID;
	enum VIDEO_STREAM_TYPE stream_type;
	enum YUV_FMT yuv_fmt;
	u_int base;
	u_int size;
	u_int width;
	u_int height;
};
typedef struct VIDEO_RPC_MIXER_PLAY_ONE_MOTION_JPEG_FRAME VIDEO_RPC_MIXER_PLAY_ONE_MOTION_JPEG_FRAME;

#endif /* !_VIDEORPC_SYSTEM_DATA_H_RPCGEN */
