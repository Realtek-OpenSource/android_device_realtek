#ifndef __REALTEK_IPC_H__
#define __REALTEK_IPC_H__

//#include <stdio.h>
//#include <stdlib.h>
#include <unistd.h>

#define CMD_BUF_SIZE 2048 //should be the same as CMD_BUF_SIZE at MediaPlayServer.cpp of DvdPlayer.
//NOTE: If change this order, pRTCmdStr[] should follow up.
typedef enum {
	CMD_LOAD = 0,
	CMD_PLAY = 1,
	CMD_PAUSE = 2,
	CMD_STOP = 3,
	CMD_SEEK_TIME = 4,
	CMD_LOOP = 5,
	CMD_ELAPSED_TIME = 6,
	CMD_TOTAL_TIME = 7,
	CMD_UNLOAD_MEDIA = 8,
	CMD_PB_CONNECTION = 9,
	CMD_CONFIG_CONNECTION = 10,
	CMD_SET_WINDOW_POS = 11,
	CMD_SET_ORDER = 12,
	CMD_SET_TV_SYSTEM = 13,
	CMD_GET_TV_SYSTEM = 14,
	CMD_CLOSE_CONNECTION = 15,
	CMD_EXEC_SCRIPT = 16,
	CMD_GET_UOP = 17,
	CMD_CHANGE_SPEED = 18,
	CMD_SET_VOLUME = 19,
	CMD_GET_VOLUME = 20,
	CMD_SET_MUTE = 21,
	CMD_GET_MUTE = 22,
	CMD_GET_BUF_FULLNESS = 23,
	CMD_ALLOCATE_MEMORY = 24,
	CMD_FREE_MEMORY = 25,
	CMD_FLUSH = 26,
	CMD_GET_HARDWARE_SECRET = 27,
	CMD_REGISTER_FEEDBACK_DATA = 28,
	CMD_GET_PB_INSTANCE = 29,
	CMD_DELETE_PB_INSTANCE = 30,
	CMD_SET_PROPERTY = 31,
	CMD_GET_VIDEO_INFO = 32,
	CMD_GET_AUDIO_INFO = 33,
	CMD_GET_SPU_INFO = 34,
	CMD_CHANGE_SPU = 35,
	CMD_ACTUAL_ZOOM = 36,
	CMD_SET_AUDIO_INFO = 37,
	CMD_CHANGE_PLAYBACK_FLOWTYPE=38,
	CMD_PREPARE = 39,
	CMD_PREPARE_ASYN = 40,
	CMD_SET_URL = 41,
	CMD_SET_EXT_SUBTITLE_PATH = 42,
	CMD_HAVE_AUDIO_VIDEO = 43,
	CMD_SET_GET_NAV_PROPERTY = 44,
    CMD_NAVI_CONTROL = 45,
    CMD_GET_NAV_STATE = 46,
    CMD_SET_NAV_STATE = 47,
    CMD_BOOKMARK_OP = 48,
    CMD_SET_START_TIME = 49,
    CMD_SET_LANGUAGES = 50,
    CMD_GET_AUDIO_DECODER_AGENT_ID = 51,
    CMD_SET_VIDEO_ASPECT_RATIO = 52,
    CMD_VIDEO_LAYER_SWITCH = 53,
    CMD_GET_CURRENT_PTS = 54,
    CMD_SET_AUDIO_BALANCE = 55,
    CMD_SET_FOCUS = 56,
    CMD_GET_NAVI_INFO = 57,
    CMD_SET_VIDEO_LOW_DELAY_MODE = 58,
    CMD_SET_VIDEO_DISABLE_REORDER = 59,
    CMD_SET_PRE_DETERMINED_TYPE = 60,
    CMD_SET_PCM_INFORMATION = 61,
    CMD_SET_VIDEO_ERROR_LEVEL = 62,
    CMD_SET_VIDEO_SCALED_SIZE = 63,
    CMD_SET_VIDEO_DYNAMIC_SCALE = 64,
	CMD_MAX,
	
	//event ID which are delivered from server side
	CMD_PLAYBACK_COMPLETE = 0xEFFF0001,
	CMD_BUF_UNDERFLOW,
	CMD_BUF_REFILLED,
	CMD_FATAL_ERROR,
	CMD_BITSTREAM_ERROR,
	CMD_DECODER_MESSAGE,	//refer to RT_DEC_MESSAGE_ID
	CMD_UNSUPPORT_FORMAT,
	CMD_PLAYBACK_PREPARED,//LZF 20120821 FOR 
	CMD_PLAYBACK_LOADPERCENT,
	CMD_PLAYBACK_RATECHANGE,
    CMD_PLAYBACK_DOMAINCHANGE,
    CMD_BUF_IO_UNDERFLOW,
    CMD_BUF_IO_REFILLED,
    CMD_PLAYBACK_TITLECHANGE,
    CMD_PLAYBACK_CHAPTERCHANGE,
    CMD_PLAYBACK_SUBTITLECHANGE,
    CMD_PLAYBACK_NETWORKBANDWIDTH
} RT_CMD_ID;

///////////////////////////////////////////////////////////////////////
static const struct {const char* fcc; unsigned int event; } g_pRTEventList[] =
{
	{"PBCP", CMD_PLAYBACK_COMPLETE},
	{"UDFW", CMD_BUF_UNDERFLOW},
	{"FULL", CMD_BUF_REFILLED},
	{"EROR", CMD_FATAL_ERROR},
	{"SERR", CMD_BITSTREAM_ERROR},
	{"DMSG", CMD_DECODER_MESSAGE},
	{"UFMT", CMD_UNSUPPORT_FORMAT},
	{"PRPD", CMD_PLAYBACK_PREPARED},
	{"LDPT", CMD_PLAYBACK_LOADPERCENT},
    {"PBRC", CMD_PLAYBACK_RATECHANGE},
    {"DMCH", CMD_PLAYBACK_DOMAINCHANGE},
    {"IOUD", CMD_BUF_IO_UNDERFLOW},
    {"IOFL", CMD_BUF_IO_REFILLED},
    {"TTCH", CMD_PLAYBACK_TITLECHANGE},
    {"CACH", CMD_PLAYBACK_CHAPTERCHANGE},
    {"SUCH", CMD_PLAYBACK_SUBTITLECHANGE},
    {"NWBW", CMD_PLAYBACK_NETWORKBANDWIDTH}
};

static const char* g_pRTCmdStr[] = {
	"LOAD",	//CMD_LOAD = 0
	"PLAY",	//CMD_PLAY = 1
	"PAUS",	//CMD_PAUSE = 2
	"STOP",	//CMD_STOP = 3
	"SEKT",	//CMD_SEEK_TIME = 4
	"LOOP",	//CMD_LOOP = 5
	"EPTM",	//CMD_ELAPSED_TIME = 6
	"TTTM",	//CMD_TOTAL_TIME = 7
	"UNLD",	//CMD_UNLOAD_MEDIA = 8
	"PLBK", //CMD_PB_CONNECTION = 9
	"COFG",	//CMD_CONFIG_CONNECTION = 10
	"WPOS", //CMD_SET_WINDOW_POS = 11
	"SETZ", //CMD_SET_ORDER = 12
	"STVS", //CMD_SET_TV_SYSTEM = 13
	"GTVS", //CMD_GET_TV_SYSTEM = 14
	"CLCN", //CMD_CLOSE_CONNECTION = 15
	"FUNC", //CMD_EXEC_SCRIPT = 16
	"GUOP", //CMD_GET_UOP = 17
	"RATE",	//CMD_CHANGE_SPEED = 18,
	"VOLM",	//CMD_SET_VOLUME = 19,
	"GVLM", //CMD_GET_VOLUME = 20,
	"SMUT",	//CMD_SET_MUTE = 21,
	"GMUT",	//CMD_GET_MUTE = 22,
	"BFFS",	//CMD_GET_BUF_FULLNESS = 23,
	"GMEM",	//CMD_ALLOCATE_MEMORY = 24,
	"FMEM",	//CMD_FREE_MEMORY = 25,
	"DROP", //CMD_FLUSH = 26
	"GSEC",	//CMD_GET_HARDWARE_SECRET = 27
	"REGD",	//CMD_REGISTER_FEEDBACK_DATA = 28
	"GPBO",	//CMD_GET_PB_INSTANCE = 29
	"DPBO",	//CMD_DELETE_PB_INSTANCE = 30
	"PROP", //CMD_SET_PROPERTY = 31
	"GVSI", //CMD_GET_VIDEO_INFO = 32
	"GASI", //CMD_GET_AUDIO_INFO = 33
	"GSSI", //CMD_GET_SPU_INFO = 34
	"SSSN",	//CMD_CHANGE_SPU = 35
	"ZOOM",	//CMD_ACTUAL_ZOOM = 36
	"SASN",	//CMD_SET_AUDIO_INFO = 37
	"CFPB", //CMD_CHANGE_PLAYBACK_FLOWTYPE =38
	"PRSN",	//CMD_PREPARE = 39
	"PRAS",	//CMD_PREPARE = 40
	"SURL",	//CMD_SET_URL = 41
	"SPUL",	//CMD_SET_EXT_SUBTITLE_PATH = 42
	"HAVE",	//CMD_HAVE_AUDIO_VIDEO = 43
	"SGNP",	//CMD_SET_GET_NAV_PROPERTY = 44
    "NAVC", //CMD_NAVI_CONTROL = 45
    "GNAS", //CMD_GET_NAV_STATE = 46
    "SNAS", //CMD_SET_NAV_STATE = 47
    "BOMK", //CMD_BOOKMARK_OP = 48
    "SSTM", //CMD_SET_START_TIME = 49
    "SLAG", //CMD_SET_LANGUAGES = 50
    "ADAI", //CMD_GET_AUDIO_DECODER_AGENT_ID = 51
    "SVAR", //CMD_SET_VIDEO_ASPECT_RATIO = 52
    "VLSH", //CMD_VIDEO_LAYER_SWITCH = 53
    "GPTS", //CMD_GET_CURRENT_PTS = 54
    "SABL", //CMD_SET_AUDIO_BALANCE = 55,
    "SFCS", //CMD_SET_FOCUS = 56,
    "NAVI", //CMD_GET_NAVI_INFO=57,
    "SVLD", //CMD_SET_VIDEO_LOW_DELAY_MODE = 58,
    "SVDR", //CMD_SET_VIDEO_DISABLE_REORDER = 59,
    "SPRE", //CMD_SET_PRE_DETERMINED_TYPE = 60,
    "SPCM", //CMD_SET_PCM_INFORMATION = 61,
    "SVEL", //CMD_SET_VIDEO_ERROR_LEVEL = 62,
    "SVSS", //CMD_SET_VIDEO_SCALED_SIZE = 63,
    "SVDS", //CMD_SET_VIDEO_DYNAMIC_SCALE = 64,
};

typedef enum {
	DMSG_ID_GENERAL = 0,
	
	DMSG_ID_AUDIO_FIRST_FRAME_DECODED = 0x10000000,          /* first picture has been decoded after flushing */
	
	DMSG_ID_VIDEO_RECOVERABLE_ERROR = 0x20000000,
	DMSG_ID_VIDEO_FIRST_PICTURE_DECODED,          /* first picture has been decoded after flushing */
	
} RT_DEC_MESSAGE_ID;

class RT_IPC
{
	int  m_socket;
	int  m_seqNum;
	char m_cmdBuf[CMD_BUF_SIZE];
	char m_resultBuf[CMD_BUF_SIZE];
	
private:
	int readResponse(char* pBuf, int readSize, bool* pbTimeOut);
		
public:
	RT_IPC() : m_socket(-1), m_seqNum(0) {}
	~RT_IPC() { if (m_socket != -1) {::close(m_socket); m_socket = -1;}}
		
	inline bool isValid() { return (m_socket != -1); }
	int getSocket() { return m_socket; }

	int createConnection();
    void closeConnection();
	int sendCommand(RT_CMD_ID cmdID, char* pInData, int inDataSize, int& cmdSeqNum);
	int getResult(RT_CMD_ID& cmdID, char*& pOutData, int& outDataSize, int& cmdSeqNum, bool* pbTimeOut);
	
};
	

#endif //__REALTEK_IPC_H__
