/** @file vout_util_cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef VOUT_UTIL_CMDLINE_H
#define VOUT_UTIL_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef VOUT_UTIL_CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define VOUT_UTIL_CMDLINE_PARSER_PACKAGE "test_VoutUtil"
#endif

#ifndef VOUT_UTIL_CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define VOUT_UTIL_CMDLINE_PARSER_PACKAGE_NAME "test_VoutUtil"
#endif

#ifndef VOUT_UTIL_CMDLINE_PARSER_VERSION
/** @brief the program version */
#define VOUT_UTIL_CMDLINE_PARSER_VERSION "0.1"
#endif

enum enum_method { method__NULL = -1, method_arg_SetVideoStandard = 0, method_arg_SetTvSystem, method_arg_SetTVtype, method_arg_SetBackground, method_arg_SetClosedCaption, method_arg_SetAPS, method_arg_SetCopyMode, method_arg_SetAspectRatio, method_arg_SetV2alpha, method_arg_SetRescaleMode, method_arg_SetDeintMode, method_arg_SetPeakingStrength, method_arg_SetBrightness, method_arg_SetContrast, method_arg_SetHue, method_arg_SetSaturation, method_arg_GetTvDim, method_arg_SetSubtitleYoffset, method_arg_SetFormat3d, method_arg_SetShiftOffset3d, method_arg_SetAnaglyphConversion, method_arg_ConfigFullWin3dMode, method_arg_ConfigLowDelayMode, method_arg_ConfigureDisplayWindow, method_arg_GetVoutRectangleSetup, method_arg_Configure_Z_Order, method_arg_QueryDisplayWin, method_arg_QueryGraphicWinInfo };
enum enum_vo_std { vo_std__NULL = -1, vo_std_arg_ntsc_m = 0, vo_std_arg_ntsc_j, vo_std_arg_ntsc_443, vo_std_arg_pal_b, vo_std_arg_pal_d, vo_std_arg_pal_g, vo_std_arg_pal_h, vo_std_arg_pal_i, vo_std_arg_pal_n, vo_std_arg_pal_nc, vo_std_arg_pal_m, vo_std_arg_pal_60, vo_std_arg_secam, vo_std_arg_hdtv_720p_60, vo_std_arg_hdtv_720p_50, vo_std_arg_hdtv_720p_30, vo_std_arg_hdtv_720p_24, vo_std_arg_hdtv_1080i_60, vo_std_arg_hdtv_1080i_50, vo_std_arg_hdtv_1080i_30, vo_std_arg_hdtv_1080i_25, vo_std_arg_hdtv_1080i_24, vo_std_arg_vga, vo_std_arg_svga, vo_std_arg_hdtv_1080p_60, vo_std_arg_hdtv_1080p_50, vo_std_arg_hdtv_1080i_59, vo_std_arg_hdtv_720p_59, vo_std_arg_hdtv_1080p_23, vo_std_arg_hdtv_1080p_59, vo_std_arg_hdtv_1080p_60_3d, vo_std_arg_hdtv_1080p_50_3d, vo_std_arg_hdtv_1080p_30_3d, vo_std_arg_hdtv_1080p_24_3d, vo_std_arg_hdtv_720p_60_3d, vo_std_arg_hdtv_720p_50_3d, vo_std_arg_hdtv_720p_30_3d, vo_std_arg_hdtv_720p_24_3d, vo_std_arg_hdtv_720p_59_3d, vo_std_arg_hdtv_1080i_60_3d, vo_std_arg_hdtv_1080i_59_3d, vo_std_arg_hdtv_1080i_50_3d, vo_std_arg_hdtv_1080p_23_3d };
enum enum_vo_ped_type { vo_ped_type__NULL = -1, vo_ped_type_arg_300_700_on = 0, vo_ped_type_arg_300_700_off, vo_ped_type_arg_286_714_on, vo_ped_type_arg_286_714_off };
enum enum_f3d { f3d__NULL = -1, f3d_arg_auto = 0, f3d_arg_reserved, f3d_arg_side_by_side, f3d_arg_top_and_bottom };
enum enum_vo_face_type { vo_face_type__NULL = -1, vo_face_type_arg_analog_and_digital = 0, vo_face_type_arg_analog_only, vo_face_type_arg_digital_only };
enum enum_vo_hdmi_mode { vo_hdmi_mode__NULL = -1, vo_hdmi_mode_arg_dvi_on = 0, vo_hdmi_mode_arg_hdmi_on, vo_hdmi_mode_arg_hdmi_off };
enum enum_hdmi_audio_sf { hdmi_audio_sf__NULL = -1, hdmi_audio_sf_arg_null = 0, hdmi_audio_sf_arg_32k, hdmi_audio_sf_arg_44_1k, hdmi_audio_sf_arg_48k, hdmi_audio_sf_arg_88_2k, hdmi_audio_sf_arg_96k, hdmi_audio_sf_arg_176_4k, hdmi_audio_sf_arg_192k };
enum enum_video_sys { video_sys__NULL = -1, video_sys_arg_ntsc = 0, video_sys_arg_pal, video_sys_arg_720_50, video_sys_arg_720_60, video_sys_arg_1080_50, video_sys_arg_1080_60, video_sys_arg_1080_24, video_sys_arg_svga800x600, video_sys_arg_vga1024x768, video_sys_arg_vga1280x800, video_sys_arg_vga1366x768, video_sys_arg_vga1280x1024, video_sys_arg_vga800x600 };
enum enum_tv_type { tv_type__NULL = -1, tv_type_arg_4by3 = 0, tv_type_arg_16by9_fixed, tv_type_arg_16by9_auto, tv_type_arg_16by10 };
enum enum_vbi_aps { vbi_aps__NULL = -1, vbi_aps_arg_off = 0, vbi_aps_arg_type1, vbi_aps_arg_type2, vbi_aps_arg_type3 };
enum enum_vbi_cp_mode { vbi_cp_mode__NULL = -1, vbi_cp_mode_arg_copy_free = 0, vbi_cp_mode_arg_reserve, vbi_cp_mode_arg_copy_once, vbi_cp_mode_arg_copy_none };
enum enum_vbi_aspect_ratio { vbi_aspect_ratio__NULL = -1, vbi_aspect_ratio_arg_reserved0 = 0, vbi_aspect_ratio_arg_14by9_lb_center, vbi_aspect_ratio_arg_14by9_lb_top, vbi_aspect_ratio_arg_reserved3, vbi_aspect_ratio_arg_16by9_lb_top, vbi_aspect_ratio_arg_reserved5, vbi_aspect_ratio_arg_reserved6, vbi_aspect_ratio_arg_16by9, vbi_aspect_ratio_arg_4by3, vbi_aspect_ratio_arg_reserved9, vbi_aspect_ratio_arg_reserved10, vbi_aspect_ratio_arg_16by9_lb_center, vbi_aspect_ratio_arg_reserved12, vbi_aspect_ratio_arg_lt_16by9_lb_center, vbi_aspect_ratio_arg_14by9 };
enum enum_video_plane { video_plane__NULL = -1, video_plane_arg_v1 = 0, video_plane_arg_v2, video_plane_arg_sub1, video_plane_arg_osd1, video_plane_arg_osd2, video_plane_arg_win1, video_plane_arg_win2, video_plane_arg_win3, video_plane_arg_win4, video_plane_arg_win5 };
enum enum_rescale_mode { rescale_mode__NULL = -1, rescale_mode_arg_auto = 0, rescale_mode_arg_lb_cntr, rescale_mode_arg_lb_top, rescale_mode_arg_ps_cntr, rescale_mode_arg_ps_auto, rescale_mode_arg_full_scale, rescale_mode_arg_user_defined };
enum enum_deint_mode { deint_mode__NULL = -1, deint_mode_arg_bob = 0, deint_mode_arg_weave, deint_mode_arg_madi, deint_mode_arg_madi_sngldir, deint_mode_arg_mcomp, deint_mode_arg_film, deint_mode_arg_auto };
enum enum_vo_3d_src_format { vo_3d_src_format__NULL = -1, vo_3d_src_format_arg_side_by_side = 0, vo_3d_src_format_arg_top_bottom };

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *detailed_help_help; /**< @brief Print help, including all details and hidden options, and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  enum enum_method method_arg;	/**< @brief The api name of VoutUtil.  */
  char * method_orig;	/**< @brief The api name of VoutUtil original value given at command line.  */
  const char *method_help; /**< @brief The api name of VoutUtil help description.  */
  enum enum_vo_std vo_std_arg;	/**< @brief An enum option of VO_STANDARD.  */
  char * vo_std_orig;	/**< @brief An enum option of VO_STANDARD original value given at command line.  */
  const char *vo_std_help; /**< @brief An enum option of VO_STANDARD help description.  */
  int prog_arg;	/**< @brief The parameter enProg.  */
  char * prog_orig;	/**< @brief The parameter enProg original value given at command line.  */
  const char *prog_help; /**< @brief The parameter enProg help description.  */
  int dif_arg;	/**< @brief The parameter enDIF.  */
  char * dif_orig;	/**< @brief The parameter enDIF original value given at command line.  */
  const char *dif_help; /**< @brief The parameter enDIF help description.  */
  int comp_rgb_arg;	/**< @brief The parameter enCompRGB.  */
  char * comp_rgb_orig;	/**< @brief The parameter enCompRGB original value given at command line.  */
  const char *comp_rgb_help; /**< @brief The parameter enCompRGB help description.  */
  enum enum_vo_ped_type vo_ped_type_arg;	/**< @brief An enum option of VO_PEDESTAL_TYPE.  */
  char * vo_ped_type_orig;	/**< @brief An enum option of VO_PEDESTAL_TYPE original value given at command line.  */
  const char *vo_ped_type_help; /**< @brief An enum option of VO_PEDESTAL_TYPE help description.  */
  int dataInt0_arg;	/**< @brief The parameter of dataInt0 (default='0').  */
  char * dataInt0_orig;	/**< @brief The parameter of dataInt0 original value given at command line.  */
  const char *dataInt0_help; /**< @brief The parameter of dataInt0 help description.  */
  int dataInt1_arg;	/**< @brief The parameter of dataInt1 (default='0').  */
  char * dataInt1_orig;	/**< @brief The parameter of dataInt1 original value given at command line.  */
  const char *dataInt1_help; /**< @brief The parameter of dataInt1 help description.  */
  int hdmi_arg;	/**< @brief The parameter of bHdmi (default='1').  */
  char * hdmi_orig;	/**< @brief The parameter of bHdmi original value given at command line.  */
  const char *hdmi_help; /**< @brief The parameter of bHdmi help description.  */
  enum enum_f3d f3d_arg;	/**< @brief The enum option of format3d.  */
  char * f3d_orig;	/**< @brief The enum option of format3d original value given at command line.  */
  const char *f3d_help; /**< @brief The enum option of format3d help description.  */
  enum enum_vo_face_type vo_face_type_arg;	/**< @brief The enum option of VO_INTERFACE_TYPE.  */
  char * vo_face_type_orig;	/**< @brief The enum option of VO_INTERFACE_TYPE original value given at command line.  */
  const char *vo_face_type_help; /**< @brief The enum option of VO_INTERFACE_TYPE help description.  */
  enum enum_vo_hdmi_mode vo_hdmi_mode_arg;	/**< @brief The enum option of VO_HDMI_MODE belonging to struct VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME.  */
  char * vo_hdmi_mode_orig;	/**< @brief The enum option of VO_HDMI_MODE belonging to struct VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME original value given at command line.  */
  const char *vo_hdmi_mode_help; /**< @brief The enum option of VO_HDMI_MODE belonging to struct VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME help description.  */
  enum enum_hdmi_audio_sf hdmi_audio_sf_arg;	/**< @brief The enum option of VO_HDMI_AUDIO_SAMPLE_FREQ.  */
  char * hdmi_audio_sf_orig;	/**< @brief The enum option of VO_HDMI_AUDIO_SAMPLE_FREQ original value given at command line.  */
  const char *hdmi_audio_sf_help; /**< @brief The enum option of VO_HDMI_AUDIO_SAMPLE_FREQ help description.  */
  int audio_ch_count_arg;	/**< @brief The audio channel count.  */
  char * audio_ch_count_orig;	/**< @brief The audio channel count original value given at command line.  */
  const char *audio_ch_count_help; /**< @brief The audio channel count help description.  */
  int update_video_arg;	/**< @brief The parameter of bUpdateVideo (default='1').  */
  char * update_video_orig;	/**< @brief The parameter of bUpdateVideo original value given at command line.  */
  const char *update_video_help; /**< @brief The parameter of bUpdateVideo help description.  */
  int update_hdmi_arg;	/**< @brief The parameter of bUpdateHdmi.  */
  char * update_hdmi_orig;	/**< @brief The parameter of bUpdateHdmi original value given at command line.  */
  const char *update_hdmi_help; /**< @brief The parameter of bUpdateHdmi help description.  */
  enum enum_video_sys video_sys_arg;	/**< @brief The enum option of ENUM_VIDEO_SYSTEM.  */
  char * video_sys_orig;	/**< @brief The enum option of ENUM_VIDEO_SYSTEM original value given at command line.  */
  const char *video_sys_help; /**< @brief The enum option of ENUM_VIDEO_SYSTEM help description.  */
  enum enum_tv_type tv_type_arg;	/**< @brief The enum option of VO_TV_TYPE.  */
  char * tv_type_orig;	/**< @brief The enum option of VO_TV_TYPE original value given at command line.  */
  const char *tv_type_help; /**< @brief The enum option of VO_TV_TYPE help description.  */
  int* color_arg;	/**< @brief The rgb color.  */
  char ** color_orig;	/**< @brief The rgb color original value given at command line.  */
  unsigned int color_min; /**< @brief The rgb color's minimum occurreces */
  unsigned int color_max; /**< @brief The rgb color's maximum occurreces */
  const char *color_help; /**< @brief The rgb color help description.  */
  int enable_arg;	/**< @brief The enable parameter.  */
  char * enable_orig;	/**< @brief The enable parameter original value given at command line.  */
  const char *enable_help; /**< @brief The enable parameter help description.  */
  int cc_odd_arg;	/**< @brief The parameter of enCC_odd.  */
  char * cc_odd_orig;	/**< @brief The parameter of enCC_odd original value given at command line.  */
  const char *cc_odd_help; /**< @brief The parameter of enCC_odd help description.  */
  int cc_even_arg;	/**< @brief The parameter of enCC_even.  */
  char * cc_even_orig;	/**< @brief The parameter of enCC_even original value given at command line.  */
  const char *cc_even_help; /**< @brief The parameter of enCC_even help description.  */
  int ext_arg;	/**< @brief The parameter of enExt.  */
  char * ext_orig;	/**< @brief The parameter of enExt original value given at command line.  */
  const char *ext_help; /**< @brief The parameter of enExt help description.  */
  enum enum_vbi_aps vbi_aps_arg;	/**< @brief The enum option of VO_VBI_APS.  */
  char * vbi_aps_orig;	/**< @brief The enum option of VO_VBI_APS original value given at command line.  */
  const char *vbi_aps_help; /**< @brief The enum option of VO_VBI_APS help description.  */
  enum enum_vbi_cp_mode vbi_cp_mode_arg;	/**< @brief The enum of VO_VBI_COPY_MODE.  */
  char * vbi_cp_mode_orig;	/**< @brief The enum of VO_VBI_COPY_MODE original value given at command line.  */
  const char *vbi_cp_mode_help; /**< @brief The enum of VO_VBI_COPY_MODE help description.  */
  enum enum_vbi_aspect_ratio vbi_aspect_ratio_arg;	/**< @brief The enum of VO_VBI_ASPECT_RATIO.  */
  char * vbi_aspect_ratio_orig;	/**< @brief The enum of VO_VBI_ASPECT_RATIO original value given at command line.  */
  const char *vbi_aspect_ratio_help; /**< @brief The enum of VO_VBI_ASPECT_RATIO help description.  */
  int number_arg;	/**< @brief The int parameter used to set the value to be applied.  */
  char * number_orig;	/**< @brief The int parameter used to set the value to be applied original value given at command line.  */
  const char *number_help; /**< @brief The int parameter used to set the value to be applied help description.  */
  enum enum_video_plane video_plane_arg;	/**< @brief The enum option of VO_VIDEO_PLANE.  */
  char * video_plane_orig;	/**< @brief The enum option of VO_VIDEO_PLANE original value given at command line.  */
  const char *video_plane_help; /**< @brief The enum option of VO_VIDEO_PLANE help description.  */
  enum enum_rescale_mode rescale_mode_arg;	/**< @brief The enum option of VO_RESCALE_MODE.  */
  char * rescale_mode_orig;	/**< @brief The enum option of VO_RESCALE_MODE original value given at command line.  */
  const char *rescale_mode_help; /**< @brief The enum option of VO_RESCALE_MODE help description.  */
  int* x_aris_arg;	/**< @brief The x-aris of window rectangle.  */
  char ** x_aris_orig;	/**< @brief The x-aris of window rectangle original value given at command line.  */
  unsigned int x_aris_min; /**< @brief The x-aris of window rectangle's minimum occurreces */
  unsigned int x_aris_max; /**< @brief The x-aris of window rectangle's maximum occurreces */
  const char *x_aris_help; /**< @brief The x-aris of window rectangle help description.  */
  int* y_aris_arg;	/**< @brief The y-aris of window rectangle.  */
  char ** y_aris_orig;	/**< @brief The y-aris of window rectangle original value given at command line.  */
  unsigned int y_aris_min; /**< @brief The y-aris of window rectangle's minimum occurreces */
  unsigned int y_aris_max; /**< @brief The y-aris of window rectangle's maximum occurreces */
  const char *y_aris_help; /**< @brief The y-aris of window rectangle help description.  */
  int* width_arg;	/**< @brief The width of window rectangle.  */
  char ** width_orig;	/**< @brief The width of window rectangle original value given at command line.  */
  unsigned int width_min; /**< @brief The width of window rectangle's minimum occurreces */
  unsigned int width_max; /**< @brief The width of window rectangle's maximum occurreces */
  const char *width_help; /**< @brief The width of window rectangle help description.  */
  int* height_arg;	/**< @brief The height of window rectangle.  */
  char ** height_orig;	/**< @brief The height of window rectangle original value given at command line.  */
  unsigned int height_min; /**< @brief The height of window rectangle's minimum occurreces */
  unsigned int height_max; /**< @brief The height of window rectangle's maximum occurreces */
  const char *height_help; /**< @brief The height of window rectangle help description.  */
  enum enum_deint_mode deint_mode_arg;	/**< @brief The enum option of VO_DEINT_MODE.  */
  char * deint_mode_orig;	/**< @brief The enum option of VO_DEINT_MODE original value given at command line.  */
  const char *deint_mode_help; /**< @brief The enum option of VO_DEINT_MODE help description.  */
  int switch_arg;	/**< @brief The parameter switchSrcEye (default='0').  */
  char * switch_orig;	/**< @brief The parameter switchSrcEye original value given at command line.  */
  const char *switch_help; /**< @brief The parameter switchSrcEye help description.  */
  enum enum_vo_3d_src_format vo_3d_src_format_arg;	/**< @brief The enum option of VO_3D_SOURCE_FORMAT (default='side_by_side').  */
  char * vo_3d_src_format_orig;	/**< @brief The enum option of VO_3D_SOURCE_FORMAT original value given at command line.  */
  const char *vo_3d_src_format_help; /**< @brief The enum option of VO_3D_SOURCE_FORMAT help description.  */
  int* z_order_arg;	/**< @brief The z-order of all planes.  */
  char ** z_order_orig;	/**< @brief The z-order of all planes original value given at command line.  */
  unsigned int z_order_min; /**< @brief The z-order of all planes's minimum occurreces */
  unsigned int z_order_max; /**< @brief The z-order of all planes's maximum occurreces */
  const char *z_order_help; /**< @brief The z-order of all planes help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int detailed_help_given ;	/**< @brief Whether detailed-help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int method_given ;	/**< @brief Whether method was given.  */
  unsigned int vo_std_given ;	/**< @brief Whether vo-std was given.  */
  unsigned int prog_given ;	/**< @brief Whether prog was given.  */
  unsigned int dif_given ;	/**< @brief Whether dif was given.  */
  unsigned int comp_rgb_given ;	/**< @brief Whether comp-rgb was given.  */
  unsigned int vo_ped_type_given ;	/**< @brief Whether vo-ped-type was given.  */
  unsigned int dataInt0_given ;	/**< @brief Whether dataInt0 was given.  */
  unsigned int dataInt1_given ;	/**< @brief Whether dataInt1 was given.  */
  unsigned int hdmi_given ;	/**< @brief Whether hdmi was given.  */
  unsigned int f3d_given ;	/**< @brief Whether f3d was given.  */
  unsigned int vo_face_type_given ;	/**< @brief Whether vo-face-type was given.  */
  unsigned int vo_hdmi_mode_given ;	/**< @brief Whether vo-hdmi-mode was given.  */
  unsigned int hdmi_audio_sf_given ;	/**< @brief Whether hdmi-audio-sf was given.  */
  unsigned int audio_ch_count_given ;	/**< @brief Whether audio-ch-count was given.  */
  unsigned int update_video_given ;	/**< @brief Whether update-video was given.  */
  unsigned int update_hdmi_given ;	/**< @brief Whether update-hdmi was given.  */
  unsigned int video_sys_given ;	/**< @brief Whether video-sys was given.  */
  unsigned int tv_type_given ;	/**< @brief Whether tv-type was given.  */
  unsigned int color_given ;	/**< @brief Whether color was given.  */
  unsigned int enable_given ;	/**< @brief Whether enable was given.  */
  unsigned int cc_odd_given ;	/**< @brief Whether cc-odd was given.  */
  unsigned int cc_even_given ;	/**< @brief Whether cc-even was given.  */
  unsigned int ext_given ;	/**< @brief Whether ext was given.  */
  unsigned int vbi_aps_given ;	/**< @brief Whether vbi-aps was given.  */
  unsigned int vbi_cp_mode_given ;	/**< @brief Whether vbi-cp-mode was given.  */
  unsigned int vbi_aspect_ratio_given ;	/**< @brief Whether vbi-aspect-ratio was given.  */
  unsigned int number_given ;	/**< @brief Whether number was given.  */
  unsigned int video_plane_given ;	/**< @brief Whether video-plane was given.  */
  unsigned int rescale_mode_given ;	/**< @brief Whether rescale-mode was given.  */
  unsigned int x_aris_given ;	/**< @brief Whether x-aris was given.  */
  unsigned int y_aris_given ;	/**< @brief Whether y-aris was given.  */
  unsigned int width_given ;	/**< @brief Whether width was given.  */
  unsigned int height_given ;	/**< @brief Whether height was given.  */
  unsigned int deint_mode_given ;	/**< @brief Whether deint-mode was given.  */
  unsigned int switch_given ;	/**< @brief Whether switch was given.  */
  unsigned int vo_3d_src_format_given ;	/**< @brief Whether vo-3d-src-format was given.  */
  unsigned int z_order_given ;	/**< @brief Whether z-order was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct vout_util_cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];
/** @brief all the lines making the detailed help output (including hidden options and details) */
extern const char *gengetopt_args_info_detailed_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int vout_util_cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use vout_util_cmdline_parser_ext() instead
 */
int vout_util_cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int vout_util_cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct vout_util_cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int vout_util_cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int vout_util_cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void vout_util_cmdline_parser_print_help(void);
/**
 * Print the detailed help (including hidden options and details)
 */
void vout_util_cmdline_parser_print_detailed_help(void);
/**
 * Print the version
 */
void vout_util_cmdline_parser_print_version(void);

/**
 * Initializes all the fields a vout_util_cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void vout_util_cmdline_parser_params_init(struct vout_util_cmdline_parser_params *params);

/**
 * Allocates dynamically a vout_util_cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized vout_util_cmdline_parser_params structure
 */
struct vout_util_cmdline_parser_params *vout_util_cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void vout_util_cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void vout_util_cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int vout_util_cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *vout_util_cmdline_parser_method_values[];  /**< @brief Possible values for method. */
extern const char *vout_util_cmdline_parser_vo_std_values[];  /**< @brief Possible values for vo-std. */
extern const char *vout_util_cmdline_parser_vo_ped_type_values[];  /**< @brief Possible values for vo-ped-type. */
extern const char *vout_util_cmdline_parser_f3d_values[];  /**< @brief Possible values for f3d. */
extern const char *vout_util_cmdline_parser_vo_face_type_values[];  /**< @brief Possible values for vo-face-type. */
extern const char *vout_util_cmdline_parser_vo_hdmi_mode_values[];  /**< @brief Possible values for vo-hdmi-mode. */
extern const char *vout_util_cmdline_parser_hdmi_audio_sf_values[];  /**< @brief Possible values for hdmi-audio-sf. */
extern const char *vout_util_cmdline_parser_video_sys_values[];  /**< @brief Possible values for video-sys. */
extern const char *vout_util_cmdline_parser_tv_type_values[];  /**< @brief Possible values for tv-type. */
extern const char *vout_util_cmdline_parser_vbi_aps_values[];  /**< @brief Possible values for vbi-aps. */
extern const char *vout_util_cmdline_parser_vbi_cp_mode_values[];  /**< @brief Possible values for vbi-cp-mode. */
extern const char *vout_util_cmdline_parser_vbi_aspect_ratio_values[];  /**< @brief Possible values for vbi-aspect-ratio. */
extern const char *vout_util_cmdline_parser_video_plane_values[];  /**< @brief Possible values for video-plane. */
extern const char *vout_util_cmdline_parser_rescale_mode_values[];  /**< @brief Possible values for rescale-mode. */
extern const char *vout_util_cmdline_parser_deint_mode_values[];  /**< @brief Possible values for deint-mode. */
extern const char *vout_util_cmdline_parser_vo_3d_src_format_values[];  /**< @brief Possible values for vo-3d-src-format. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* VOUT_UTIL_CMDLINE_H */
